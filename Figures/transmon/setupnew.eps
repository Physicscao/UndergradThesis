%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: setup.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: xue
%%CreationDate: 2018/5/9, 11:30:02
%%BoundingBox: 0 0 593 467
%%HiResBoundingBox: 0 0 592.4410 466.2991
%%CropBox: 0 0 592.4410 466.2991
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1331 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   pdfx:Comments=""
   pdfx:Company=""
   pdfx:SourceModified="D:20171008145653+06'56'"
   xmp:CreateDate="2018-02-06T23:43:22+08:00"
   xmp:CreatorTool="Adobe Acrobat 15.7.0"
   xmp:ModifyDate="2018-05-09T11:29:48+08:00"
   xmp:MetadataDate="2018-05-09T11:29:48+08:00"
   pdf:Keywords=""
   pdf:Producer="Acrobat Distiller 11.0 (Windows)"
   xmpMM:DocumentID="uuid:4e5fdc06-46f8-4983-8de5-1ff52c8c7989"
   xmpMM:InstanceID="uuid:0462c520-5cd2-4601-bc52-89fc0164b528">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>A</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">setup.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -466.299 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 466.299 li
592.441 466.299 li
592.441 0 li
cp
clp
gsave
-36.85 -34.016 mo
683.15 -34.016 li
683.15 505.984 li
-36.85 505.984 li
cp
eclp
gsave
.06 0 mo
592.441 0 li
592.441 466.239 li
.06 466.239 li
cp
clp
.06 466.239 mo
592.5 466.239 li
592.5 -.0809937 li
.06 -.0809937 li
cp
false sop
0 0 0 0 cmyk
f
.903044 .872343 .884215 .782895 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri-Bold-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PBAAAA+Calibri-Bold)
%%Title: (PBAAAA+Calibri-Bold Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PBAAAA+Calibri-Bold def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-519 -349 1263 1039} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 896 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 4 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
894 <001C60D8A8C9B8327E958805E8662F53A1A990B9CCB71FCB46624E3EEF0
4274C3DAF061F941DA251D48831553D467B545C4CEDC51B9017028716C85AD09
8E09A3C35F11C8F03EE82A4054E32B8BBACDB036019F71B89204547FB39A4A6D
739D6463F68B1144275E15DB1745616C854C02B531B02A4741FE67C594BE3CE1
193E9FE580C9645D3BCBBF3A5276BD064CC24D7CE1543587B9258356EAD47C59
1BCCA33BA7700308079D71FAFD9F7BBD1A301FDDF3F5650AF7217E5B885A3A30
8ACA9B6BCF33F287BA0E1E22E89D4640A10962E72F3FD> |
258 <001C60D8A8C9B7AD0A34D5A33DA54D708C09070E3263DB3F8B204742934
F45464C864E5219DC64C17C21334728C70A28136E97F8B50DED54E9169E494DC
FFBE08054CD1ABEDFE9442047B18ABC511F07776D5525C7536F54A7020A4D066
60444EA4587557797F3D30E946423D7B549AB2AE4911FA9B4137E2A2722357A5
06A6A05F91A214894E28FEC6B492CDF90F6872AAE0C40180F5DD11FF249C62B7
437E3A71BA232F3D2872FD555E1C9AC4E7F4B48457EB6186F604DC3EE6103F0F
881A966A4A53DB93C1C7AD28044A61CF0FCE7D40BA68015641BB746FB7DDE0D2
F135B3E72C27DE147EB6127162600CEE2FE996BF71B8B39FDE57DFC392DDA09C
4BF60254D74CA373499967C5100501D06A31B9AF30F8F868E5E3B054E309214B
EED4F999B3B55712B0FD812D6575581ED3C4A080C3FC359594852C6FA23B784C
4DB4B1AC424E90B4505E356F1C575F8C57FE52642AA261D219ED5B8276063858
1CA02> |
895 <001C60D8A8C9B8327E956EFD6F583E438937FAC87F33DC46A04526D6E80
E2849DBBCC1F7712D20B9271A919C9D9B2E00B79700FC941867FA947C284C380
2BE0E95A70EEBACCBEC96A56F44B9450C107D71F89C454E931437855A03DB869
68B1EA8C1D4D47096F611255B03FF5004580609A8DE3BCA48EE46A18BE9E1809
A8482B751FED58945B4AC13F78D1A1E271D871C9EC72400D26E7F64C185FB83A
2303F6ABF6E27422155572EA49271E93DEA6E7C814186652AE23345084285055
62B1C8AD2B0420417> |
0 <001C60D8A8C9B7A086528E2CBE7FD4F03CC6CDCA18E09BCC917FA5F119478
AAC0A696931453BF661861F40ACE8D15EA0278E8F88478BB0248E8D19042FB8B
7F2BB2D4ECFE961B3EEB80565197E481D427DFF375EC95F16C0E36FE28AEC2A0
702F6CB5ACA5B242B6593847C74B58C6FBE25BCF0D4AFF25D49578CAB0D929B0
25DECF86FE8C45E91FC3804785896842CEEC7085BA98EF5BCC94B208BF43A5FA
51448171853E476E618A0AB76D0CDCEE51B8CF3FCD6DA051824D7EFC40D8D270
BAD39624CE3E5CBFE64B165BA24EF48FCEC82F8DEB8BFCD829A07FF03FFE381E
622BF0967DB53309A79D2F393F52C4B535EC59CAFAAC152061A92D31A3A6E83C
18D63056F4453027EAA702C494809677EB8C59BD219046DE492EABC7DF19D085
C93C98D2A8DDC68AF0F5D7D82447ED6165A8DE95E6965A0F15A3F7696EAE508C
E290FD5B2FFA8A49A20B157645C3C3FEFBC64E2B40E75B90474094AF1599689F
A1EAB0D131F6DB991FC0D5943DE54CA9E5ECDA986A63CDF0394AF79DB398CE8A
C4F02FDBD88EE6AE535CFB6C3B33C157AAFFBEC52BA3DACE77ABDA0C787220FB
A75DA1E45C945> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PBAAAA+Calibri-Bold-Identity-H /Identity-H 0 [/PBAAAA+Calibri-Bold] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LIRVKV+Calibri-Bold /PBAAAA+Calibri-Bold-Identity-H findfont ct_VMDictPut
LIRVKV+Calibri-Bold [18 0 0 -18 0 0 ]msf
6.8306 24.9843 mo
(\003~\001\002\003\177)
[5.61044 8.88657 0 ]xsh
304.31 107.224 mo
304.349 147.686 290.809 180.53 274.105 180.53 cv
257.402 180.53 243.861 147.686 243.861 107.171 cv
243.861 66.656 257.402 33.812 274.105 33.812 cv
290.809 33.812 304.349 66.656 304.31 107.224 cv
.0949416 .0773938 .0714733 0 cmyk
ef
305.339 109.07 mo
305.339 109.08 li
305.31 110.962 li
305.309 110.972 li
305.633 128.666 298.335 180.316 274.09 181.529 cv
273.699 181.523 li
273.668 181.523 li
273.279 181.505 li
263.355 180.868 256.526 170.009 252.863 161.894 cv
252.856 161.877 li
252.324 160.678 li
245.576 144.818 243.093 126.196 242.871 109.07 cv
242.861 107.176 li
242.861 107.166 li
242.871 105.272 li
242.871 105.262 li
242.901 103.38 li
242.581 85.673 249.862 34.084 274.09 32.812 cv
274.121 32.812 li
274.511 32.818 li
298.884 34.827 305.866 87.212 305.339 105.272 cv
305.349 107.166 li
305.349 107.176 li
305.339 109.07 li
cp
303.349 107.166 mo
303.349 107.176 li
303.339 105.283 li
303.339 105.293 li
303.31 103.412 li
303.31 103.422 li
303.261 101.553 li
303.262 101.563 li
303.194 99.707 li
303.194 99.718 li
303.107 97.875 li
303.108 97.885 li
303.002 96.057 li
303.003 96.067 li
302.879 94.253 li
302.88 94.264 li
302.738 92.465 li
302.739 92.476 li
302.579 90.693 li
302.58 90.704 li
302.402 88.938 li
302.403 88.948 li
302.208 87.199 li
302.209 87.21 li
301.997 85.478 li
301.998 85.489 li
301.769 83.775 li
301.77 83.786 li
301.524 82.091 li
301.526 82.103 li
301.263 80.427 li
301.265 80.438 li
300.986 78.783 li
300.988 78.794 li
300.693 77.159 li
300.696 77.17 li
300.385 75.556 li
300.387 75.568 li
300.061 73.975 li
300.063 73.987 li
299.722 72.416 li
299.724 72.428 li
299.368 70.881 li
299.371 70.893 li
298.999 69.369 li
299.002 69.381 li
298.616 67.881 li
298.619 67.893 li
298.219 66.417 li
298.222 66.43 li
297.808 64.979 li
297.812 64.992 li
297.383 63.567 li
297.387 63.581 li
296.945 62.182 li
296.95 62.195 li
296.494 60.823 li
296.499 60.837 li
296.03 59.492 li
296.035 59.507 li
295.553 58.19 li
295.559 58.205 li
295.064 56.916 li
295.07 56.931 li
294.563 55.672 li
294.57 55.687 li
294.051 54.458 li
294.057 54.474 li
293.526 53.274 li
293.534 53.291 li
292.991 52.122 li
292.999 52.139 li
292.444 51.002 li
292.453 51.019 li
291.887 49.914 li
291.897 49.932 li
291.32 48.86 li
291.33 48.878 li
290.743 47.839 li
290.754 47.858 li
290.155 46.852 li
290.167 46.872 li
289.559 45.9 li
289.572 45.92 li
288.953 44.984 li
288.968 45.005 li
288.339 44.103 li
288.355 44.125 li
287.716 43.26 li
287.733 43.282 li
287.086 42.453 li
287.104 42.476 li
286.448 41.685 li
286.468 41.708 li
285.802 40.954 li
285.824 40.978 li
285.15 40.263 li
285.174 40.287 li
284.491 39.611 li
284.517 39.636 li
283.826 38.999 li
283.855 39.024 li
283.156 38.427 li
283.187 38.452 li
282.48 37.896 li
282.514 37.921 li
281.8 37.406 li
281.836 37.431 li
281.115 36.958 li
281.154 36.982 li
280.426 36.551 li
280.469 36.575 li
279.734 36.187 li
279.779 36.21 li
279.037 35.865 li
279.086 35.886 li
278.338 35.585 li
278.39 35.604 li
277.636 35.349 li
277.69 35.365 li
276.93 35.155 li
276.973 35.165 li
276.591 35.077 li
276.619 35.083 li
276.236 35.007 li
276.265 35.012 li
275.881 34.947 li
275.911 34.952 li
275.525 34.898 li
275.555 34.902 li
275.167 34.86 li
275.198 34.863 li
274.809 34.833 li
274.84 34.835 li
274.45 34.817 li
274.481 34.818 li
274.09 34.812 li
274.121 34.812 li
273.73 34.818 li
273.76 34.817 li
273.371 34.835 li
273.401 34.833 li
273.013 34.863 li
273.043 34.86 li
272.656 34.902 li
272.686 34.898 li
272.3 34.952 li
272.33 34.947 li
271.945 35.012 li
271.974 35.007 li
271.591 35.083 li
271.62 35.077 li
271.238 35.165 li
271.28 35.155 li
270.52 35.365 li
270.575 35.349 li
269.821 35.604 li
269.872 35.585 li
269.124 35.886 li
269.173 35.865 li
268.431 36.21 li
268.477 36.187 li
267.742 36.575 li
267.784 36.551 li
267.056 36.982 li
267.096 36.958 li
266.374 37.431 li
266.411 37.406 li
265.697 37.921 li
265.73 37.896 li
265.024 38.452 li
265.055 38.427 li
264.356 39.024 li
264.384 38.999 li
263.693 39.636 li
263.719 39.611 li
263.037 40.287 li
263.061 40.263 li
262.387 40.978 li
262.408 40.954 li
261.743 41.708 li
261.763 41.685 li
261.106 42.476 li
261.125 42.453 li
260.477 43.282 li
260.494 43.26 li
259.856 44.125 li
259.871 44.103 li
259.243 45.005 li
259.257 44.984 li
258.638 45.92 li
258.652 45.9 li
258.043 46.872 li
258.055 46.852 li
257.457 47.858 li
257.468 47.839 li
256.88 48.878 li
256.891 48.86 li
256.314 49.932 li
256.323 49.914 li
255.757 51.019 li
255.766 51.002 li
255.212 52.139 li
255.22 52.122 li
254.677 53.291 li
254.684 53.274 li
254.153 54.474 li
254.16 54.458 li
253.641 55.687 li
253.647 55.672 li
253.14 56.931 li
253.146 56.916 li
252.652 58.205 li
252.657 58.19 li
252.175 59.507 li
252.181 59.492 li
251.712 60.837 li
251.717 60.823 li
251.261 62.195 li
251.265 62.182 li
250.823 63.581 li
250.827 63.567 li
250.399 64.992 li
250.403 64.979 li
249.988 66.43 li
249.992 66.417 li
249.591 67.893 li
249.594 67.881 li
249.208 69.381 li
249.211 69.369 li
248.84 70.893 li
248.843 70.881 li
248.486 72.428 li
248.489 72.416 li
248.147 73.987 li
248.15 73.975 li
247.823 75.568 li
247.826 75.556 li
247.515 77.17 li
247.517 77.159 li
247.222 78.794 li
247.224 78.783 li
246.945 80.438 li
246.947 80.427 li
246.684 82.103 li
246.686 82.091 li
246.44 83.786 li
246.442 83.775 li
246.212 85.489 li
246.214 85.478 li
246.001 87.21 li
246.002 87.199 li
245.807 88.948 li
245.808 88.938 li
245.631 90.704 li
245.632 90.693 li
245.472 92.476 li
245.473 92.465 li
245.331 94.264 li
245.331 94.253 li
245.207 96.067 li
245.208 96.057 li
245.103 97.885 li
245.103 97.875 li
245.016 99.718 li
245.017 99.707 li
244.949 101.563 li
244.949 101.553 li
244.9 103.422 li
244.901 103.412 li
244.871 105.293 li
244.871 105.283 li
244.861 107.176 li
244.861 107.166 li
244.871 109.059 li
244.871 109.049 li
244.901 110.93 li
244.9 110.92 li
244.949 112.789 li
244.949 112.779 li
245.017 114.635 li
245.016 114.624 li
245.103 116.467 li
245.103 116.457 li
245.208 118.285 li
245.207 118.275 li
245.331 120.088 li
245.331 120.078 li
245.473 121.877 li
245.472 121.866 li
245.632 123.649 li
245.631 123.638 li
245.808 125.404 li
245.807 125.394 li
246.002 127.143 li
246.001 127.132 li
246.214 128.864 li
246.212 128.853 li
246.442 130.567 li
246.44 130.555 li
246.686 132.25 li
246.684 132.239 li
246.947 133.915 li
246.945 133.904 li
247.224 135.559 li
247.222 135.548 li
247.517 137.183 li
247.515 137.172 li
247.826 138.786 li
247.823 138.774 li
248.15 140.367 li
248.147 140.355 li
248.489 141.925 li
248.486 141.913 li
248.843 143.461 li
248.84 143.449 li
249.211 144.973 li
249.208 144.961 li
249.594 146.461 li
249.591 146.449 li
249.992 147.925 li
249.988 147.912 li
250.403 149.363 li
250.399 149.349 li
250.827 150.775 li
250.823 150.761 li
251.265 152.16 li
251.261 152.146 li
251.717 153.519 li
251.712 153.505 li
252.181 154.85 li
252.175 154.835 li
252.657 156.152 li
252.652 156.137 li
253.146 157.426 li
253.14 157.411 li
253.647 158.67 li
253.641 158.654 li
254.16 159.884 li
254.153 159.868 li
254.684 161.067 li
254.677 161.051 li
255.22 162.22 li
255.212 162.203 li
255.766 163.34 li
255.757 163.322 li
256.323 164.428 li
256.314 164.41 li
256.891 165.482 li
256.88 165.464 li
257.468 166.503 li
257.457 166.484 li
258.055 167.49 li
258.043 167.47 li
258.652 168.442 li
258.638 168.421 li
259.257 169.358 li
259.243 169.337 li
259.871 170.238 li
259.856 170.217 li
260.494 171.082 li
260.477 171.06 li
261.125 171.888 li
261.106 171.866 li
261.763 172.657 li
261.743 172.634 li
262.408 173.387 li
262.387 173.363 li
263.061 174.079 li
263.037 174.054 li
263.719 174.731 li
263.693 174.706 li
264.384 175.343 li
264.356 175.318 li
265.055 175.915 li
265.024 175.89 li
265.73 176.446 li
265.697 176.421 li
266.411 176.936 li
266.374 176.911 li
267.096 177.384 li
267.056 177.36 li
267.784 177.791 li
267.742 177.767 li
268.477 178.155 li
268.431 178.132 li
269.173 178.477 li
269.124 178.456 li
269.872 178.756 li
269.821 178.737 li
270.575 178.993 li
270.52 178.977 li
271.28 179.187 li
271.238 179.176 li
271.62 179.265 li
271.591 179.258 li
271.974 179.335 li
271.945 179.33 li
272.33 179.395 li
272.3 179.39 li
272.686 179.444 li
272.656 179.44 li
273.043 179.482 li
273.013 179.479 li
273.401 179.509 li
273.371 179.507 li
273.76 179.525 li
273.73 179.524 li
274.121 179.53 li
274.09 179.53 li
274.481 179.524 li
274.45 179.525 li
274.84 179.507 li
274.809 179.509 li
275.198 179.479 li
275.167 179.482 li
275.555 179.44 li
275.525 179.444 li
275.911 179.39 li
275.881 179.395 li
276.265 179.33 li
276.236 179.335 li
276.619 179.258 li
276.591 179.265 li
276.973 179.176 li
276.93 179.187 li
277.69 178.977 li
277.636 178.993 li
278.39 178.737 li
278.338 178.756 li
279.086 178.456 li
279.037 178.477 li
279.779 178.132 li
279.734 178.155 li
280.469 177.767 li
280.426 177.791 li
281.154 177.36 li
281.115 177.384 li
281.836 176.911 li
281.8 176.936 li
282.514 176.421 li
282.48 176.446 li
283.187 175.89 li
283.156 175.915 li
283.855 175.318 li
283.826 175.343 li
284.517 174.706 li
284.491 174.731 li
285.174 174.054 li
285.15 174.079 li
285.824 173.363 li
285.802 173.387 li
286.468 172.634 li
286.448 172.657 li
287.104 171.866 li
287.086 171.888 li
287.733 171.06 li
287.716 171.082 li
288.355 170.217 li
288.339 170.238 li
288.968 169.337 li
288.953 169.358 li
289.572 168.421 li
289.559 168.442 li
290.167 167.47 li
290.155 167.49 li
290.754 166.484 li
290.743 166.503 li
291.33 165.464 li
291.32 165.482 li
291.897 164.41 li
291.887 164.428 li
292.453 163.322 li
292.444 163.34 li
292.999 162.203 li
292.991 162.22 li
293.534 161.051 li
293.526 161.067 li
294.057 159.868 li
294.051 159.884 li
294.57 158.654 li
294.563 158.67 li
295.07 157.411 li
295.064 157.426 li
295.559 156.137 li
295.553 156.152 li
296.035 154.835 li
296.03 154.85 li
296.499 153.505 li
296.494 153.519 li
296.95 152.146 li
296.945 152.16 li
297.387 150.761 li
297.383 150.775 li
297.812 149.349 li
297.808 149.363 li
298.222 147.912 li
298.219 147.925 li
298.619 146.449 li
298.616 146.461 li
299.002 144.961 li
298.999 144.973 li
299.371 143.449 li
299.368 143.461 li
299.724 141.913 li
299.722 141.925 li
300.063 140.355 li
300.061 140.367 li
300.387 138.774 li
300.385 138.786 li
300.696 137.172 li
300.693 137.183 li
300.988 135.548 li
300.986 135.559 li
301.265 133.904 li
301.263 133.915 li
301.526 132.239 li
301.524 132.25 li
301.77 130.555 li
301.769 130.567 li
301.998 128.853 li
301.997 128.864 li
302.209 127.132 li
302.208 127.143 li
302.403 125.394 li
302.402 125.404 li
302.58 123.638 li
302.579 123.649 li
302.739 121.866 li
302.738 121.877 li
302.88 120.078 li
302.879 120.088 li
303.003 118.275 li
303.002 118.285 li
303.108 116.457 li
303.107 116.467 li
303.194 114.624 li
303.194 114.635 li
303.262 112.779 li
303.261 112.789 li
303.31 110.92 li
303.31 110.93 li
303.339 109.049 li
303.339 109.059 li
303.349 107.166 li
.858885 .643397 .00323491 0 cmyk
f
196.156 106.216 mo
196.156 106.203 li
196.175 105.258 li
196.175 105.245 li
197.303 64.221 231.936 32.715 272.518 32.812 cv
273.493 32.818 li
273.505 32.818 li
314.488 33.255 348.82 65.747 348.875 107.164 cv
348.875 107.177 li
348.868 108.126 li
348.868 108.139 li
348.85 109.084 li
347.729 150.109 313.103 181.62 272.518 181.53 cv
272.506 181.53 li
271.532 181.524 li
230.924 181.102 196.74 149.164 196.156 108.126 cv
196.15 107.177 li
196.15 107.164 li
196.156 106.216 li
cp
198.15 107.177 mo
198.15 107.164 li
198.156 108.113 li
198.156 108.1 li
198.174 109.045 li
198.174 109.032 li
198.205 109.974 li
198.204 109.961 li
198.247 110.9 li
198.246 110.887 li
198.301 111.824 li
198.3 111.811 li
198.367 112.744 li
198.366 112.731 li
198.445 113.661 li
198.444 113.648 li
198.534 114.574 li
198.533 114.561 li
198.635 115.484 li
198.634 115.471 li
198.748 116.391 li
198.746 116.378 li
198.872 117.294 li
198.87 117.282 li
199.007 118.194 li
199.005 118.181 li
199.154 119.09 li
199.152 119.077 li
199.312 119.982 li
199.309 119.97 li
199.481 120.871 li
199.478 120.858 li
199.661 121.756 li
199.658 121.743 li
199.852 122.637 li
199.849 122.624 li
200.054 123.514 li
200.051 123.501 li
200.267 124.386 li
200.264 124.374 li
200.491 125.255 li
200.488 125.243 li
200.726 126.12 li
200.722 126.107 li
200.971 126.98 li
200.965 126.961 li
201.494 128.693 li
201.487 128.669 li
202.058 130.383 li
202.05 130.359 li
202.663 132.054 li
202.654 132.03 li
203.309 133.706 li
203.299 133.683 li
203.994 135.338 li
203.984 135.315 li
204.719 136.951 li
204.709 136.928 li
205.483 138.542 li
205.472 138.52 li
206.285 140.113 li
206.274 140.091 li
207.125 141.661 li
207.113 141.64 li
208.002 143.188 li
207.989 143.167 li
208.915 144.691 li
208.902 144.67 li
209.864 146.171 li
209.851 146.15 li
210.849 147.626 li
210.835 147.606 li
211.869 149.057 li
211.854 149.038 li
212.922 150.463 li
212.907 150.444 li
214.009 151.843 li
213.994 151.824 li
215.13 153.196 li
215.114 153.178 li
216.282 154.523 li
216.266 154.505 li
217.467 155.822 li
217.45 155.804 li
218.683 157.093 li
218.666 157.076 li
219.929 158.335 li
219.912 158.318 li
221.206 159.548 li
221.188 159.532 li
222.512 160.731 li
222.494 160.716 li
223.847 161.884 li
223.829 161.869 li
225.21 163.006 li
225.192 162.991 li
226.602 164.096 li
226.583 164.082 li
228.02 165.154 li
228.001 165.14 li
229.465 166.18 li
229.445 166.166 li
230.936 167.172 li
230.916 167.159 li
232.432 168.131 li
232.412 168.118 li
233.953 169.055 li
233.933 169.042 li
235.499 169.944 li
235.478 169.932 li
237.068 170.797 li
237.047 170.786 li
238.66 171.615 li
238.639 171.604 li
240.275 172.395 li
240.253 172.385 li
241.912 173.139 li
241.89 173.129 li
243.57 173.845 li
243.547 173.835 li
245.248 174.512 li
245.226 174.503 li
246.947 175.14 li
246.925 175.132 li
248.666 175.729 li
248.643 175.722 li
250.403 176.278 li
250.38 176.271 li
252.159 176.786 li
252.136 176.78 li
253.933 177.253 li
253.915 177.249 li
254.82 177.469 li
254.808 177.467 li
255.718 177.677 li
255.706 177.674 li
256.62 177.874 li
256.608 177.871 li
257.526 178.06 li
257.514 178.057 li
258.435 178.235 li
258.423 178.233 li
259.349 178.4 li
259.337 178.398 li
260.267 178.553 li
260.255 178.551 li
261.189 178.696 li
261.176 178.694 li
262.114 178.828 li
262.102 178.826 li
263.043 178.949 li
263.031 178.947 li
263.975 179.058 li
263.963 179.057 li
264.911 179.156 li
264.899 179.155 li
265.851 179.243 li
265.839 179.242 li
266.794 179.319 li
266.782 179.318 li
267.74 179.383 li
267.728 179.382 li
268.69 179.436 li
268.677 179.435 li
269.642 179.477 li
269.63 179.476 li
270.598 179.506 li
270.586 179.506 li
271.557 179.524 li
271.544 179.524 li
272.518 179.53 li
272.506 179.53 li
273.48 179.524 li
273.468 179.524 li
274.439 179.506 li
274.427 179.506 li
275.395 179.476 li
275.382 179.477 li
276.347 179.435 li
276.335 179.436 li
277.297 179.382 li
277.284 179.383 li
278.243 179.318 li
278.231 179.319 li
279.186 179.242 li
279.174 179.243 li
280.125 179.155 li
280.113 179.156 li
281.061 179.057 li
281.049 179.058 li
281.994 178.947 li
281.982 178.949 li
282.923 178.826 li
282.911 178.828 li
283.848 178.694 li
283.836 178.696 li
284.77 178.551 li
284.758 178.553 li
285.687 178.398 li
285.675 178.4 li
286.601 178.233 li
286.589 178.235 li
287.511 178.057 li
287.499 178.06 li
288.417 177.871 li
288.405 177.874 li
289.319 177.674 li
289.307 177.677 li
290.216 177.467 li
290.204 177.469 li
291.11 177.249 li
291.092 177.253 li
292.889 176.78 li
292.866 176.786 li
294.645 176.271 li
294.621 176.278 li
296.382 175.722 li
296.359 175.729 li
298.1 175.132 li
298.077 175.14 li
299.799 174.503 li
299.776 174.512 li
301.477 173.835 li
301.455 173.845 li
303.135 173.129 li
303.113 173.139 li
304.771 172.385 li
304.75 172.395 li
306.386 171.604 li
306.364 171.615 li
307.978 170.786 li
307.956 170.797 li
309.546 169.932 li
309.526 169.944 li
311.092 169.042 li
311.071 169.055 li
312.613 168.118 li
312.592 168.131 li
314.109 167.159 li
314.089 167.172 li
315.579 166.166 li
315.56 166.18 li
317.024 165.14 li
317.005 165.154 li
318.442 164.082 li
318.423 164.096 li
319.833 162.991 li
319.814 163.006 li
321.196 161.869 li
321.178 161.884 li
322.531 160.716 li
322.513 160.731 li
323.836 159.532 li
323.819 159.548 li
325.113 158.318 li
325.096 158.335 li
326.359 157.076 li
326.342 157.093 li
327.574 155.804 li
327.558 155.822 li
328.758 154.505 li
328.742 154.523 li
329.911 153.178 li
329.895 153.196 li
331.03 151.824 li
331.015 151.843 li
332.117 150.444 li
332.103 150.463 li
333.17 149.038 li
333.156 149.057 li
334.189 147.606 li
334.176 147.626 li
335.174 146.15 li
335.16 146.171 li
336.122 144.67 li
336.109 144.691 li
337.035 143.167 li
337.023 143.188 li
337.912 141.64 li
337.9 141.661 li
338.751 140.091 li
338.739 140.113 li
339.552 138.52 li
339.541 138.542 li
340.316 136.928 li
340.305 136.951 li
341.04 135.315 li
341.03 135.338 li
341.725 133.683 li
341.716 133.706 li
342.37 132.03 li
342.361 132.054 li
342.975 130.359 li
342.966 130.383 li
343.538 128.669 li
343.53 128.693 li
344.059 126.961 li
344.054 126.98 li
344.303 126.107 li
344.299 126.12 li
344.537 125.243 li
344.534 125.255 li
344.761 124.374 li
344.757 124.386 li
344.973 123.501 li
344.97 123.514 li
345.175 122.624 li
345.172 122.637 li
345.366 121.743 li
345.364 121.756 li
345.546 120.858 li
345.544 120.871 li
345.715 119.97 li
345.713 119.982 li
345.873 119.077 li
345.871 119.09 li
346.019 118.181 li
346.017 118.194 li
346.155 117.282 li
346.153 117.294 li
346.278 116.378 li
346.277 116.391 li
346.391 115.471 li
346.389 115.484 li
346.492 114.561 li
346.49 114.574 li
346.581 113.648 li
346.58 113.661 li
346.658 112.731 li
346.657 112.744 li
346.724 111.811 li
346.723 111.824 li
346.778 110.887 li
346.778 110.9 li
346.82 109.961 li
346.82 109.974 li
346.851 109.032 li
346.85 109.045 li
346.869 108.1 li
346.869 108.113 li
346.875 107.164 li
346.875 107.177 li
346.869 106.229 li
346.869 106.242 li
346.85 105.297 li
346.851 105.31 li
346.82 104.368 li
346.82 104.381 li
346.778 103.441 li
346.778 103.454 li
346.723 102.518 li
346.724 102.531 li
346.657 101.598 li
346.658 101.611 li
346.58 100.681 li
346.581 100.694 li
346.49 99.768 li
346.492 99.781 li
346.389 98.858 li
346.391 98.87 li
346.277 97.951 li
346.278 97.964 li
346.153 97.048 li
346.155 97.06 li
346.017 96.148 li
346.019 96.161 li
345.871 95.252 li
345.873 95.264 li
345.713 94.359 li
345.715 94.372 li
345.544 93.471 li
345.546 93.483 li
345.364 92.586 li
345.366 92.599 li
345.172 91.705 li
345.175 91.718 li
344.97 90.828 li
344.973 90.841 li
344.757 89.956 li
344.761 89.968 li
344.534 89.087 li
344.537 89.099 li
344.299 88.222 li
344.303 88.235 li
344.054 87.362 li
344.059 87.38 li
343.53 85.649 li
343.538 85.673 li
342.966 83.959 li
342.975 83.983 li
342.361 82.288 li
342.37 82.312 li
341.716 80.636 li
341.725 80.659 li
341.03 79.003 li
341.04 79.026 li
340.305 77.391 li
340.316 77.414 li
339.541 75.799 li
339.552 75.822 li
338.739 74.229 li
338.751 74.251 li
337.9 72.68 li
337.912 72.702 li
337.023 71.154 li
337.035 71.175 li
336.109 69.651 li
336.122 69.672 li
335.16 68.171 li
335.174 68.191 li
334.176 66.716 li
334.189 66.735 li
333.156 65.285 li
333.17 65.304 li
332.103 63.879 li
332.117 63.898 li
331.015 62.499 li
331.03 62.518 li
329.895 61.145 li
329.911 61.164 li
328.742 59.819 li
328.758 59.837 li
327.558 58.52 li
327.574 58.537 li
326.342 57.249 li
326.359 57.266 li
325.096 56.007 li
325.113 56.023 li
323.819 54.794 li
323.836 54.81 li
322.513 53.611 li
322.531 53.626 li
321.178 52.458 li
321.196 52.473 li
319.814 51.336 li
319.833 51.351 li
318.423 50.246 li
318.442 50.26 li
317.005 49.187 li
317.024 49.201 li
315.56 48.162 li
315.579 48.175 li
314.089 47.17 li
314.109 47.183 li
312.592 46.211 li
312.613 46.224 li
311.071 45.287 li
311.092 45.299 li
309.526 44.398 li
309.546 44.41 li
307.956 43.545 li
307.978 43.556 li
306.364 42.727 li
306.386 42.738 li
304.75 41.946 li
304.771 41.957 li
303.113 41.203 li
303.135 41.213 li
301.455 40.497 li
301.477 40.506 li
299.776 39.83 li
299.799 39.839 li
298.077 39.201 li
298.1 39.21 li
296.359 38.613 li
296.382 38.62 li
294.621 38.064 li
294.645 38.071 li
292.866 37.556 li
292.889 37.562 li
291.092 37.089 li
291.11 37.093 li
290.204 36.872 li
290.216 36.875 li
289.307 36.665 li
289.319 36.668 li
288.405 36.468 li
288.417 36.471 li
287.499 36.282 li
287.511 36.285 li
286.589 36.107 li
286.601 36.109 li
285.675 35.942 li
285.687 35.944 li
284.758 35.788 li
284.77 35.79 li
283.836 35.646 li
283.848 35.648 li
282.911 35.514 li
282.923 35.516 li
281.982 35.393 li
281.994 35.395 li
281.049 35.284 li
281.061 35.285 li
280.113 35.186 li
280.125 35.187 li
279.174 35.099 li
279.186 35.1 li
278.231 35.023 li
278.243 35.024 li
277.284 34.959 li
277.297 34.96 li
276.335 34.906 li
276.347 34.907 li
275.382 34.865 li
275.395 34.866 li
274.427 34.836 li
274.439 34.836 li
273.468 34.818 li
273.48 34.818 li
272.506 34.812 li
272.518 34.812 li
271.544 34.818 li
271.557 34.818 li
270.586 34.836 li
270.598 34.836 li
269.63 34.866 li
269.642 34.865 li
268.677 34.907 li
268.69 34.906 li
267.728 34.96 li
267.74 34.959 li
266.782 35.024 li
266.794 35.023 li
265.839 35.1 li
265.851 35.099 li
264.899 35.187 li
264.911 35.186 li
263.963 35.285 li
263.975 35.284 li
263.031 35.395 li
263.043 35.393 li
262.102 35.516 li
262.114 35.514 li
261.176 35.648 li
261.189 35.646 li
260.255 35.79 li
260.267 35.788 li
259.337 35.944 li
259.349 35.942 li
258.423 36.109 li
258.435 36.107 li
257.514 36.285 li
257.526 36.282 li
256.608 36.471 li
256.62 36.468 li
255.706 36.668 li
255.718 36.665 li
254.808 36.875 li
254.82 36.872 li
253.915 37.093 li
253.933 37.089 li
252.136 37.562 li
252.159 37.556 li
250.38 38.071 li
250.403 38.064 li
248.643 38.62 li
248.666 38.613 li
246.925 39.21 li
246.947 39.201 li
245.226 39.839 li
245.248 39.83 li
243.547 40.506 li
243.57 40.497 li
241.89 41.213 li
241.912 41.203 li
240.253 41.957 li
240.275 41.946 li
238.639 42.738 li
238.66 42.727 li
237.047 43.556 li
237.068 43.545 li
235.478 44.41 li
235.499 44.398 li
233.933 45.299 li
233.953 45.287 li
232.412 46.224 li
232.432 46.211 li
230.916 47.183 li
230.936 47.17 li
229.445 48.175 li
229.465 48.162 li
228.001 49.201 li
228.02 49.187 li
226.583 50.26 li
226.602 50.246 li
225.192 51.351 li
225.21 51.336 li
223.829 52.473 li
223.847 52.458 li
222.494 53.626 li
222.512 53.611 li
221.188 54.81 li
221.206 54.794 li
219.912 56.023 li
219.929 56.007 li
218.666 57.266 li
218.683 57.249 li
217.45 58.537 li
217.467 58.52 li
216.266 59.837 li
216.282 59.819 li
215.114 61.164 li
215.13 61.145 li
213.994 62.518 li
214.009 62.499 li
212.907 63.898 li
212.922 63.879 li
211.854 65.304 li
211.869 65.285 li
210.835 66.735 li
210.849 66.716 li
209.851 68.191 li
209.864 68.171 li
208.902 69.672 li
208.915 69.651 li
207.989 71.175 li
208.002 71.154 li
207.113 72.702 li
207.125 72.68 li
206.274 74.251 li
206.285 74.229 li
205.472 75.822 li
205.483 75.799 li
204.709 77.414 li
204.719 77.391 li
203.984 79.026 li
203.994 79.003 li
203.299 80.659 li
203.309 80.636 li
202.654 82.312 li
202.663 82.288 li
202.05 83.983 li
202.058 83.959 li
201.487 85.673 li
201.494 85.649 li
200.965 87.38 li
200.971 87.362 li
200.722 88.235 li
200.726 88.222 li
200.488 89.099 li
200.491 89.087 li
200.264 89.968 li
200.267 89.956 li
200.051 90.841 li
200.054 90.828 li
199.849 91.718 li
199.852 91.705 li
199.658 92.599 li
199.661 92.586 li
199.478 93.483 li
199.481 93.471 li
199.309 94.372 li
199.312 94.359 li
199.152 95.264 li
199.154 95.252 li
199.005 96.161 li
199.007 96.148 li
198.87 97.06 li
198.872 97.048 li
198.746 97.964 li
198.748 97.951 li
198.634 98.87 li
198.635 98.858 li
198.533 99.781 li
198.534 99.768 li
198.444 100.694 li
198.445 100.681 li
198.366 101.611 li
198.367 101.598 li
198.3 102.531 li
198.301 102.518 li
198.246 103.454 li
198.247 103.441 li
198.204 104.381 li
198.205 104.368 li
198.174 105.31 li
198.174 105.297 li
198.156 106.242 li
198.156 106.229 li
198.15 107.177 li
.795712 .595087 .286503 0 cmyk
f
196.975 107.064 mo
196.968 106.859 li
196.957 103.938 199.745 101.821 202.028 100.502 cv
202.36 100.317 li
203.333 102.065 li
203.001 102.249 li
203.03 102.233 li
202.42 102.599 li
202.451 102.58 li
201.883 102.95 li
201.917 102.927 li
201.39 103.302 li
201.427 103.275 li
200.943 103.653 li
200.982 103.621 li
200.542 104.002 li
200.584 103.964 li
200.187 104.349 li
200.232 104.304 li
199.88 104.692 li
199.926 104.638 li
199.619 105.03 li
199.666 104.965 li
199.404 105.36 li
199.45 105.284 li
199.235 105.683 li
199.277 105.594 li
199.109 105.996 li
199.144 105.896 li
199.023 106.3 li
199.044 106.218 li
199.002 106.421 li
199.012 106.364 li
198.981 106.568 li
198.988 106.509 li
198.97 106.713 li
198.974 106.654 li
198.968 106.859 li
198.968 106.799 li
198.974 107.004 li
196.975 107.064 li
cp
207.995 97.836 mo
208.479 97.6631 li
210.567 96.936 212.695 96.32 214.836 95.7701 cv
215.757 95.539 li
216.243 97.479 li
215.322 97.7101 li
215.333 97.707 li
214.204 98.004 li
214.216 98 li
213.12 98.303 li
213.133 98.299 li
212.071 98.608 li
212.085 98.604 li
211.057 98.9171 li
211.071 98.9131 li
210.079 99.2321 li
210.094 99.2271 li
209.137 99.5511 li
209.153 99.5461 li
208.669 99.7191 li
207.995 97.836 li
cp
221.666 94.237 mo
222.324 94.1071 li
224.666 93.656 227.019 93.261 229.378 92.905 cv
229.597 92.872 li
229.888 94.851 li
229.668 94.884 li
229.675 94.882 li
228.219 95.1071 li
228.227 95.106 li
226.798 95.338 li
226.806 95.337 li
225.404 95.575 li
225.412 95.574 li
224.039 95.82 li
224.047 95.8181 li
222.702 96.071 li
222.711 96.069 li
222.052 96.199 li
221.666 94.237 li
cp
235.571 92.066 mo
237.065 91.889 li
238.698 91.701 240.334 91.531 241.97 91.373 cv
243.552 91.2271 li
243.736 93.218 li
242.155 93.3651 li
242.161 93.364 li
240.512 93.527 li
240.518 93.526 li
238.892 93.698 li
238.898 93.6971 li
237.294 93.876 li
237.3 93.875 li
235.806 94.052 li
235.571 92.066 li
cp
249.557 90.751 mo
250.549 90.683 li
252.342 90.565 254.136 90.463 255.931 90.375 cv
257.566 90.3 li
257.658 92.298 li
256.023 92.373 li
256.029 92.373 li
254.225 92.466 li
254.23 92.465 li
252.443 92.5681 li
252.449 92.567 li
250.68 92.679 li
250.686 92.679 li
249.694 92.747 li
249.557 90.751 li
cp
263.584 90.0891 mo
265.214 90.05 li
267.13 90.009 269.046 89.982 270.963 89.9731 cv
271.605 89.971 li
271.61 91.971 li
270.968 91.9731 li
270.974 91.9731 li
269.052 91.988 li
269.057 91.988 li
267.148 92.014 li
267.153 92.014 li
265.257 92.049 li
265.263 92.049 li
263.633 92.0891 li
263.584 90.0891 li
cp
277.621 90 mo
278.678 90.014 li
280.568 90.045 282.457 90.09 284.346 90.151 cv
285.64 90.1971 li
285.57 92.195 li
284.276 92.1501 li
284.282 92.1501 li
282.414 92.095 li
282.419 92.095 li
280.537 92.049 li
280.542 92.049 li
278.646 92.014 li
278.652 92.014 li
277.594 92 li
277.621 90 li
cp
291.65 90.467 mo
291.678 90.468 li
294.035 90.596 296.39 90.752 298.744 90.933 cv
299.66 91.007 li
299.5 93.001 li
298.584 92.927 li
298.589 92.927 li
296.858 92.798 li
296.864 92.799 li
295.114 92.679 li
295.119 92.679 li
293.35 92.567 li
293.356 92.5681 li
291.569 92.465 li
291.575 92.466 li
291.547 92.4641 li
291.65 90.467 li
cp
305.66 91.5551 mo
307.117 91.708 li
309.223 91.937 311.326 92.192 313.425 92.476 cv
313.637 92.506 li
313.361 94.4861 li
313.149 94.457 li
313.156 94.458 li
311.624 94.255 li
311.63 94.256 li
310.073 94.061 li
310.08 94.062 li
308.499 93.875 li
308.506 93.876 li
306.902 93.6971 li
306.908 93.698 li
305.451 93.544 li
305.66 91.5551 li
cp
319.599 93.411 mo
320.731 93.604 li
322.95 93.992 325.163 94.4211 327.362 94.911 cv
327.505 94.9431 li
327.062 96.893 li
326.919 96.8611 li
326.929 96.863 li
325.673 96.591 li
325.682 96.593 li
324.396 96.327 li
324.405 96.329 li
323.089 96.069 li
323.098 96.071 li
321.752 95.8181 li
321.761 95.82 li
320.387 95.574 li
320.395 95.575 li
319.262 95.382 li
319.599 93.411 li
cp
333.379 96.424 mo
334.286 96.687 li
336.516 97.3521 338.723 98.1071 340.855 99.0421 cv
341.052 99.131 li
340.226 100.953 li
340.03 100.863 li
340.051 100.873 li
339.242 100.528 li
339.262 100.536 li
338.415 100.197 li
338.434 100.204 li
337.55 99.869 li
337.567 99.875 li
336.646 99.5461 li
336.662 99.5511 li
335.706 99.2271 li
335.721 99.2321 li
334.728 98.9131 li
334.742 98.9171 li
333.715 98.604 li
333.728 98.608 li
332.822 98.345 li
333.379 96.424 li
cp
346.42 102.363 mo
346.568 102.492 li
349.106 104.785 349.685 107.617 347.403 110.308 cv
347.057 110.69 li
345.574 109.347 li
345.92 108.966 li
345.874 109.02 li
346.181 108.628 li
346.134 108.693 li
346.395 108.298 li
346.35 108.374 li
346.565 107.976 li
346.523 108.064 li
346.691 107.663 li
346.655 107.763 li
346.776 107.359 li
346.755 107.44 li
346.798 107.237 li
346.788 107.294 li
346.818 107.091 li
346.811 107.149 li
346.829 106.945 li
346.826 107.004 li
346.832 106.799 li
346.832 106.859 li
346.826 106.654 li
346.829 106.713 li
346.811 106.509 li
346.818 106.568 li
346.788 106.364 li
346.798 106.421 li
346.755 106.218 li
346.776 106.3 li
346.655 105.896 li
346.691 105.996 li
346.523 105.594 li
346.565 105.683 li
346.35 105.284 li
346.395 105.36 li
346.134 104.965 li
346.181 105.03 li
345.874 104.638 li
345.92 104.692 li
345.568 104.304 li
345.612 104.349 li
345.216 103.964 li
345.258 104.002 li
345.109 103.874 li
346.42 102.363 li
cp
341.765 114.2 mo
341.648 114.257 li
339.274 115.363 336.793 116.222 334.286 116.971 cv
334.108 117.023 li
333.551 115.102 li
333.728 115.051 li
333.715 115.055 li
334.742 114.741 li
334.728 114.745 li
335.721 114.426 li
335.706 114.431 li
336.662 114.107 li
336.646 114.112 li
337.567 113.783 li
337.55 113.789 li
338.434 113.454 li
338.415 113.461 li
339.262 113.122 li
339.242 113.13 li
340.051 112.786 li
340.03 112.795 li
340.799 112.446 li
340.777 112.456 li
340.894 112.4 li
341.765 114.2 li
cp
328.245 118.547 mo
327.362 118.748 li
325.162 119.236 322.95 119.667 320.731 120.054 cv
320.347 120.12 li
320.011 118.148 li
320.395 118.083 li
320.387 118.084 li
321.761 117.838 li
321.752 117.84 li
323.098 117.587 li
323.089 117.589 li
324.405 117.329 li
324.396 117.331 li
325.682 117.065 li
325.673 117.067 li
326.929 116.795 li
326.919 116.797 li
327.802 116.597 li
328.245 118.547 li
cp
314.388 121.048 mo
313.425 121.182 li
311.326 121.467 309.223 121.721 307.117 121.95 cv
306.415 122.024 li
306.205 120.035 li
306.908 119.961 li
306.902 119.961 li
308.506 119.782 li
308.499 119.783 li
310.08 119.596 li
310.073 119.597 li
311.63 119.402 li
311.624 119.403 li
313.156 119.2 li
313.149 119.201 li
314.112 119.067 li
314.388 121.048 li
cp
300.417 122.59 mo
298.744 122.725 li
296.987 122.861 295.229 122.981 293.47 123.087 cv
292.413 123.148 li
292.299 121.151 li
293.356 121.09 li
293.35 121.091 li
295.119 120.979 li
295.114 120.98 li
296.864 120.859 li
296.858 120.86 li
298.589 120.731 li
298.584 120.731 li
300.256 120.597 li
300.417 122.59 li
cp
286.404 123.434 mo
286.204 123.442 li
283.696 123.537 281.188 123.604 278.678 123.644 cv
278.38 123.648 li
278.353 121.648 li
278.652 121.644 li
278.646 121.644 li
280.542 121.609 li
280.537 121.609 li
282.419 121.563 li
282.414 121.563 li
284.282 121.508 li
284.276 121.508 li
286.129 121.443 li
286.123 121.444 li
286.323 121.435 li
286.404 123.434 li
cp
272.364 123.689 mo
270.963 123.685 li
269.046 123.676 267.13 123.649 265.214 123.608 cv
264.343 123.587 li
264.391 121.588 li
265.263 121.609 li
265.257 121.609 li
267.153 121.644 li
267.148 121.644 li
269.057 121.67 li
269.052 121.67 li
270.974 121.685 li
270.968 121.685 li
272.369 121.689 li
272.364 123.689 li
cp
258.33 123.391 mo
257.758 123.367 li
255.354 123.263 252.95 123.133 250.549 122.975 cv
250.314 122.959 li
250.451 120.964 li
250.686 120.98 li
250.68 120.979 li
252.449 121.091 li
252.443 121.09 li
254.23 121.193 li
254.225 121.192 li
256.029 121.286 li
256.023 121.285 li
257.844 121.369 li
257.839 121.369 li
258.411 121.392 li
258.33 123.391 li
cp
244.314 122.498 mo
243.647 122.44 li
241.45 122.243 239.256 122.021 237.065 121.769 cv
236.324 121.681 li
236.559 119.695 li
237.3 119.783 li
237.294 119.782 li
238.898 119.961 li
238.892 119.961 li
240.518 120.132 li
240.512 120.131 li
242.161 120.294 li
242.155 120.294 li
243.825 120.448 li
243.819 120.448 li
244.486 120.505 li
244.314 122.498 li
cp
230.348 120.896 mo
229.378 120.754 li
227.473 120.466 225.572 120.153 223.678 119.805 cv
222.419 119.569 li
222.788 117.603 li
224.047 117.84 li
224.039 117.838 li
225.412 118.084 li
225.404 118.083 li
226.806 118.322 li
226.798 118.32 li
228.227 118.552 li
228.219 118.551 li
229.675 118.776 li
229.668 118.775 li
230.638 118.917 li
230.348 120.896 li
cp
216.506 118.3 mo
216.008 118.182 li
213.801 117.642 211.61 117.037 209.452 116.325 cv
208.727 116.079 li
209.369 114.185 li
210.094 114.431 li
210.079 114.426 li
211.071 114.745 li
211.057 114.741 li
212.085 115.055 li
212.071 115.051 li
213.133 115.359 li
213.12 115.355 li
214.216 115.658 li
214.204 115.655 li
215.333 115.951 li
215.322 115.948 li
216.483 116.239 li
216.472 116.236 li
216.97 116.355 li
216.506 118.3 li
cp
203.055 113.714 mo
202.705 113.533 li
200.426 112.305 197.516 110.345 197.034 107.59 cv
197.025 107.528 li
199.003 107.232 li
199.012 107.294 li
199.002 107.237 li
199.044 107.44 li
199.023 107.359 li
199.144 107.763 li
199.109 107.663 li
199.277 108.064 li
199.235 107.976 li
199.45 108.374 li
199.404 108.298 li
199.666 108.693 li
199.619 108.628 li
199.926 109.02 li
199.88 108.966 li
200.232 109.355 li
200.187 109.309 li
200.584 109.694 li
200.542 109.656 li
200.982 110.038 li
200.943 110.005 li
201.427 110.384 li
201.39 110.357 li
201.917 110.731 li
201.883 110.708 li
202.451 111.079 li
202.42 111.059 li
203.03 111.426 li
203.001 111.409 li
203.652 111.771 li
203.626 111.757 li
203.975 111.938 li
203.055 113.714 li
f
272.27 33.812 mo
274.52 33.812 li
274.52 42.812 li
272.27 42.812 li
cp
274.52 33.812 mo
cp
272.27 49.562 mo
274.52 49.562 li
274.52 58.562 li
272.27 58.562 li
cp
274.52 49.562 mo
cp
272.27 65.312 mo
274.52 65.312 li
274.52 74.312 li
272.27 74.312 li
cp
274.52 65.312 mo
cp
272.27 81.062 mo
274.52 81.062 li
274.52 90.062 li
272.27 90.062 li
cp
274.52 81.062 mo
cp
272.27 96.812 mo
274.52 96.812 li
274.52 105.812 li
272.27 105.812 li
cp
274.52 96.812 mo
cp
272.27 112.562 mo
274.52 112.562 li
274.52 121.562 li
272.27 121.562 li
cp
274.52 112.562 mo
cp
272.27 128.312 mo
274.52 128.312 li
274.52 137.312 li
272.27 137.312 li
cp
274.52 128.312 mo
cp
272.27 144.062 mo
274.52 144.062 li
274.52 153.062 li
272.27 153.062 li
cp
274.52 144.062 mo
cp
272.27 159.812 mo
274.52 159.812 li
274.52 168.812 li
272.27 168.812 li
cp
274.52 159.812 mo
cp
274.52 175.562 mo
274.52 180.53 li
272.27 180.53 li
272.27 175.562 li
274.52 175.562 li
.721859 .421118 .063447 0 cmyk
f
337.665 71.102 mo
329.695 75.282 li
330.74 77.275 li
338.71 73.095 li
337.665 71.102 li
cp
323.717 78.417 mo
315.747 82.597 li
316.792 84.59 li
324.762 80.41 li
323.717 78.417 li
cp
309.769 85.732 mo
301.799 89.912 li
302.844 91.905 li
310.814 87.725 li
309.769 85.732 li
cp
295.821 93.047 mo
287.851 97.228 li
288.896 99.22 li
296.866 95.04 li
295.821 93.047 li
cp
281.873 100.363 mo
273.903 104.543 li
274.948 106.535 li
282.918 102.355 li
281.873 100.363 li
cp
267.925 107.678 mo
259.954 111.858 li
260.999 113.851 li
268.97 109.67 li
267.925 107.678 li
cp
253.977 114.993 mo
246.006 119.173 li
247.051 121.166 li
255.022 116.986 li
253.977 114.993 li
cp
240.028 122.308 mo
232.058 126.488 li
233.103 128.481 li
241.074 124.301 li
240.028 122.308 li
cp
226.08 129.623 mo
218.11 133.804 li
219.155 135.796 li
227.125 131.616 li
226.08 129.623 li
cp
212.132 136.939 mo
207.132 139.561 li
208.177 141.553 li
213.177 138.931 li
212.132 136.939 li
f
272.414 105.324 mo
244.99 119.179 li
246.005 121.188 li
273.429 107.332 li
272.414 105.324 li
.903044 .872343 .884215 .782895 cmyk
f
273.503 105.454 mo
304.844 120.814 li
303.854 122.835 li
272.512 107.475 li
273.503 105.454 li
f
239.175 99.338 mo
244.425 108.338 li
241.834 108.338 li
247.084 99.338 li
248.166 97.664 250.599 99.081 249.675 100.849 cv
243.129 112.071 li
236.584 100.849 li
235.717 99.234 237.79 97.768 239.024 99.124 cv
239.175 99.338 li
cp
244.629 102.271 mo
244.629 109.094 li
241.629 109.094 li
241.629 102.271 li
244.629 102.271 li
.858885 .643397 .00323491 0 cmyk
f
307.744 110.127 mo
302.494 101.127 li
305.085 101.127 li
299.835 110.127 li
298.752 111.802 296.32 110.382 297.244 108.615 cv
303.789 97.394 li
310.335 108.615 li
311.202 110.231 309.13 111.697 307.895 110.341 cv
307.744 110.127 li
cp
305.289 100.371 mo
305.289 107.194 li
302.289 107.194 li
302.289 100.371 li
305.289 100.371 li
f
grestore
grestore
false sop
.903044 .872343 .884215 .782895 cmyk
%ADOBeginSubsetFont: HIBBAA+SymbolMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HIBBAA+SymbolMT)
%%Title: (HIBBAA+SymbolMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HIBBAA+SymbolMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -220 1113 1005} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 84 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
74 <001C60D8A8C9B7008A5D5D3F62D0914F1A5C3F9A3FD15A27EC2AEA063096
4ED84146D971A5D9A7FC36307F3D83919E8F3815158576F81DE70653BE42C641
CDA76B6A422990CEFF41ED843EE3ABB2DEAF1909486189D685497CCD7F73C842
C6408E1B6EC0467559A94FF5D44791EDF14B65E347392068217FBE2B58FF74AB
FE99B54E9CD2CF48C0F6BE1A45F092C071F144AFBBAC950B5FA7B392C4602F07
774EB1A6B33FDA800148CA38EBF1BE8D7316C348BF522B3E577605B472A8E863> |
0 <001C60D8A8C9B7C3C9ED920C533BFCEF627DC3963E487931C80D1235BDD70
699E096A6312D> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HIBBAA+SymbolMT-Identity-H /Identity-H 0 [/HIBBAA+SymbolMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LIRVKW+SymbolMT /HIBBAA+SymbolMT-Identity-H findfont ct_VMDictPut
LIRVKW+SymbolMT [22.2719 0 7.29523 -22.656 0 0 ]msf
257.185 139.793 mo
(\000J)sh
gsave
-36.85 -34.016 mo
683.15 -34.016 li
683.15 505.984 li
-36.85 505.984 li
cp
eclp
gsave
.06 0 mo
592.441 0 li
592.441 466.239 li
.06 466.239 li
cp
clp
287.067 113.644 mo
286.386 114.113 li
278.431 119.23 264.014 119.318 255.754 114.782 cv
255.068 114.387 li
256.193 112.438 li
256.878 112.833 li
256.834 112.809 li
257.56 113.185 li
257.517 113.164 li
258.282 113.52 li
258.241 113.502 li
259.043 113.838 li
259.004 113.822 li
259.841 114.135 li
259.803 114.122 li
260.675 114.412 li
260.638 114.401 li
261.541 114.668 li
261.505 114.658 li
262.438 114.901 li
262.403 114.892 li
263.365 115.109 li
263.331 115.102 li
264.32 115.293 li
264.286 115.287 li
265.301 115.451 li
265.267 115.447 li
266.305 115.583 li
266.272 115.579 li
267.331 115.686 li
267.299 115.684 li
268.378 115.762 li
268.346 115.76 li
269.443 115.807 li
269.411 115.806 li
270.525 115.822 li
270.5 115.822 li
271.117 115.817 li
271.099 115.817 li
271.711 115.803 li
271.684 115.804 li
272.892 115.746 li
272.857 115.749 li
274.042 115.654 li
274.006 115.658 li
275.166 115.527 li
275.13 115.532 li
276.263 115.367 li
276.226 115.373 li
277.33 115.175 li
277.292 115.183 li
278.363 114.952 li
278.325 114.961 li
279.362 114.699 li
279.323 114.71 li
280.324 114.419 li
280.283 114.431 li
281.245 114.111 li
281.203 114.126 li
282.124 113.778 li
282.08 113.796 li
282.957 113.421 li
282.912 113.442 li
283.743 113.042 li
283.696 113.067 li
284.479 112.643 li
284.429 112.672 li
285.163 112.225 li
285.11 112.259 li
285.791 111.79 li
287.067 113.644 li
f
%ADOBeginSubsetFont: PBAAAA+Calibri-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+Calibri-Bold 2 GetGlyphDirectory
271 <001C60D8A8C9B78256DD05CEB67EA576F242E1E09B8FF4CD6597B4A1978
F8C3D7D9591E9451F99CD2F9E32091F272E48DE0475CF46C2E1428CF2FC44BA6
8C6DA0A7F0AAD1BE72907652BFC67A722215241381BFDF1C093AD0820621CC2A
001D2D212BC7964D67182088F33D8BF8BE98D1E65507504D6E130AA9E26FF69C
7C493D47231E51CA2F9FDCDA375AF76DEB0CCA68196B78C825A90FC3D6D2F419
9474D0C566ED67167704B8AB3BCD22DF7ED28527AEDEC2297FBA002E3EA0A9EC
18FC33181FD469DD81655945433A7CF2159E4FE23B2BEBAF86BE1F9D52B75DB4
72557195EC5BF898BDC623C3860298D26571FEBA6B01C5DE0216055DE638AF81
2AC5812A48E568FF7B1C02A4ED2AB191E834B3238CC12E86813CFE332D780225
6B66D9F1D7497F8256457B3AC9E9573A620866BE1DD16E9CF20D364033B70628
9CDD5EDD4B2509BB3DF182021EFE8E5932911769AEDECCDB234C821848DE9EE2
711B5B8BA8E> |
272 <001C60D8A8C9B719BD263F1C66E176AB1A9B9A5A3A8367D7DDD55624575
D8330769E89EDE2B210CAC0C33466D934E07EE8C5D0A40F156D15CC57AF923B2
50573D6A3F9259B0A3431793F366C2A4E1951E4FEDD7CFAEAA854A72A9831B3A
18934A1E3BA67B1825DD68D168A926FEDC2EA7260DFA821668535829AE8FBDD7
97481380CC39C4AF2C6ECADB05FF3DA8E4A111EB4A3E3B59FFB126A3A37C4B5A
113868987F4611BA41E12178776F476582469050F58D9C2434F2F75015CEE522
ED8E12899B67502531E8AB98B42F667383D35B65B55576BE7A1323FDACE70DEA
B60FF6C739F5C1FBD6BC404A862F611E798DE5F7D20626F50E2F0A84DB6262D7
AA298F592743052BB8FB5A0340AD9FF86B3B347A6731F17F7E35046670F71F40
967A7BFAB9BA0179B380201FC6F3EA37CFED86A9E1255880201A87ECC18F1771
6BB9085A306CE> |
!
end
end end
%ADOEndSubsetFont
LIRVKV+Calibri-Bold [18 0 0 -18 0 0 ]msf
198.35 25.5843 mo
(\003~\001\017\003\177)
[5.59973 9.64984 0 ]xsh
358.55 26.7903 mo
(\003~\001\020\003\177)
[5.62143 7.52948 0 ]xsh
325.67 317.224 mo
565.67 317.224 li
565.67 253.984 li
325.67 253.984 li
cp
0 0 0 0 cmyk
f
325.67 380.464 mo
565.67 380.464 li
565.67 317.224 li
325.67 317.224 li
cp
f
325.67 443.584 mo
565.67 443.584 li
565.67 380.464 li
325.67 380.464 li
cp
f
325.716 255.484 mo
565.716 255.484 li
565.716 252.484 li
325.716 252.484 li
cp
.903044 .872343 .884215 .782895 cmyk
f
325.716 318.684 mo
565.716 318.684 li
565.716 315.684 li
325.716 315.684 li
cp
f
324.216 443.634 mo
327.216 443.634 li
327.216 253.984 li
324.216 253.984 li
cp
f
404.216 443.634 mo
407.216 443.634 li
407.216 253.984 li
404.216 253.984 li
cp
f
484.216 443.634 mo
487.216 443.634 li
487.216 253.984 li
484.216 253.984 li
cp
f
564.216 443.634 mo
567.216 443.634 li
567.216 253.984 li
564.216 253.984 li
cp
f
325.716 381.934 mo
565.716 381.934 li
565.716 378.934 li
325.716 378.934 li
cp
f
325.716 445.134 mo
565.716 445.134 li
565.716 442.134 li
325.716 442.134 li
cp
f
310.55 252.424 mo
310.585 244.49 316.8 238.082 324.466 238.082 cv
332.132 238.082 338.347 244.49 338.347 252.393 cv
338.347 260.297 332.132 266.704 324.466 266.704 cv
316.8 266.704 310.585 260.297 310.55 252.424 cv
.658076 0 .502251 0 cmyk
ef
309.604 251.632 mo
309.606 251.583 li
309.66 250.856 li
312.334 231.595 338.634 233.05 339.346 252.418 cv
339.328 253.154 li
339.326 253.203 li
337.464 272.968 310.441 272.219 309.586 252.418 cv
309.586 252.369 li
309.604 251.632 li
cp
311.585 252.418 mo
311.585 252.369 li
311.603 253.105 li
311.601 253.056 li
311.654 253.783 li
311.65 253.734 li
311.738 254.45 li
311.731 254.402 li
311.853 255.107 li
311.843 255.059 li
311.998 255.751 li
311.987 255.704 li
312.174 256.383 li
312.16 256.337 li
312.378 257.002 li
312.362 256.957 li
312.61 257.607 li
312.592 257.562 li
312.87 258.196 li
312.85 258.153 li
313.156 258.77 li
313.134 258.728 li
313.468 259.327 li
313.444 259.286 li
313.805 259.867 li
313.779 259.827 li
314.166 260.388 li
314.138 260.35 li
314.55 260.89 li
314.521 260.853 li
314.957 261.372 li
314.926 261.337 li
315.385 261.834 li
315.352 261.799 li
315.834 262.273 li
315.799 262.241 li
316.303 262.69 li
316.266 262.659 li
316.791 263.084 li
316.752 263.055 li
317.297 263.454 li
317.257 263.426 li
317.82 263.798 li
317.778 263.772 li
318.36 264.117 li
318.317 264.093 li
318.915 264.409 li
318.871 264.387 li
319.486 264.673 li
319.44 264.653 li
320.07 264.909 li
320.023 264.892 li
320.668 265.117 li
320.619 265.101 li
321.278 265.294 li
321.229 265.281 li
321.9 265.441 li
321.85 265.43 li
322.533 265.556 li
322.482 265.548 li
323.177 265.639 li
323.125 265.633 li
323.83 265.689 li
323.778 265.686 li
324.492 265.705 li
324.44 265.705 li
325.154 265.686 li
325.102 265.689 li
325.807 265.633 li
325.755 265.639 li
326.45 265.548 li
326.399 265.556 li
327.082 265.43 li
327.032 265.441 li
327.704 265.281 li
327.654 265.294 li
328.313 265.101 li
328.264 265.117 li
328.909 264.892 li
328.862 264.909 li
329.492 264.653 li
329.447 264.673 li
330.061 264.387 li
330.017 264.409 li
330.615 264.093 li
330.572 264.117 li
331.154 263.772 li
331.112 263.798 li
331.675 263.426 li
331.636 263.454 li
332.18 263.055 li
332.142 263.084 li
332.666 262.659 li
332.629 262.69 li
333.133 262.241 li
333.098 262.273 li
333.58 261.799 li
333.547 261.834 li
334.007 261.337 li
333.975 261.372 li
334.411 260.853 li
334.382 260.89 li
334.794 260.35 li
334.766 260.388 li
335.153 259.827 li
335.127 259.867 li
335.488 259.286 li
335.464 259.327 li
335.798 258.728 li
335.776 258.77 li
336.082 258.153 li
336.062 258.196 li
336.34 257.562 li
336.322 257.607 li
336.57 256.957 li
336.554 257.002 li
336.772 256.337 li
336.759 256.383 li
336.946 255.704 li
336.934 255.751 li
337.089 255.059 li
337.079 255.107 li
337.201 254.402 li
337.194 254.45 li
337.283 253.734 li
337.278 253.783 li
337.331 253.056 li
337.329 253.105 li
337.347 252.369 li
337.347 252.418 li
337.329 251.681 li
337.331 251.73 li
337.278 251.004 li
337.283 251.052 li
337.194 250.336 li
337.201 250.385 li
337.079 249.68 li
337.089 249.728 li
336.934 249.035 li
336.946 249.082 li
336.759 248.403 li
336.772 248.449 li
336.554 247.784 li
336.57 247.83 li
336.322 247.18 li
336.34 247.224 li
336.062 246.59 li
336.082 246.634 li
335.776 246.017 li
335.798 246.059 li
335.464 245.46 li
335.488 245.501 li
335.127 244.92 li
335.153 244.96 li
334.766 244.399 li
334.794 244.437 li
334.382 243.896 li
334.411 243.933 li
333.975 243.414 li
334.007 243.45 li
333.547 242.953 li
333.58 242.987 li
333.098 242.513 li
333.133 242.546 li
332.629 242.096 li
332.666 242.127 li
332.142 241.702 li
332.18 241.732 li
331.636 241.333 li
331.675 241.361 li
331.112 240.988 li
331.154 241.014 li
330.572 240.67 li
330.615 240.694 li
330.017 240.378 li
330.061 240.4 li
329.447 240.113 li
329.492 240.133 li
328.862 239.877 li
328.909 239.895 li
328.264 239.67 li
328.313 239.685 li
327.654 239.493 li
327.704 239.506 li
327.032 239.346 li
327.082 239.356 li
326.399 239.231 li
326.45 239.239 li
325.755 239.148 li
325.807 239.153 li
325.102 239.098 li
325.154 239.101 li
324.44 239.082 li
324.492 239.082 li
323.778 239.101 li
323.83 239.098 li
323.125 239.153 li
323.177 239.148 li
322.482 239.239 li
322.533 239.231 li
321.85 239.356 li
321.9 239.346 li
321.229 239.506 li
321.278 239.493 li
320.619 239.685 li
320.668 239.67 li
320.023 239.895 li
320.07 239.877 li
319.44 240.133 li
319.486 240.113 li
318.871 240.4 li
318.915 240.378 li
318.317 240.694 li
318.36 240.67 li
317.778 241.014 li
317.82 240.988 li
317.257 241.361 li
317.297 241.333 li
316.752 241.732 li
316.791 241.702 li
316.266 242.127 li
316.303 242.096 li
315.799 242.546 li
315.834 242.513 li
315.352 242.987 li
315.385 242.953 li
314.926 243.45 li
314.957 243.414 li
314.521 243.933 li
314.55 243.896 li
314.138 244.437 li
314.166 244.399 li
313.779 244.96 li
313.805 244.92 li
313.444 245.501 li
313.468 245.46 li
313.134 246.059 li
313.156 246.017 li
312.85 246.634 li
312.87 246.59 li
312.592 247.224 li
312.61 247.18 li
312.362 247.83 li
312.378 247.784 li
312.16 248.449 li
312.174 248.403 li
311.987 249.082 li
311.998 249.035 li
311.843 249.728 li
311.853 249.68 li
311.731 250.385 li
311.738 250.336 li
311.65 251.052 li
311.654 251.004 li
311.601 251.73 li
311.603 251.681 li
311.585 252.418 li
0 0 0 0 cmyk
f
310.55 316.144 mo
310.585 308.23 316.8 301.823 324.466 301.823 cv
332.132 301.823 338.347 308.23 338.347 316.134 cv
338.347 324.038 332.132 330.445 324.466 330.445 cv
316.8 330.445 310.585 324.038 310.55 316.144 cv
.658076 0 .502251 0 cmyk
ef
309.604 315.373 mo
309.606 315.324 li
309.66 314.597 li
312.333 295.336 338.633 296.79 339.346 316.158 cv
339.328 316.895 li
339.326 316.944 li
337.463 336.709 310.441 335.959 309.586 316.158 cv
309.586 316.109 li
309.604 315.373 li
cp
311.585 316.158 mo
311.585 316.109 li
311.603 316.846 li
311.601 316.797 li
311.654 317.523 li
311.65 317.475 li
311.738 318.191 li
311.731 318.143 li
311.853 318.847 li
311.843 318.799 li
311.998 319.492 li
311.987 319.445 li
312.174 320.124 li
312.16 320.078 li
312.378 320.743 li
312.362 320.697 li
312.61 321.347 li
312.592 321.303 li
312.87 321.937 li
312.85 321.893 li
313.156 322.51 li
313.134 322.468 li
313.468 323.067 li
313.444 323.027 li
313.805 323.607 li
313.779 323.567 li
314.166 324.129 li
314.138 324.09 li
314.55 324.631 li
314.521 324.594 li
314.957 325.113 li
314.926 325.077 li
315.385 325.574 li
315.352 325.54 li
315.834 326.014 li
315.799 325.981 li
316.303 326.431 li
316.266 326.4 li
316.791 326.825 li
316.752 326.795 li
317.297 327.194 li
317.257 327.166 li
317.82 327.539 li
317.778 327.513 li
318.36 327.857 li
318.317 327.833 li
318.915 328.149 li
318.871 328.127 li
319.486 328.414 li
319.44 328.394 li
320.07 328.65 li
320.023 328.632 li
320.668 328.857 li
320.619 328.842 li
321.278 329.035 li
321.229 329.021 li
321.9 329.181 li
321.85 329.171 li
322.533 329.296 li
322.482 329.288 li
323.177 329.379 li
323.125 329.374 li
323.83 329.429 li
323.778 329.427 li
324.492 329.445 li
324.44 329.445 li
325.154 329.427 li
325.102 329.429 li
325.807 329.374 li
325.755 329.379 li
326.45 329.288 li
326.399 329.296 li
327.082 329.171 li
327.032 329.181 li
327.704 329.021 li
327.654 329.035 li
328.313 328.842 li
328.264 328.857 li
328.909 328.632 li
328.862 328.65 li
329.492 328.394 li
329.447 328.414 li
330.061 328.127 li
330.017 328.149 li
330.615 327.833 li
330.572 327.857 li
331.154 327.513 li
331.112 327.539 li
331.675 327.166 li
331.636 327.194 li
332.18 326.795 li
332.142 326.825 li
332.666 326.4 li
332.629 326.431 li
333.133 325.981 li
333.098 326.014 li
333.58 325.54 li
333.547 325.574 li
334.007 325.077 li
333.975 325.113 li
334.411 324.594 li
334.382 324.631 li
334.794 324.09 li
334.766 324.129 li
335.153 323.567 li
335.127 323.607 li
335.488 323.027 li
335.464 323.067 li
335.798 322.468 li
335.776 322.51 li
336.082 321.893 li
336.062 321.937 li
336.34 321.303 li
336.322 321.347 li
336.57 320.697 li
336.554 320.743 li
336.772 320.078 li
336.759 320.124 li
336.946 319.445 li
336.934 319.492 li
337.089 318.799 li
337.079 318.847 li
337.201 318.143 li
337.194 318.191 li
337.283 317.475 li
337.278 317.523 li
337.331 316.797 li
337.329 316.846 li
337.347 316.109 li
337.347 316.158 li
337.329 315.422 li
337.331 315.471 li
337.278 314.744 li
337.283 314.793 li
337.194 314.077 li
337.201 314.125 li
337.079 313.42 li
337.089 313.468 li
336.934 312.776 li
336.946 312.823 li
336.759 312.144 li
336.772 312.19 li
336.554 311.525 li
336.57 311.57 li
336.322 310.921 li
336.34 310.965 li
336.062 310.331 li
336.082 310.374 li
335.776 309.757 li
335.798 309.799 li
335.464 309.2 li
335.488 309.241 li
335.127 308.66 li
335.153 308.7 li
334.766 308.139 li
334.794 308.178 li
334.382 307.637 li
334.411 307.674 li
333.975 307.155 li
334.007 307.19 li
333.547 306.693 li
333.58 306.728 li
333.098 306.254 li
333.133 306.286 li
332.629 305.837 li
332.666 305.868 li
332.142 305.443 li
332.18 305.472 li
331.636 305.073 li
331.675 305.101 li
331.112 304.729 li
331.154 304.755 li
330.572 304.41 li
330.615 304.434 li
330.017 304.118 li
330.061 304.14 li
329.447 303.854 li
329.492 303.874 li
328.862 303.618 li
328.909 303.635 li
328.264 303.41 li
328.313 303.426 li
327.654 303.233 li
327.704 303.246 li
327.032 303.086 li
327.082 303.097 li
326.399 302.971 li
326.45 302.979 li
325.755 302.888 li
325.807 302.894 li
325.102 302.838 li
325.154 302.841 li
324.44 302.822 li
324.492 302.822 li
323.778 302.841 li
323.83 302.838 li
323.125 302.894 li
323.177 302.888 li
322.482 302.979 li
322.533 302.971 li
321.85 303.097 li
321.9 303.086 li
321.229 303.246 li
321.278 303.233 li
320.619 303.426 li
320.668 303.41 li
320.023 303.635 li
320.07 303.618 li
319.44 303.874 li
319.486 303.854 li
318.871 304.14 li
318.915 304.118 li
318.317 304.434 li
318.36 304.41 li
317.778 304.755 li
317.82 304.729 li
317.257 305.101 li
317.297 305.073 li
316.752 305.472 li
316.791 305.443 li
316.266 305.868 li
316.303 305.837 li
315.799 306.286 li
315.834 306.254 li
315.352 306.728 li
315.385 306.693 li
314.926 307.19 li
314.957 307.155 li
314.521 307.674 li
314.55 307.637 li
314.138 308.178 li
314.166 308.139 li
313.779 308.7 li
313.805 308.66 li
313.444 309.241 li
313.468 309.2 li
313.134 309.799 li
313.156 309.757 li
312.85 310.374 li
312.87 310.331 li
312.592 310.965 li
312.61 310.921 li
312.362 311.57 li
312.378 311.525 li
312.16 312.19 li
312.174 312.144 li
311.987 312.823 li
311.998 312.776 li
311.843 313.468 li
311.853 313.42 li
311.731 314.125 li
311.738 314.077 li
311.65 314.793 li
311.654 314.744 li
311.601 315.471 li
311.603 315.422 li
311.585 316.158 li
0 0 0 0 cmyk
f
310.55 379.984 mo
310.585 372.055 316.8 365.648 324.466 365.648 cv
332.132 365.648 338.347 372.055 338.347 379.959 cv
338.347 387.862 332.132 394.27 324.466 394.27 cv
316.8 394.27 310.585 387.862 310.55 379.984 cv
.658076 0 .502251 0 cmyk
ef
309.604 379.198 mo
309.606 379.149 li
309.66 378.422 li
312.333 359.161 338.633 360.615 339.346 379.983 cv
339.328 380.72 li
339.326 380.769 li
337.463 400.534 310.441 399.784 309.586 379.983 cv
309.586 379.934 li
309.604 379.198 li
cp
311.585 379.983 mo
311.585 379.934 li
311.603 380.671 li
311.601 380.622 li
311.654 381.348 li
311.65 381.3 li
311.738 382.016 li
311.731 381.967 li
311.853 382.672 li
311.843 382.624 li
311.998 383.317 li
311.987 383.27 li
312.174 383.949 li
312.16 383.902 li
312.378 384.567 li
312.362 384.522 li
312.61 385.172 li
312.592 385.128 li
312.87 385.761 li
312.85 385.718 li
313.156 386.335 li
313.134 386.293 li
313.468 386.892 li
313.444 386.851 li
313.805 387.432 li
313.779 387.392 li
314.166 387.953 li
314.138 387.915 li
314.55 388.456 li
314.521 388.418 li
314.957 388.938 li
314.926 388.902 li
315.385 389.399 li
315.352 389.365 li
315.834 389.839 li
315.799 389.806 li
316.303 390.256 li
316.266 390.225 li
316.791 390.65 li
316.752 390.62 li
317.297 391.019 li
317.257 390.991 li
317.82 391.364 li
317.778 391.338 li
318.36 391.682 li
318.317 391.658 li
318.915 391.974 li
318.871 391.952 li
319.486 392.239 li
319.44 392.219 li
320.07 392.475 li
320.023 392.457 li
320.668 392.682 li
320.619 392.666 li
321.278 392.859 li
321.229 392.846 li
321.9 393.006 li
321.85 392.995 li
322.533 393.121 li
322.482 393.113 li
323.177 393.204 li
323.125 393.199 li
323.83 393.254 li
323.778 393.251 li
324.492 393.27 li
324.44 393.27 li
325.154 393.251 li
325.102 393.254 li
325.807 393.199 li
325.755 393.204 li
326.45 393.113 li
326.399 393.121 li
327.082 392.995 li
327.032 393.006 li
327.704 392.846 li
327.654 392.859 li
328.313 392.666 li
328.264 392.682 li
328.909 392.457 li
328.862 392.475 li
329.492 392.219 li
329.447 392.239 li
330.061 391.952 li
330.017 391.974 li
330.615 391.658 li
330.572 391.682 li
331.154 391.338 li
331.112 391.364 li
331.675 390.991 li
331.636 391.019 li
332.18 390.62 li
332.142 390.65 li
332.666 390.225 li
332.629 390.256 li
333.133 389.806 li
333.098 389.839 li
333.58 389.365 li
333.547 389.399 li
334.007 388.902 li
333.975 388.938 li
334.411 388.418 li
334.382 388.456 li
334.794 387.915 li
334.766 387.953 li
335.153 387.392 li
335.127 387.432 li
335.488 386.851 li
335.464 386.892 li
335.798 386.293 li
335.776 386.335 li
336.082 385.718 li
336.062 385.761 li
336.34 385.128 li
336.322 385.172 li
336.57 384.522 li
336.554 384.567 li
336.772 383.902 li
336.759 383.949 li
336.946 383.27 li
336.934 383.317 li
337.089 382.624 li
337.079 382.672 li
337.201 381.967 li
337.194 382.016 li
337.283 381.3 li
337.278 381.348 li
337.331 380.622 li
337.329 380.671 li
337.347 379.934 li
337.347 379.983 li
337.329 379.247 li
337.331 379.296 li
337.278 378.569 li
337.283 378.618 li
337.194 377.902 li
337.201 377.95 li
337.079 377.245 li
337.089 377.293 li
336.934 376.601 li
336.946 376.648 li
336.759 375.968 li
336.772 376.015 li
336.554 375.35 li
336.57 375.395 li
336.322 374.745 li
336.34 374.79 li
336.062 374.156 li
336.082 374.199 li
335.776 373.582 li
335.798 373.624 li
335.464 373.025 li
335.488 373.066 li
335.127 372.485 li
335.153 372.525 li
334.766 371.964 li
334.794 372.002 li
334.382 371.462 li
334.411 371.499 li
333.975 370.98 li
334.007 371.015 li
333.547 370.518 li
333.58 370.552 li
333.098 370.079 li
333.133 370.111 li
332.629 369.661 li
332.666 369.693 li
332.142 369.268 li
332.18 369.297 li
331.636 368.898 li
331.675 368.926 li
331.112 368.554 li
331.154 368.58 li
330.572 368.235 li
330.615 368.259 li
330.017 367.943 li
330.061 367.965 li
329.447 367.679 li
329.492 367.699 li
328.862 367.442 li
328.909 367.46 li
328.264 367.235 li
328.313 367.251 li
327.654 367.058 li
327.704 367.071 li
327.032 366.911 li
327.082 366.922 li
326.399 366.796 li
326.45 366.804 li
325.755 366.713 li
325.807 366.718 li
325.102 366.663 li
325.154 366.666 li
324.44 366.647 li
324.492 366.647 li
323.778 366.666 li
323.83 366.663 li
323.125 366.718 li
323.177 366.713 li
322.482 366.804 li
322.533 366.796 li
321.85 366.922 li
321.9 366.911 li
321.229 367.071 li
321.278 367.058 li
320.619 367.251 li
320.668 367.235 li
320.023 367.46 li
320.07 367.442 li
319.44 367.699 li
319.486 367.679 li
318.871 367.965 li
318.915 367.943 li
318.317 368.259 li
318.36 368.235 li
317.778 368.58 li
317.82 368.554 li
317.257 368.926 li
317.297 368.898 li
316.752 369.297 li
316.791 369.268 li
316.266 369.693 li
316.303 369.661 li
315.799 370.111 li
315.834 370.079 li
315.352 370.552 li
315.385 370.518 li
314.926 371.015 li
314.957 370.98 li
314.521 371.499 li
314.55 371.462 li
314.138 372.002 li
314.166 371.964 li
313.779 372.525 li
313.805 372.485 li
313.444 373.066 li
313.468 373.025 li
313.134 373.624 li
313.156 373.582 li
312.85 374.199 li
312.87 374.156 li
312.592 374.79 li
312.61 374.745 li
312.362 375.395 li
312.378 375.35 li
312.16 376.015 li
312.174 375.968 li
311.987 376.648 li
311.998 376.601 li
311.843 377.293 li
311.853 377.245 li
311.731 377.95 li
311.738 377.902 li
311.65 378.618 li
311.654 378.569 li
311.601 379.296 li
311.603 379.247 li
311.585 379.983 li
0 0 0 0 cmyk
f
311.63 443.704 mo
311.629 435.769 317.844 429.362 325.51 429.362 cv
333.176 429.362 339.39 435.769 339.39 443.673 cv
339.39 451.577 333.176 457.984 325.51 457.984 cv
317.844 457.984 311.629 451.577 311.63 443.704 cv
.658076 0 .502251 0 cmyk
ef
310.647 442.912 mo
310.65 442.863 li
310.703 442.136 li
313.378 422.875 339.676 424.329 340.39 443.698 cv
340.372 444.434 li
340.369 444.483 li
338.508 464.248 311.486 463.499 310.629 443.698 cv
310.629 443.648 li
310.647 442.912 li
cp
312.629 443.698 mo
312.629 443.648 li
312.647 444.385 li
312.644 444.336 li
312.698 445.063 li
312.693 445.014 li
312.781 445.73 li
312.774 445.682 li
312.896 446.386 li
312.887 446.339 li
313.042 447.031 li
313.03 446.984 li
313.217 447.663 li
313.203 447.617 li
313.421 448.282 li
313.405 448.236 li
313.654 448.886 li
313.636 448.842 li
313.914 449.476 li
313.893 449.433 li
314.2 450.05 li
314.178 450.007 li
314.512 450.607 li
314.488 450.566 li
314.849 451.146 li
314.823 451.107 li
315.21 451.668 li
315.182 451.629 li
315.594 452.17 li
315.564 452.133 li
316.001 452.652 li
315.969 452.616 li
316.429 453.113 li
316.396 453.079 li
316.878 453.553 li
316.843 453.52 li
317.346 453.97 li
317.31 453.939 li
317.834 454.364 li
317.796 454.334 li
318.34 454.733 li
318.3 454.706 li
318.863 455.078 li
318.822 455.052 li
319.403 455.397 li
319.36 455.372 li
319.959 455.688 li
319.914 455.666 li
320.529 455.953 li
320.483 455.933 li
321.114 456.189 li
321.066 456.171 li
321.711 456.396 li
321.663 456.381 li
322.322 456.574 li
322.272 456.561 li
322.944 456.72 li
322.893 456.71 li
323.577 456.836 li
323.526 456.828 li
324.22 456.919 li
324.169 456.913 li
324.873 456.968 li
324.821 456.966 li
325.536 456.984 li
325.483 456.984 li
326.198 456.966 li
326.146 456.968 li
326.851 456.913 li
326.799 456.919 li
327.494 456.828 li
327.442 456.836 li
328.126 456.71 li
328.076 456.72 li
328.747 456.561 li
328.698 456.574 li
329.356 456.381 li
329.308 456.396 li
329.953 456.171 li
329.906 456.189 li
330.536 455.933 li
330.49 455.953 li
331.105 455.666 li
331.06 455.688 li
331.659 455.372 li
331.616 455.397 li
332.197 455.052 li
332.156 455.078 li
332.719 454.706 li
332.679 454.733 li
333.223 454.334 li
333.185 454.364 li
333.709 453.939 li
333.673 453.97 li
334.176 453.52 li
334.142 453.553 li
334.624 453.079 li
334.59 453.113 li
335.05 452.616 li
335.019 452.652 li
335.455 452.133 li
335.425 452.17 li
335.837 451.629 li
335.809 451.668 li
336.196 451.107 li
336.17 451.146 li
336.531 450.566 li
336.507 450.607 li
336.841 450.007 li
336.819 450.05 li
337.126 449.433 li
337.106 449.476 li
337.384 448.842 li
337.365 448.886 li
337.614 448.236 li
337.598 448.282 li
337.816 447.617 li
337.802 447.663 li
337.989 446.984 li
337.977 447.031 li
338.132 446.339 li
338.123 446.386 li
338.245 445.682 li
338.238 445.73 li
338.326 445.014 li
338.321 445.063 li
338.375 444.336 li
338.372 444.385 li
338.39 443.648 li
338.39 443.698 li
338.372 442.961 li
338.375 443.01 li
338.321 442.283 li
338.326 442.332 li
338.238 441.616 li
338.245 441.664 li
338.123 440.96 li
338.132 441.007 li
337.977 440.315 li
337.989 440.362 li
337.802 439.683 li
337.816 439.729 li
337.598 439.064 li
337.614 439.11 li
337.365 438.46 li
337.384 438.504 li
337.106 437.87 li
337.126 437.914 li
336.819 437.296 li
336.841 437.339 li
336.507 436.739 li
336.531 436.78 li
336.17 436.2 li
336.196 436.239 li
335.809 435.678 li
335.837 435.717 li
335.425 435.176 li
335.455 435.213 li
335.019 434.694 li
335.05 434.73 li
334.59 434.233 li
334.624 434.267 li
334.142 433.793 li
334.176 433.826 li
333.673 433.376 li
333.709 433.407 li
333.185 432.982 li
333.223 433.012 li
332.679 432.613 li
332.719 432.64 li
332.156 432.268 li
332.197 432.294 li
331.616 431.949 li
331.659 431.974 li
331.06 431.658 li
331.105 431.68 li
330.49 431.393 li
330.536 431.413 li
329.906 431.157 li
329.953 431.175 li
329.308 430.95 li
329.356 430.965 li
328.698 430.772 li
328.747 430.785 li
328.076 430.626 li
328.126 430.636 li
327.442 430.51 li
327.494 430.518 li
326.799 430.427 li
326.851 430.433 li
326.146 430.378 li
326.198 430.38 li
325.483 430.362 li
325.536 430.362 li
324.821 430.38 li
324.873 430.378 li
324.169 430.433 li
324.22 430.427 li
323.526 430.518 li
323.577 430.51 li
322.893 430.636 li
322.944 430.626 li
322.272 430.785 li
322.322 430.772 li
321.663 430.965 li
321.711 430.95 li
321.066 431.175 li
321.114 431.157 li
320.483 431.413 li
320.529 431.393 li
319.914 431.68 li
319.959 431.658 li
319.36 431.974 li
319.403 431.949 li
318.822 432.294 li
318.863 432.268 li
318.3 432.64 li
318.34 432.613 li
317.796 433.012 li
317.834 432.982 li
317.31 433.407 li
317.346 433.376 li
316.843 433.826 li
316.878 433.793 li
316.396 434.267 li
316.429 434.233 li
315.969 434.73 li
316.001 434.694 li
315.564 435.213 li
315.594 435.176 li
315.182 435.717 li
315.21 435.678 li
314.823 436.239 li
314.849 436.2 li
314.488 436.78 li
314.512 436.739 li
314.178 437.339 li
314.2 437.296 li
313.893 437.914 li
313.914 437.87 li
313.636 438.504 li
313.654 438.46 li
313.405 439.11 li
313.421 439.064 li
313.203 439.729 li
313.217 439.683 li
313.03 440.362 li
313.042 440.315 li
312.887 441.007 li
312.896 440.96 li
312.774 441.664 li
312.781 441.616 li
312.693 442.332 li
312.698 442.283 li
312.644 443.01 li
312.647 442.961 li
312.629 443.698 li
0 0 0 0 cmyk
f
.903044 .872343 .884215 .782895 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+Calibri-Bold 1 GetGlyphDirectory
282 <001C60D8A8C9B78256DD14A89B5C5761E51CC6D0784EB7F41BE6BDEA5F8
255D1FE24990FE1D15D28EF8F0C7762E519633FBA92FD296338DBAB81155F27C
91D1316EB09C02392CC558827E85C7882426438ED0C996E6AF5FBAE3E4865B83
761EF22FDB1EFE24248D3B29570D3BD8C05EE4D4D69B81EDAFB096EDC81F1562
76853B908EFB15EC41828B5226E127DAF4B807D256A2E4F1FA53CE3C1E83FC9F
599D0D693317C924E42F44A22D2B6AE0DB64F8C1AF35225ECB5B9AEAA2C23E51
5F95B653AF3AAC6CA0651281FD546D48B6A07C75CDB334548DE80447540B2538
26671E04C7BA03594D53214958E122B2F845054AC5F5E297C0C37736732726AA
3C727298E5B49D9D588DF2AD7FFFA7F426D61B6C814687C386CB5C77EDDB4A48
CD16C454E1C3DCC2832833F01D8523A139255C5F9D553BFD44D8DB07E9C0CCAE
08F8D58> |
!
end
end end
%ADOEndSubsetFont
LIRVKV+Calibri-Bold [18 0 0 -18 0 0 ]msf
6.3496 267.079 mo
(\003~\001\032\003\177)
[5.59973 9.64984 0 ]xsh
grestore
grestore
gsave
262.664 181.017 mo
292.664 181.017 li
292.664 211.017 li
262.664 211.017 li
cp
eclp
.77 lw
1 lc
1 lj
2 ml
[] 0 dsh
true sadj
266.217 185.235 mo
266.217 206.798 li
@
279.243 185.235 mo
283.388 196.017 li
279.243 206.798 li
@
%ADOBeginSubsetFont: QJJAAA+TimesNewRomanPS-BoldMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (QJJAAA+TimesNewRomanPS-BoldMT)
%%Title: (QJJAAA+TimesNewRomanPS-BoldMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /QJJAAA+TimesNewRomanPS-BoldMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-558 -328 2000 1056} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 73 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
72 <001C60D8A8C9B77FE2C1A0FFE616EB00E9CC30AEE6296E704D5E8E6E2A25
CD5B841666118E2FAE181ECDCA295C531BAEC8AA2C391851649F7A3F6C1D06B8
F53311D73A0F775B337F21892F2D55D51BAAE57B9A38BC3FBC0F8B7058E4F9E7
04709FA2F144D9397D8E7CC8EE685293C980753BDE3858AD8D5DB11A1F649D59
7DE968E74B3A3B8C5A39BDCB85B6D8AE6FFD00E4F0A287> |
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /QJJAAA+TimesNewRomanPS-BoldMT-Identity-H /Identity-H 0 [/QJJAAA+TimesNewRomanPS-BoldMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LIRVKX+TimesNewRomanPS-BoldMT /QJJAAA+TimesNewRomanPS-BoldMT-Identity-H findfont ct_VMDictPut
LIRVKX+TimesNewRomanPS-BoldMT [18.048 0 0 -18.048 0 0 ]msf
269.671 200.564 mo
(\000H)sh
grestore
gsave
261.95 6.659 mo
295.05 6.659 li
295.05 36.659 li
261.95 36.659 li
cp
eclp
.769 lw
1 lc
1 lj
2 ml
[] 0 dsh
true sadj
265.496 10.878 mo
265.496 32.44 li
@
280.864 10.878 mo
285.002 21.659 li
280.864 32.44 li
@
%ADOBeginSubsetFont: QJJAAA+TimesNewRomanPS-BoldMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/QJJAAA+TimesNewRomanPS-BoldMT 1 GetGlyphDirectory
69 <001C60D8A8C9B7EF327C9F5E59F64001D54A424F699C06AB0FB80E6C48F1
5E3095860AE363553C423849145AC4E77C2743AE352FD6B9238596705EEACD1E
0654BA314247FE835D30F1B8C2EB2117560FEE624A983B434C7BF56347656653
61F7F85B2F8DF4CFDCCC005E7662C3DFCD506372D7C7246D214A31807263849D
F5C65A585B1DF219CBB65709552D46C6ED4A0285D36F48B423AB23BD6ACFC0C7
B629947C8A11D28F48BA7CE2730B98BFC4623C0DBD47E595FA> |
!
end
end end
%ADOEndSubsetFont
LIRVKX+TimesNewRomanPS-BoldMT [18.048 0 0 -18.048 0 0 ]msf
268.944 26.2063 mo
(\000E)sh
grestore
35.15 190.65 mo
132.611 190.65 li
132.611 188.4 li
35.15 188.4 li
cp
f
35.15 99.225 mo
132.611 99.225 li
132.611 96.975 li
35.15 96.975 li
cp
f
35.15 26.086 mo
132.611 26.086 li
132.611 23.836 li
35.15 23.836 li
cp
f
.961 lw
1 lc
1 lj
2 ml
[] 0 dsh
true sadj
141.681 14.907 mo
141.681 41.213 li
@
155.653 14.907 mo
160.939 28.06 li
155.653 41.213 li
@
%ADOBeginSubsetFont: GFNBAA+TimesNewRomanPSMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (GFNBAA+TimesNewRomanPSMT)
%%Title: (GFNBAA+TimesNewRomanPSMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /GFNBAA+TimesNewRomanPSMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-568 -307 2046 1040} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4635 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
73 <001C60D8A8C9B81F2C3A6EB915F5DDF05E4CD39F13547A7EF54F9D79FF32
092BEC553783B472AF53E99B3070692992C4C512F2D79447B5EC673AA5FA8274
BFE5BA294793E06A2CD85C961166E35F08CE852DFFE5F2678D2E0B1687083D40
FC628A3BE0EDFC936C866DE25768CCC0F39E7FAD6F5686BB7C64B79625F56C55
73F9A5214AA079CAA28A8468CCF29829FD2A747DD586D41C21A37BF93A8AC8FD
D941D5FFB6450DF53658C2420EB0E5E88807E727AED5F7> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /GFNBAA+TimesNewRomanPSMT-Identity-H /Identity-H 0 [/GFNBAA+TimesNewRomanPSMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LIRVKY+TimesNewRomanPSMT /GFNBAA+TimesNewRomanPSMT-Identity-H findfont ct_VMDictPut
LIRVKY+TimesNewRomanPSMT [21.888 0 0 -21.888 0 0 ]msf
144.199 33.872 mo
(\000I)sh
92.225 44.06 mo
84.35 30.56 li
88.237 30.56 li
80.362 44.06 li
78.735 46.571 75.09 44.443 76.475 41.792 cv
86.293 24.961 li
96.112 41.792 li
97.426 44.257 94.226 46.445 92.406 44.325 cv
92.225 44.06 li
cp
80.362 79.001 mo
88.237 92.501 li
84.35 92.501 li
92.225 79.001 li
93.854 76.491 97.496 78.616 96.112 81.269 cv
86.293 98.1 li
76.475 81.269 li
75.16 78.804 78.362 76.616 80.181 78.736 cv
80.362 79.001 li
cp
88.543 29.426 mo
88.543 93.635 li
84.043 93.635 li
84.043 29.426 li
88.543 29.426 li
.266636 .77499 .56582 0 cmyk
f
gsave
92.728 127.129 mo
130.028 127.129 li
130.028 159.029 li
92.728 159.029 li
cp
eclp
.903044 .872343 .884215 .782895 cmyk
%ADOBeginSubsetFont: HJCBAA+TimesNewRomanPSMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HJCBAA+TimesNewRomanPSMT)
%%Title: (HJCBAA+TimesNewRomanPSMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HJCBAA+TimesNewRomanPSMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-568 -307 2046 1040} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 98 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 3 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
72 <001C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2B
EAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A
15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7F
FA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA5013189
84A59E1CFFFD06EA629758085868D3F5F7204292> |
19 <001C60D8A8C9B7A73DAAFDCA97EBBC8D8E35A41D9404C5638B059E1CA50B
5366543C3D584AD9E19987218AC5999BB0F2477597AB6F8DD868788C8440CBF4
A338EF64ACD9BF2268656755741DB71FD86387D4A7AA1CFD19937BFD209E4FBC
D1952717C8CF8C0555CB2D0238DC43B2A6A2DE4D7366DB210D2673870D0B0C58
344E6AEF91B916BAAEAEF37B22F065E870AFE6638E56D0B4AE01785D59EE2340
2242D396440157FC51> |
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HJCBAA+TimesNewRomanPSMT-Identity-H /Identity-H 0 [/HJCBAA+TimesNewRomanPSMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LIRVKZ+TimesNewRomanPSMT /HJCBAA+TimesNewRomanPSMT-Identity-H findfont ct_VMDictPut
LIRVKZ+TimesNewRomanPSMT [12.544 0 0 -12.32 0 0 ]msf
119.759 153.767 mo
(\000H\000\023)
[-6.88163 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+SymbolMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HIBBAA+SymbolMT 1 GetGlyphDirectory
58 <001C60D8A8C9B6F576EA70CDB8EEE2CB58DFA4035EC7CA2C41F31962CE06
AFD08C80B3CABE1F5CC03DBBA1CE00FE4F85E9562684A79B078A02E333BF2B34
4A58384B7F13CA2B27E5FF7C61FBA472F06543AD776218421BF27D0A9B4560F3
81CA2FD345A3955AA5D2F881BDA6EC6D81C29B2B127D6CDF7CAF3CDE4BFCDFC3
DA72FF3AD806BD5645B5A71AC60832CD79EAE945F3448F885464C86BF9BB9648
1600E1847E02C589BE1B560DBE2327F3164DB3834544F5B26CB99EA6D1267AE8
1F73C0FF3B> |
!
end
end end
%ADOEndSubsetFont
LIRVKW+SymbolMT [21.504 0 0 -21.12 0 0 ]msf
95.6136 148.451 mo
(\000:)sh
grestore
gsave
94.665 43.499 mo
129.215 43.499 li
129.215 74.599 li
94.665 74.599 li
cp
eclp
.903044 .872343 .884215 .782895 cmyk
%ADOBeginSubsetFont: HJCBAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+TimesNewRomanPSMT 1 GetGlyphDirectory
20 <001C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |
!
end
end end
%ADOEndSubsetFont
LIRVKZ+TimesNewRomanPSMT [12.096 0 0 -12.096 0 0 ]msf
120.18 69.4703 mo
(\000H\000\024)
[-6.07938 0 ]xsh
LIRVKW+SymbolMT [20.736 0 0 -20.736 0 0 ]msf
97.6196 64.2873 mo
(\000:)sh
grestore
92.225 117.2 mo
84.35 103.7 li
88.237 103.7 li
80.362 117.2 li
78.735 119.71 75.09 117.583 76.475 114.932 cv
86.293 98.1 li
96.112 114.932 li
97.426 117.397 94.227 119.585 92.406 117.465 cv
92.225 117.2 li
cp
80.362 170.426 mo
88.237 183.926 li
84.35 183.926 li
92.225 170.426 li
93.852 167.916 97.496 170.04 96.112 172.693 cv
86.293 189.525 li
76.475 172.693 li
75.16 170.228 78.363 168.041 80.181 170.161 cv
80.362 170.426 li
cp
88.543 102.566 mo
88.543 185.06 li
84.043 185.06 li
84.043 102.566 li
88.543 102.566 li
0 .91873 .782315 0 cmyk
f
gsave
137.286 79.865 mo
175.586 79.865 li
175.586 116.465 li
137.286 116.465 li
cp
eclp
141.822 85.012 mo
141.822 111.319 li
.903044 .872343 .884215 .782895 cmyk
@
158.83 85.012 mo
164.122 98.165 li
158.83 111.319 li
@
LIRVKZ+TimesNewRomanPSMT [21.888 0 0 -21.888 0 0 ]msf
146.609 103.713 mo
(\000H)sh
grestore
.96 lw
141.673 176.337 mo
141.673 202.643 li
.903044 .872343 .884215 .782895 cmyk
@
159.763 176.337 mo
165.039 189.49 li
159.763 202.643 li
@
%ADOBeginSubsetFont: GFNBAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/GFNBAA+TimesNewRomanPSMT 1 GetGlyphDirectory
74 <001C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F6
0847F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7
FF4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93
AEA8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02E
A707BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7
A8585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25
BF9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4E
A45E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFF
D70E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC8
191E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D300
2781921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015
D0BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD
46F1C707> |
!
end
end end
%ADOEndSubsetFont
LIRVKY+TimesNewRomanPSMT [21.888 0 0 -21.888 0 0 ]msf
146.446 195.302 mo
(\000J)sh
47.15 439.874 mo
164.849 439.874 li
164.849 437.624 li
47.15 437.624 li
cp
f
47.15 347.631 mo
164.849 347.631 li
164.849 345.381 li
47.15 345.381 li
cp
f
47.15 266.38 mo
164.849 266.38 li
164.849 264.13 li
47.15 264.13 li
cp
f
1.027 lw
178.295 254.697 mo
178.295 282.369 li
@
222.109 254.697 mo
227.841 268.533 li
222.109 282.369 li
@
LIRVKY+TimesNewRomanPSMT [23.04 0 0 -23.04 0 0 ]msf
183.481 274.647 mo
(\000J)sh
LIRVKZ+TimesNewRomanPSMT [23.04 0 0 -23.04 0 0 ]msf
194.946 274.647 mo
(\000\023)sh
LIRVKY+TimesNewRomanPSMT [23.04 0 0 -23.04 0 0 ]msf
206.411 274.647 mo
(\000I)sh
107.634 284.354 mo
99.759 270.854 li
103.646 270.854 li
95.771 284.354 li
94.145 286.866 90.498 284.738 91.884 282.087 cv
101.702 265.255 li
111.521 282.087 li
112.836 284.552 109.633 286.74 107.815 284.619 cv
107.634 284.354 li
cp
95.771 323.264 mo
103.646 336.764 li
99.759 336.764 li
107.634 323.264 li
109.261 320.753 112.906 322.881 111.521 325.532 cv
101.702 342.364 li
91.884 325.532 li
90.569 323.067 93.769 320.879 95.59 322.999 cv
95.771 323.264 li
cp
103.952 269.721 mo
103.952 337.898 li
99.452 337.898 li
99.452 269.721 li
103.952 269.721 li
.660639 0 .890349 0 cmyk
f
gsave
116.403 373.865 mo
141.353 373.865 li
141.353 409.865 li
116.403 409.865 li
cp
eclp
.903044 .872343 .884215 .782895 cmyk
%ADOBeginSubsetFont: HJCBAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+TimesNewRomanPSMT 1 GetGlyphDirectory
97 <001C60D8A8C9B79EE3438ED4B7DB437A0B250A0BACC36D720F2F36849738
191DEBAE16EBD29B8C17389A3EBEA783C4B5907C05EB4A684FF0BEA5C42F5040
6CFFEECE2BEE203ADE8BFBCF08D6E9DE21FDE493EEE9A1B3C5164F6831E8055C
4E61C6A4C1C876C0EB1B31176E404E37288720B6B362B5A0> |
!
end
end end
%ADOEndSubsetFont
LIRVKZ+TimesNewRomanPSMT [14.784 0 0 -14.784 0 0 ]msf
132.356 405.695 mo
(\000\024)sh
LIRVKZ+TimesNewRomanPSMT [25.344 0 0 -25.344 0 0 ]msf
121.74 389.416 mo
(\000a)sh
%ADOBeginSubsetFont: UGXAAA+TimesNewRomanPS-ItalicMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (UGXAAA+TimesNewRomanPS-ItalicMT)
%%Title: (UGXAAA+TimesNewRomanPS-ItalicMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /UGXAAA+TimesNewRomanPS-ItalicMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-498 -307 1333 1023} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 75 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
74 <001C60D8A8C9B7A73DB6A115BACE7F487489BC503E16B9751BF18C6D7E42
E06D2B7B1F089430E910A6253B6313C5EA899502D0D121C470848438F2B8A71B
5D102A13A82BD9E44627438E3D68944BDD10ECDC0CB5CF4D8C3CE72AE1E4BFF1
9C4AD2BBC40F4E759C4D3469F3463BC36A69DB81E986C6811A83D2812B0E9989
EE680E8FEF508D5F307F1ADDA3FE5EB69147BD10417CE8BE6F7177827A708CCE
4A28BC62912C8577C9FCC2C284820C0D4D78BAE839F58F949E2DCA0357FDD18F
3EFEE894B48915C73CE679A1EBF63CDDD4819A9767EB909F9DC12CA2F1D6CF19
CEDDE14B260F16CAB8A1EE3C950BEF869CBEC21279DD1ECA7716492A81BD8B8D
06866B8145EA1E6F3754CEA3866CFB87B96A4D9E3A3656624F81275C91FDF7BA
935E72F2A99C4EB25B2932A91C38CB78223D5AF70EC16B0EE27DA71AB9D0143E
2B2353D449A80518254D9FD55CE939B6FD0F1324A9AB14FB43BC87B748F7C154
DE3E1DD70C3E7F> |
0 <001C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704AA398
8900AFCFF05DD> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /UGXAAA+TimesNewRomanPS-ItalicMT-Identity-H /Identity-H 0 [/UGXAAA+TimesNewRomanPS-ItalicMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LIRVLA+TimesNewRomanPS-ItalicMT /UGXAAA+TimesNewRomanPS-ItalicMT-Identity-H findfont ct_VMDictPut
LIRVLA+TimesNewRomanPS-ItalicMT [25.344 0 0 -25.344 0 0 ]msf
120.954 399.351 mo
(\000J)sh
grestore
108.804 370.076 mo
100.929 356.576 li
104.816 356.576 li
96.941 370.076 li
95.312 372.586 91.668 370.459 93.054 367.808 cv
102.872 350.976 li
112.691 367.808 li
114.004 370.274 110.805 372.461 108.985 370.341 cv
108.804 370.076 li
cp
96.941 418.532 mo
104.816 432.032 li
100.929 432.032 li
108.804 418.532 li
110.433 416.022 114.074 418.146 112.691 420.8 cv
102.872 437.631 li
93.054 420.8 li
91.739 418.335 94.937 416.147 96.759 418.267 cv
96.941 418.532 li
cp
105.122 355.442 mo
105.122 433.166 li
100.622 433.166 li
100.622 355.442 li
105.122 355.442 li
f
1.026 lw
178.418 332.979 mo
178.418 360.65 li
.903044 .872343 .884215 .782895 cmyk
@
224.159 332.979 mo
229.876 346.814 li
224.159 360.65 li
@
LIRVKY+TimesNewRomanPSMT [23.04 0 0 -23.04 0 0 ]msf
183.591 352.929 mo
(\000J)sh
LIRVKZ+TimesNewRomanPSMT [23.04 0 0 -23.04 0 0 ]msf
195.026 352.929 mo
(\000\024)sh
LIRVKY+TimesNewRomanPSMT [23.04 0 0 -23.04 0 0 ]msf
206.461 352.929 mo
(\000J)sh
180.563 424.894 mo
180.563 452.566 li
@
223.872 424.894 mo
229.592 438.73 li
223.872 452.566 li
@
LIRVKY+TimesNewRomanPSMT [23.04 0 0 -23.04 0 0 ]msf
183.287 444.844 mo
(\000I)sh
LIRVKZ+TimesNewRomanPSMT [23.04 0 0 -23.04 0 0 ]msf
190.878 444.844 mo
(\000\023)sh
LIRVKY+TimesNewRomanPSMT [23.04 0 0 -23.04 0 0 ]msf
202.317 444.844 mo
(\000J)sh
gsave
113.628 290.331 mo
141.328 290.331 li
141.328 326.331 li
113.628 326.331 li
cp
eclp
%ADOBeginSubsetFont: HJCBAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+TimesNewRomanPSMT 1 GetGlyphDirectory
21 <001C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11E
C41D90433CE0F55F0A42A96AF852FD50FA> |
!
end
end end
%ADOEndSubsetFont
LIRVKZ+TimesNewRomanPSMT [14.784 0 0 -14.784 0 0 ]msf
130.421 322.161 mo
(\000\025)sh
LIRVKZ+TimesNewRomanPSMT [25.344 0 0 -25.344 0 0 ]msf
118.764 305.882 mo
(\000a)sh
LIRVLA+TimesNewRomanPS-ItalicMT [25.344 0 0 -25.344 0 0 ]msf
118.004 315.817 mo
(\000J)sh
grestore
392.75 252.184 mo
392.75 244.24 398.965 237.833 406.631 237.833 cv
414.297 237.833 420.511 244.24 420.511 252.144 cv
420.511 260.048 414.297 266.455 406.631 266.455 cv
398.965 266.455 392.75 260.048 392.75 252.184 cv
.658076 0 .502251 0 cmyk
ef
391.768 251.383 mo
391.771 251.334 li
391.824 250.607 li
394.498 231.346 420.796 232.8 421.511 252.168 cv
421.493 252.905 li
421.49 252.954 li
419.628 272.719 392.605 271.969 391.75 252.168 cv
391.75 252.119 li
391.768 251.383 li
cp
393.75 252.168 mo
393.75 252.119 li
393.768 252.856 li
393.765 252.807 li
393.819 253.533 li
393.814 253.485 li
393.902 254.201 li
393.895 254.153 li
394.017 254.857 li
394.008 254.81 li
394.163 255.502 li
394.151 255.455 li
394.338 256.134 li
394.324 256.088 li
394.542 256.753 li
394.526 256.707 li
394.775 257.357 li
394.757 257.313 li
395.035 257.947 li
395.014 257.903 li
395.321 258.52 li
395.299 258.478 li
395.633 259.078 li
395.609 259.037 li
395.97 259.617 li
395.944 259.577 li
396.331 260.139 li
396.303 260.1 li
396.715 260.641 li
396.685 260.604 li
397.122 261.123 li
397.09 261.087 li
397.55 261.584 li
397.517 261.55 li
397.999 262.024 li
397.964 261.991 li
398.467 262.441 li
398.431 262.41 li
398.955 262.835 li
398.917 262.805 li
399.461 263.204 li
399.421 263.176 li
399.984 263.549 li
399.943 263.523 li
400.524 263.867 li
400.481 263.843 li
401.08 264.159 li
401.035 264.137 li
401.65 264.424 li
401.604 264.404 li
402.235 264.66 li
402.187 264.642 li
402.832 264.867 li
402.784 264.852 li
403.443 265.045 li
403.393 265.031 li
404.065 265.191 li
404.014 265.181 li
404.698 265.306 li
404.647 265.298 li
405.341 265.389 li
405.29 265.384 li
405.994 265.439 li
405.942 265.437 li
406.657 265.455 li
406.604 265.455 li
407.319 265.437 li
407.267 265.439 li
407.972 265.384 li
407.92 265.389 li
408.615 265.298 li
408.563 265.306 li
409.247 265.181 li
409.197 265.191 li
409.868 265.031 li
409.819 265.045 li
410.477 264.852 li
410.429 264.867 li
411.074 264.642 li
411.027 264.66 li
411.657 264.404 li
411.611 264.424 li
412.226 264.137 li
412.181 264.159 li
412.78 263.843 li
412.737 263.867 li
413.318 263.523 li
413.277 263.549 li
413.84 263.176 li
413.8 263.204 li
414.344 262.805 li
414.306 262.835 li
414.83 262.41 li
414.794 262.441 li
415.297 261.991 li
415.263 262.024 li
415.745 261.55 li
415.711 261.584 li
416.171 261.087 li
416.14 261.123 li
416.576 260.604 li
416.546 260.641 li
416.958 260.1 li
416.93 260.139 li
417.317 259.577 li
417.291 259.617 li
417.652 259.037 li
417.628 259.078 li
417.962 258.478 li
417.94 258.52 li
418.247 257.903 li
418.227 257.947 li
418.505 257.313 li
418.486 257.357 li
418.735 256.707 li
418.719 256.753 li
418.937 256.088 li
418.923 256.134 li
419.11 255.455 li
419.098 255.502 li
419.253 254.81 li
419.244 254.857 li
419.366 254.153 li
419.359 254.201 li
419.447 253.485 li
419.442 253.533 li
419.496 252.807 li
419.493 252.856 li
419.511 252.119 li
419.511 252.168 li
419.493 251.432 li
419.496 251.481 li
419.442 250.754 li
419.447 250.803 li
419.359 250.087 li
419.366 250.135 li
419.244 249.43 li
419.253 249.478 li
419.098 248.786 li
419.11 248.833 li
418.923 248.154 li
418.937 248.2 li
418.719 247.535 li
418.735 247.58 li
418.486 246.931 li
418.505 246.975 li
418.227 246.341 li
418.247 246.384 li
417.94 245.767 li
417.962 245.809 li
417.628 245.21 li
417.652 245.251 li
417.291 244.67 li
417.317 244.71 li
416.93 244.149 li
416.958 244.188 li
416.546 243.647 li
416.576 243.684 li
416.14 243.165 li
416.171 243.2 li
415.711 242.703 li
415.745 242.738 li
415.263 242.264 li
415.297 242.296 li
414.794 241.847 li
414.83 241.878 li
414.306 241.453 li
414.344 241.482 li
413.8 241.083 li
413.84 241.111 li
413.277 240.739 li
413.318 240.765 li
412.737 240.42 li
412.78 240.444 li
412.181 240.128 li
412.226 240.15 li
411.611 239.864 li
411.657 239.884 li
411.027 239.628 li
411.074 239.645 li
410.429 239.42 li
410.477 239.436 li
409.819 239.243 li
409.868 239.256 li
409.197 239.096 li
409.247 239.107 li
408.563 238.981 li
408.615 238.989 li
407.92 238.898 li
407.972 238.904 li
407.267 238.848 li
407.319 238.851 li
406.604 238.832 li
406.657 238.832 li
405.942 238.851 li
405.994 238.848 li
405.29 238.904 li
405.341 238.898 li
404.647 238.989 li
404.698 238.981 li
404.014 239.107 li
404.065 239.096 li
403.393 239.256 li
403.443 239.243 li
402.784 239.436 li
402.832 239.42 li
402.187 239.645 li
402.235 239.628 li
401.604 239.884 li
401.65 239.864 li
401.035 240.15 li
401.08 240.128 li
400.481 240.444 li
400.524 240.42 li
399.943 240.765 li
399.984 240.739 li
399.421 241.111 li
399.461 241.083 li
398.917 241.482 li
398.955 241.453 li
398.431 241.878 li
398.467 241.847 li
397.964 242.296 li
397.999 242.264 li
397.517 242.738 li
397.55 242.703 li
397.09 243.2 li
397.122 243.165 li
396.685 243.684 li
396.715 243.647 li
396.303 244.188 li
396.331 244.149 li
395.944 244.71 li
395.97 244.67 li
395.609 245.251 li
395.633 245.21 li
395.299 245.809 li
395.321 245.767 li
395.014 246.384 li
395.035 246.341 li
394.757 246.975 li
394.775 246.931 li
394.526 247.58 li
394.542 247.535 li
394.324 248.2 li
394.338 248.154 li
394.151 248.833 li
394.163 248.786 li
394.008 249.478 li
394.017 249.43 li
393.895 250.135 li
393.902 250.087 li
393.814 250.803 li
393.819 250.754 li
393.765 251.481 li
393.768 251.432 li
393.75 252.168 li
0 0 0 0 cmyk
f
392.75 315.904 mo
392.75 307.981 398.965 301.573 406.631 301.573 cv
414.297 301.573 420.511 307.981 420.511 315.884 cv
420.511 323.788 414.297 330.195 406.631 330.195 cv
398.965 330.195 392.75 323.788 392.75 315.904 cv
.658076 0 .502251 0 cmyk
ef
391.768 315.123 mo
391.771 315.074 li
391.824 314.348 li
394.498 295.087 420.797 296.54 421.511 315.909 cv
421.493 316.645 li
421.49 316.694 li
419.63 336.459 392.606 335.71 391.75 315.909 cv
391.75 315.86 li
391.768 315.123 li
cp
393.75 315.909 mo
393.75 315.86 li
393.768 316.596 li
393.765 316.547 li
393.819 317.274 li
393.814 317.225 li
393.902 317.941 li
393.895 317.893 li
394.017 318.598 li
394.008 318.55 li
394.163 319.242 li
394.151 319.195 li
394.338 319.874 li
394.324 319.828 li
394.542 320.493 li
394.526 320.448 li
394.775 321.098 li
394.757 321.053 li
395.035 321.687 li
395.014 321.644 li
395.321 322.261 li
395.299 322.219 li
395.633 322.818 li
395.609 322.777 li
395.97 323.358 li
395.944 323.318 li
396.331 323.879 li
396.303 323.841 li
396.715 324.381 li
396.685 324.344 li
397.122 324.863 li
397.09 324.828 li
397.55 325.325 li
397.517 325.291 li
397.999 325.764 li
397.964 325.732 li
398.467 326.182 li
398.431 326.15 li
398.955 326.575 li
398.917 326.546 li
399.461 326.945 li
399.421 326.917 li
399.984 327.289 li
399.943 327.263 li
400.524 327.608 li
400.481 327.584 li
401.08 327.9 li
401.035 327.878 li
401.65 328.164 li
401.604 328.144 li
402.235 328.401 li
402.187 328.383 li
402.832 328.608 li
402.784 328.592 li
403.443 328.785 li
403.393 328.772 li
404.065 328.932 li
404.014 328.921 li
404.698 329.047 li
404.647 329.039 li
405.341 329.13 li
405.29 329.125 li
405.994 329.18 li
405.942 329.177 li
406.657 329.196 li
406.604 329.196 li
407.319 329.177 li
407.267 329.18 li
407.972 329.125 li
407.92 329.13 li
408.615 329.039 li
408.563 329.047 li
409.247 328.921 li
409.197 328.932 li
409.868 328.772 li
409.819 328.785 li
410.477 328.592 li
410.429 328.608 li
411.074 328.383 li
411.027 328.401 li
411.657 328.144 li
411.611 328.164 li
412.226 327.878 li
412.181 327.9 li
412.78 327.584 li
412.737 327.608 li
413.318 327.263 li
413.277 327.289 li
413.84 326.917 li
413.8 326.945 li
414.344 326.546 li
414.306 326.575 li
414.83 326.15 li
414.794 326.182 li
415.297 325.732 li
415.263 325.764 li
415.745 325.291 li
415.711 325.325 li
416.171 324.828 li
416.14 324.863 li
416.576 324.344 li
416.546 324.381 li
416.958 323.841 li
416.93 323.879 li
417.317 323.318 li
417.291 323.358 li
417.652 322.777 li
417.628 322.818 li
417.962 322.219 li
417.94 322.261 li
418.247 321.644 li
418.227 321.687 li
418.505 321.053 li
418.486 321.098 li
418.735 320.448 li
418.719 320.493 li
418.937 319.828 li
418.923 319.874 li
419.11 319.195 li
419.098 319.242 li
419.253 318.55 li
419.244 318.598 li
419.366 317.893 li
419.359 317.941 li
419.447 317.225 li
419.442 317.274 li
419.496 316.547 li
419.493 316.596 li
419.511 315.86 li
419.511 315.909 li
419.493 315.172 li
419.496 315.221 li
419.442 314.495 li
419.447 314.543 li
419.359 313.827 li
419.366 313.876 li
419.244 313.171 li
419.253 313.219 li
419.098 312.526 li
419.11 312.573 li
418.923 311.894 li
418.937 311.941 li
418.719 311.276 li
418.735 311.321 li
418.486 310.671 li
418.505 310.715 li
418.227 310.082 li
418.247 310.125 li
417.94 309.508 li
417.962 309.55 li
417.628 308.951 li
417.652 308.992 li
417.291 308.411 li
417.317 308.451 li
416.93 307.89 li
416.958 307.928 li
416.546 307.387 li
416.576 307.424 li
416.14 306.905 li
416.171 306.941 li
415.711 306.444 li
415.745 306.478 li
415.263 306.004 li
415.297 306.037 li
414.794 305.587 li
414.83 305.618 li
414.306 305.193 li
414.344 305.223 li
413.8 304.824 li
413.84 304.852 li
413.277 304.479 li
413.318 304.505 li
412.737 304.161 li
412.78 304.185 li
412.181 303.869 li
412.226 303.891 li
411.611 303.604 li
411.657 303.624 li
411.027 303.368 li
411.074 303.386 li
410.429 303.161 li
410.477 303.176 li
409.819 302.984 li
409.868 302.997 li
409.197 302.837 li
409.247 302.848 li
408.563 302.722 li
408.615 302.73 li
407.92 302.639 li
407.972 302.644 li
407.267 302.589 li
407.319 302.592 li
406.604 302.573 li
406.657 302.573 li
405.942 302.592 li
405.994 302.589 li
405.29 302.644 li
405.341 302.639 li
404.647 302.73 li
404.698 302.722 li
404.014 302.848 li
404.065 302.837 li
403.393 302.997 li
403.443 302.984 li
402.784 303.176 li
402.832 303.161 li
402.187 303.386 li
402.235 303.368 li
401.604 303.624 li
401.65 303.604 li
401.035 303.891 li
401.08 303.869 li
400.481 304.185 li
400.524 304.161 li
399.943 304.505 li
399.984 304.479 li
399.421 304.852 li
399.461 304.824 li
398.917 305.223 li
398.955 305.193 li
398.431 305.618 li
398.467 305.587 li
397.964 306.037 li
397.999 306.004 li
397.517 306.478 li
397.55 306.444 li
397.09 306.941 li
397.122 306.905 li
396.685 307.424 li
396.715 307.387 li
396.303 307.928 li
396.331 307.89 li
395.944 308.451 li
395.97 308.411 li
395.609 308.992 li
395.633 308.951 li
395.299 309.55 li
395.321 309.508 li
395.014 310.125 li
395.035 310.082 li
394.757 310.715 li
394.775 310.671 li
394.526 311.321 li
394.542 311.276 li
394.324 311.941 li
394.338 311.894 li
394.151 312.573 li
394.163 312.526 li
394.008 313.219 li
394.017 313.171 li
393.895 313.876 li
393.902 313.827 li
393.814 314.543 li
393.819 314.495 li
393.765 315.221 li
393.768 315.172 li
393.75 315.909 li
0 0 0 0 cmyk
f
392.75 379.744 mo
392.75 371.805 398.965 365.398 406.631 365.398 cv
414.297 365.398 420.511 371.805 420.511 379.709 cv
420.511 387.613 414.297 394.02 406.631 394.02 cv
398.965 394.02 392.75 387.613 392.75 379.744 cv
.658076 0 .502251 0 cmyk
ef
391.768 378.948 mo
391.771 378.899 li
391.824 378.172 li
394.499 358.911 420.797 360.366 421.511 379.734 cv
421.493 380.47 li
421.49 380.519 li
419.629 400.284 392.606 399.535 391.75 379.734 cv
391.75 379.685 li
391.768 378.948 li
cp
393.75 379.734 mo
393.75 379.685 li
393.768 380.421 li
393.765 380.372 li
393.819 381.099 li
393.814 381.05 li
393.902 381.766 li
393.895 381.718 li
394.017 382.423 li
394.008 382.375 li
394.163 383.067 li
394.151 383.02 li
394.338 383.699 li
394.324 383.653 li
394.542 384.318 li
394.526 384.273 li
394.775 384.922 li
394.757 384.878 li
395.035 385.512 li
395.014 385.469 li
395.321 386.086 li
395.299 386.044 li
395.633 386.643 li
395.609 386.602 li
395.97 387.182 li
395.944 387.143 li
396.331 387.704 li
396.303 387.665 li
396.715 388.206 li
396.685 388.169 li
397.122 388.688 li
397.09 388.653 li
397.55 389.15 li
397.517 389.115 li
397.999 389.589 li
397.964 389.557 li
398.467 390.006 li
398.431 389.975 li
398.955 390.4 li
398.917 390.371 li
399.461 390.77 li
399.421 390.742 li
399.984 391.114 li
399.943 391.088 li
400.524 391.433 li
400.481 391.409 li
401.08 391.725 li
401.035 391.703 li
401.65 391.989 li
401.604 391.969 li
402.235 392.225 li
402.187 392.208 li
402.832 392.433 li
402.784 392.417 li
403.443 392.61 li
403.393 392.597 li
404.065 392.757 li
404.014 392.746 li
404.698 392.872 li
404.647 392.864 li
405.341 392.955 li
405.29 392.949 li
405.994 393.005 li
405.942 393.002 li
406.657 393.02 li
406.604 393.02 li
407.319 393.002 li
407.267 393.005 li
407.972 392.949 li
407.92 392.955 li
408.615 392.864 li
408.563 392.872 li
409.247 392.746 li
409.197 392.757 li
409.868 392.597 li
409.819 392.61 li
410.477 392.417 li
410.429 392.433 li
411.074 392.208 li
411.027 392.225 li
411.657 391.969 li
411.611 391.989 li
412.226 391.703 li
412.181 391.725 li
412.78 391.409 li
412.737 391.433 li
413.318 391.088 li
413.277 391.114 li
413.84 390.742 li
413.8 390.77 li
414.344 390.371 li
414.306 390.4 li
414.83 389.975 li
414.794 390.006 li
415.297 389.557 li
415.263 389.589 li
415.745 389.115 li
415.711 389.15 li
416.171 388.653 li
416.14 388.688 li
416.576 388.169 li
416.546 388.206 li
416.958 387.665 li
416.93 387.704 li
417.317 387.143 li
417.291 387.182 li
417.652 386.602 li
417.628 386.643 li
417.962 386.044 li
417.94 386.086 li
418.247 385.469 li
418.227 385.512 li
418.505 384.878 li
418.486 384.922 li
418.735 384.273 li
418.719 384.318 li
418.937 383.653 li
418.923 383.699 li
419.11 383.02 li
419.098 383.067 li
419.253 382.375 li
419.244 382.423 li
419.366 381.718 li
419.359 381.766 li
419.447 381.05 li
419.442 381.099 li
419.496 380.372 li
419.493 380.421 li
419.511 379.685 li
419.511 379.734 li
419.493 378.997 li
419.496 379.046 li
419.442 378.319 li
419.447 378.368 li
419.359 377.652 li
419.366 377.7 li
419.244 376.996 li
419.253 377.043 li
419.098 376.351 li
419.11 376.398 li
418.923 375.719 li
418.937 375.765 li
418.719 375.1 li
418.735 375.146 li
418.486 374.496 li
418.505 374.54 li
418.227 373.906 li
418.247 373.95 li
417.94 373.333 li
417.962 373.375 li
417.628 372.775 li
417.652 372.816 li
417.291 372.236 li
417.317 372.276 li
416.93 371.714 li
416.958 371.753 li
416.546 371.212 li
416.576 371.249 li
416.14 370.73 li
416.171 370.766 li
415.711 370.269 li
415.745 370.303 li
415.263 369.829 li
415.297 369.862 li
414.794 369.412 li
414.83 369.443 li
414.306 369.018 li
414.344 369.048 li
413.8 368.649 li
413.84 368.676 li
413.277 368.304 li
413.318 368.33 li
412.737 367.986 li
412.78 368.01 li
412.181 367.694 li
412.226 367.716 li
411.611 367.429 li
411.657 367.449 li
411.027 367.193 li
411.074 367.211 li
410.429 366.986 li
410.477 367.001 li
409.819 366.808 li
409.868 366.822 li
409.197 366.662 li
409.247 366.672 li
408.563 366.547 li
408.615 366.555 li
407.92 366.464 li
407.972 366.469 li
407.267 366.414 li
407.319 366.416 li
406.604 366.398 li
406.657 366.398 li
405.942 366.416 li
405.994 366.414 li
405.29 366.469 li
405.341 366.464 li
404.647 366.555 li
404.698 366.547 li
404.014 366.672 li
404.065 366.662 li
403.393 366.822 li
403.443 366.808 li
402.784 367.001 li
402.832 366.986 li
402.187 367.211 li
402.235 367.193 li
401.604 367.449 li
401.65 367.429 li
401.035 367.716 li
401.08 367.694 li
400.481 368.01 li
400.524 367.986 li
399.943 368.33 li
399.984 368.304 li
399.421 368.676 li
399.461 368.649 li
398.917 369.048 li
398.955 369.018 li
398.431 369.443 li
398.467 369.412 li
397.964 369.862 li
397.999 369.829 li
397.517 370.303 li
397.55 370.269 li
397.09 370.766 li
397.122 370.73 li
396.685 371.249 li
396.715 371.212 li
396.303 371.753 li
396.331 371.714 li
395.944 372.276 li
395.97 372.236 li
395.609 372.816 li
395.633 372.775 li
395.299 373.375 li
395.321 373.333 li
395.014 373.95 li
395.035 373.906 li
394.757 374.54 li
394.775 374.496 li
394.526 375.146 li
394.542 375.1 li
394.324 375.765 li
394.338 375.719 li
394.151 376.398 li
394.163 376.351 li
394.008 377.043 li
394.017 376.996 li
393.895 377.7 li
393.902 377.652 li
393.814 378.368 li
393.819 378.319 li
393.765 379.046 li
393.768 378.997 li
393.75 379.734 li
0 0 0 0 cmyk
f
393.83 443.464 mo
393.793 435.52 400.008 429.113 407.674 429.113 cv
415.34 429.113 421.555 435.52 421.555 443.424 cv
421.555 451.327 415.34 457.735 407.674 457.735 cv
400.008 457.735 393.793 451.327 393.83 443.464 cv
.658076 0 .502251 0 cmyk
ef
392.812 442.663 mo
392.814 442.614 li
392.868 441.887 li
395.54 422.626 421.841 424.08 422.554 443.448 cv
422.536 444.185 li
422.534 444.234 li
420.671 463.999 393.649 463.249 392.794 443.448 cv
392.794 443.399 li
392.812 442.663 li
cp
394.793 443.448 mo
394.793 443.399 li
394.811 444.135 li
394.809 444.086 li
394.862 444.813 li
394.858 444.764 li
394.946 445.481 li
394.939 445.432 li
395.061 446.137 li
395.051 446.089 li
395.206 446.782 li
395.195 446.735 li
395.382 447.414 li
395.368 447.367 li
395.586 448.032 li
395.57 447.987 li
395.818 448.637 li
395.8 448.592 li
396.078 449.226 li
396.058 449.183 li
396.364 449.8 li
396.342 449.758 li
396.676 450.357 li
396.652 450.316 li
397.013 450.897 li
396.987 450.857 li
397.374 451.418 li
397.346 451.38 li
397.758 451.92 li
397.729 451.883 li
398.165 452.403 li
398.134 452.367 li
398.593 452.864 li
398.56 452.83 li
399.042 453.304 li
399.007 453.271 li
399.511 453.721 li
399.474 453.69 li
399.999 454.114 li
399.96 454.085 li
400.505 454.484 li
400.465 454.456 li
401.028 454.828 li
400.986 454.802 li
401.568 455.147 li
401.525 455.123 li
402.123 455.439 li
402.079 455.417 li
402.694 455.704 li
402.648 455.684 li
403.278 455.94 li
403.231 455.922 li
403.876 456.147 li
403.827 456.131 li
404.486 456.324 li
404.437 456.311 li
405.108 456.471 li
405.058 456.46 li
405.741 456.586 li
405.69 456.578 li
406.385 456.669 li
406.333 456.664 li
407.038 456.719 li
406.986 456.716 li
407.7 456.735 li
407.648 456.735 li
408.362 456.716 li
408.31 456.719 li
409.015 456.664 li
408.963 456.669 li
409.658 456.578 li
409.607 456.586 li
410.29 456.46 li
410.24 456.471 li
410.912 456.311 li
410.862 456.324 li
411.521 456.131 li
411.472 456.147 li
412.117 455.922 li
412.07 455.94 li
412.7 455.684 li
412.655 455.704 li
413.269 455.417 li
413.225 455.439 li
413.823 455.123 li
413.78 455.147 li
414.362 454.802 li
414.32 454.828 li
414.883 454.456 li
414.844 454.484 li
415.388 454.085 li
415.35 454.114 li
415.874 453.69 li
415.837 453.721 li
416.341 453.271 li
416.306 453.304 li
416.788 452.83 li
416.755 452.864 li
417.215 452.367 li
417.183 452.403 li
417.619 451.883 li
417.59 451.92 li
418.002 451.38 li
417.974 451.418 li
418.361 450.857 li
418.335 450.897 li
418.696 450.316 li
418.672 450.357 li
419.006 449.758 li
418.984 449.8 li
419.29 449.183 li
419.27 449.226 li
419.548 448.592 li
419.53 448.637 li
419.778 447.987 li
419.762 448.032 li
419.98 447.367 li
419.966 447.414 li
420.154 446.735 li
420.142 446.782 li
420.297 446.089 li
420.287 446.137 li
420.409 445.432 li
420.402 445.481 li
420.49 444.764 li
420.486 444.813 li
420.539 444.086 li
420.537 444.135 li
420.555 443.399 li
420.555 443.448 li
420.537 442.712 li
420.539 442.761 li
420.486 442.034 li
420.49 442.083 li
420.402 441.366 li
420.409 441.415 li
420.287 440.71 li
420.297 440.758 li
420.142 440.065 li
420.154 440.113 li
419.966 439.433 li
419.98 439.48 li
419.762 438.815 li
419.778 438.86 li
419.53 438.21 li
419.548 438.255 li
419.27 437.621 li
419.29 437.664 li
418.984 437.047 li
419.006 437.089 li
418.672 436.49 li
418.696 436.531 li
418.335 435.95 li
418.361 435.99 li
417.974 435.429 li
418.002 435.467 li
417.59 434.927 li
417.619 434.964 li
417.183 434.444 li
417.215 434.48 li
416.755 433.983 li
416.788 434.017 li
416.306 433.543 li
416.341 433.576 li
415.837 433.126 li
415.874 433.157 li
415.35 432.733 li
415.388 432.762 li
414.844 432.363 li
414.883 432.391 li
414.32 432.019 li
414.362 432.045 li
413.78 431.7 li
413.823 431.724 li
413.225 431.408 li
413.269 431.43 li
412.655 431.144 li
412.7 431.164 li
412.07 430.907 li
412.117 430.925 li
411.472 430.7 li
411.521 430.716 li
410.862 430.523 li
410.912 430.536 li
410.24 430.376 li
410.29 430.387 li
409.607 430.261 li
409.658 430.269 li
408.963 430.178 li
409.015 430.183 li
408.31 430.128 li
408.362 430.131 li
407.648 430.112 li
407.7 430.112 li
406.986 430.131 li
407.038 430.128 li
406.333 430.183 li
406.385 430.178 li
405.69 430.269 li
405.741 430.261 li
405.058 430.387 li
405.108 430.376 li
404.437 430.536 li
404.486 430.523 li
403.827 430.716 li
403.876 430.7 li
403.231 430.925 li
403.278 430.907 li
402.648 431.164 li
402.694 431.144 li
402.079 431.43 li
402.123 431.408 li
401.525 431.724 li
401.568 431.7 li
400.986 432.045 li
401.028 432.019 li
400.465 432.391 li
400.505 432.363 li
399.96 432.762 li
399.999 432.733 li
399.474 433.157 li
399.511 433.126 li
399.007 433.576 li
399.042 433.543 li
398.56 434.017 li
398.593 433.983 li
398.134 434.48 li
398.165 434.444 li
397.729 434.964 li
397.758 434.927 li
397.346 435.467 li
397.374 435.429 li
396.987 435.99 li
397.013 435.95 li
396.652 436.531 li
396.676 436.49 li
396.342 437.089 li
396.364 437.047 li
396.058 437.664 li
396.078 437.621 li
395.8 438.255 li
395.818 438.21 li
395.57 438.86 li
395.586 438.815 li
395.368 439.48 li
395.382 439.433 li
395.195 440.113 li
395.206 440.065 li
395.051 440.758 li
395.061 440.71 li
394.939 441.415 li
394.946 441.366 li
394.858 442.083 li
394.862 442.034 li
394.809 442.761 li
394.811 442.712 li
394.793 443.448 li
0 0 0 0 cmyk
f
472.55 252.424 mo
472.576 244.478 478.791 238.071 486.457 238.071 cv
494.123 238.071 500.337 244.478 500.337 252.382 cv
500.337 260.286 494.123 266.693 486.457 266.693 cv
478.791 266.693 472.576 260.286 472.55 252.424 cv
.658076 0 .502251 0 cmyk
ef
471.594 251.621 mo
471.597 251.572 li
471.65 250.845 li
474.325 231.584 500.622 233.038 501.337 252.406 cv
501.319 253.143 li
501.317 253.192 li
499.453 272.957 472.433 272.207 471.576 252.406 cv
471.576 252.357 li
471.594 251.621 li
cp
473.576 252.406 mo
473.576 252.357 li
473.594 253.094 li
473.591 253.045 li
473.645 253.772 li
473.64 253.723 li
473.729 254.439 li
473.721 254.391 li
473.843 255.095 li
473.834 255.048 li
473.989 255.74 li
473.977 255.693 li
474.164 256.372 li
474.15 256.326 li
474.369 256.991 li
474.352 256.945 li
474.601 257.595 li
474.583 257.551 li
474.861 258.185 li
474.84 258.141 li
475.147 258.758 li
475.125 258.716 li
475.459 259.316 li
475.435 259.275 li
475.796 259.855 li
475.77 259.816 li
476.157 260.377 li
476.129 260.338 li
476.541 260.879 li
476.511 260.842 li
476.948 261.361 li
476.916 261.325 li
477.376 261.822 li
477.343 261.788 li
477.825 262.262 li
477.79 262.229 li
478.293 262.679 li
478.257 262.648 li
478.781 263.073 li
478.743 263.043 li
479.287 263.442 li
479.247 263.415 li
479.811 263.787 li
479.769 263.761 li
480.35 264.105 li
480.307 264.081 li
480.906 264.397 li
480.861 264.375 li
481.476 264.662 li
481.43 264.642 li
482.061 264.898 li
482.013 264.88 li
482.658 265.105 li
482.61 265.09 li
483.269 265.283 li
483.219 265.269 li
483.891 265.429 li
483.84 265.419 li
484.524 265.545 li
484.473 265.536 li
485.167 265.627 li
485.116 265.622 li
485.821 265.677 li
485.768 265.675 li
486.483 265.693 li
486.431 265.693 li
487.145 265.675 li
487.093 265.677 li
487.798 265.622 li
487.746 265.627 li
488.441 265.536 li
488.39 265.545 li
489.073 265.419 li
489.023 265.429 li
489.694 265.269 li
489.645 265.283 li
490.303 265.09 li
490.255 265.105 li
490.9 264.88 li
490.853 264.898 li
491.483 264.642 li
491.437 264.662 li
492.052 264.375 li
492.008 264.397 li
492.606 264.081 li
492.563 264.105 li
493.144 263.761 li
493.103 263.787 li
493.666 263.415 li
493.626 263.442 li
494.17 263.043 li
494.132 263.073 li
494.657 262.648 li
494.62 262.679 li
495.124 262.229 li
495.089 262.262 li
495.571 261.788 li
495.538 261.822 li
495.997 261.325 li
495.966 261.361 li
496.402 260.842 li
496.372 260.879 li
496.784 260.338 li
496.757 260.377 li
497.144 259.816 li
497.117 259.855 li
497.479 259.275 li
497.454 259.316 li
497.789 258.716 li
497.766 258.758 li
498.073 258.141 li
498.053 258.185 li
498.331 257.551 li
498.312 257.595 li
498.561 256.945 li
498.545 256.991 li
498.763 256.326 li
498.749 256.372 li
498.936 255.693 li
498.924 255.74 li
499.079 255.048 li
499.07 255.095 li
499.192 254.391 li
499.185 254.439 li
499.273 253.723 li
499.268 253.772 li
499.322 253.045 li
499.32 253.094 li
499.338 252.357 li
499.338 252.406 li
499.32 251.67 li
499.322 251.719 li
499.268 250.992 li
499.273 251.041 li
499.185 250.325 li
499.192 250.373 li
499.07 249.668 li
499.079 249.716 li
498.924 249.024 li
498.936 249.071 li
498.749 248.392 li
498.763 248.438 li
498.545 247.773 li
498.561 247.819 li
498.312 247.169 li
498.331 247.213 li
498.053 246.579 li
498.073 246.622 li
497.766 246.005 li
497.789 246.048 li
497.454 245.448 li
497.479 245.489 li
497.117 244.909 li
497.144 244.948 li
496.757 244.387 li
496.784 244.426 li
496.372 243.885 li
496.402 243.922 li
495.966 243.403 li
495.997 243.438 li
495.538 242.941 li
495.571 242.976 li
495.089 242.502 li
495.124 242.535 li
494.62 242.085 li
494.657 242.116 li
494.132 241.691 li
494.17 241.72 li
493.626 241.321 li
493.666 241.349 li
493.103 240.977 li
493.144 241.003 li
492.563 240.658 li
492.606 240.682 li
492.008 240.366 li
492.052 240.389 li
491.437 240.102 li
491.483 240.122 li
490.853 239.866 li
490.9 239.884 li
490.255 239.658 li
490.303 239.674 li
489.645 239.481 li
489.694 239.494 li
489.023 239.334 li
489.073 239.345 li
488.39 239.219 li
488.441 239.227 li
487.746 239.136 li
487.798 239.142 li
487.093 239.086 li
487.145 239.089 li
486.431 239.071 li
486.483 239.071 li
485.768 239.089 li
485.821 239.086 li
485.116 239.142 li
485.167 239.136 li
484.473 239.227 li
484.524 239.219 li
483.84 239.345 li
483.891 239.334 li
483.219 239.494 li
483.269 239.481 li
482.61 239.674 li
482.658 239.658 li
482.013 239.884 li
482.061 239.866 li
481.43 240.122 li
481.476 240.102 li
480.861 240.389 li
480.906 240.366 li
480.307 240.682 li
480.35 240.658 li
479.769 241.003 li
479.811 240.977 li
479.247 241.349 li
479.287 241.321 li
478.743 241.72 li
478.781 241.691 li
478.257 242.116 li
478.293 242.085 li
477.79 242.535 li
477.825 242.502 li
477.343 242.976 li
477.376 242.941 li
476.916 243.438 li
476.948 243.403 li
476.511 243.922 li
476.541 243.885 li
476.129 244.426 li
476.157 244.387 li
475.77 244.948 li
475.796 244.909 li
475.435 245.489 li
475.459 245.448 li
475.125 246.048 li
475.147 246.005 li
474.84 246.622 li
474.861 246.579 li
474.583 247.213 li
474.601 247.169 li
474.352 247.819 li
474.369 247.773 li
474.15 248.438 li
474.164 248.392 li
473.977 249.071 li
473.989 249.024 li
473.834 249.716 li
473.843 249.668 li
473.721 250.373 li
473.729 250.325 li
473.64 251.041 li
473.645 250.992 li
473.591 251.719 li
473.594 251.67 li
473.576 252.406 li
0 0 0 0 cmyk
f
472.55 316.144 mo
472.576 308.219 478.791 301.811 486.457 301.811 cv
494.123 301.811 500.337 308.219 500.337 316.122 cv
500.337 324.026 494.123 330.433 486.457 330.433 cv
478.791 330.433 472.576 324.026 472.55 316.144 cv
.658076 0 .502251 0 cmyk
ef
471.594 315.361 mo
471.597 315.312 li
471.65 314.586 li
474.324 295.325 500.623 296.778 501.337 316.147 cv
501.319 316.883 li
501.317 316.932 li
499.454 336.697 472.433 335.948 471.576 316.147 cv
471.576 316.098 li
471.594 315.361 li
cp
473.576 316.147 mo
473.576 316.098 li
473.594 316.834 li
473.591 316.785 li
473.645 317.512 li
473.64 317.463 li
473.729 318.18 li
473.721 318.131 li
473.843 318.836 li
473.834 318.788 li
473.989 319.481 li
473.977 319.433 li
474.164 320.113 li
474.15 320.066 li
474.369 320.731 li
474.352 320.686 li
474.601 321.336 li
474.583 321.291 li
474.861 321.925 li
474.84 321.882 li
475.147 322.499 li
475.125 322.457 li
475.459 323.056 li
475.435 323.015 li
475.796 323.596 li
475.77 323.556 li
476.157 324.117 li
476.129 324.079 li
476.541 324.619 li
476.511 324.582 li
476.948 325.102 li
476.916 325.066 li
477.376 325.563 li
477.343 325.529 li
477.825 326.003 li
477.79 325.97 li
478.293 326.42 li
478.257 326.389 li
478.781 326.813 li
478.743 326.784 li
479.287 327.183 li
479.247 327.155 li
479.811 327.527 li
479.769 327.501 li
480.35 327.846 li
480.307 327.822 li
480.906 328.138 li
480.861 328.116 li
481.476 328.402 li
481.43 328.382 li
482.061 328.639 li
482.013 328.621 li
482.658 328.846 li
482.61 328.83 li
483.269 329.023 li
483.219 329.01 li
483.891 329.17 li
483.84 329.159 li
484.524 329.285 li
484.473 329.277 li
485.167 329.368 li
485.116 329.363 li
485.821 329.418 li
485.768 329.415 li
486.483 329.434 li
486.431 329.434 li
487.145 329.415 li
487.093 329.418 li
487.798 329.363 li
487.746 329.368 li
488.441 329.277 li
488.39 329.285 li
489.073 329.159 li
489.023 329.17 li
489.694 329.01 li
489.645 329.023 li
490.303 328.83 li
490.255 328.846 li
490.9 328.621 li
490.853 328.639 li
491.483 328.382 li
491.437 328.402 li
492.052 328.116 li
492.008 328.138 li
492.606 327.822 li
492.563 327.846 li
493.144 327.501 li
493.103 327.527 li
493.666 327.155 li
493.626 327.183 li
494.17 326.784 li
494.132 326.813 li
494.657 326.389 li
494.62 326.42 li
495.124 325.97 li
495.089 326.003 li
495.571 325.529 li
495.538 325.563 li
495.997 325.066 li
495.966 325.102 li
496.402 324.582 li
496.372 324.619 li
496.784 324.079 li
496.757 324.117 li
497.144 323.556 li
497.117 323.596 li
497.479 323.015 li
497.454 323.056 li
497.789 322.457 li
497.766 322.499 li
498.073 321.882 li
498.053 321.925 li
498.331 321.291 li
498.312 321.336 li
498.561 320.686 li
498.545 320.731 li
498.763 320.066 li
498.749 320.113 li
498.936 319.433 li
498.924 319.481 li
499.079 318.788 li
499.07 318.836 li
499.192 318.131 li
499.185 318.18 li
499.273 317.463 li
499.268 317.512 li
499.322 316.785 li
499.32 316.834 li
499.338 316.098 li
499.338 316.147 li
499.32 315.411 li
499.322 315.46 li
499.268 314.733 li
499.273 314.782 li
499.185 314.065 li
499.192 314.114 li
499.07 313.409 li
499.079 313.457 li
498.924 312.764 li
498.936 312.811 li
498.749 312.132 li
498.763 312.179 li
498.545 311.514 li
498.561 311.559 li
498.312 310.909 li
498.331 310.954 li
498.053 310.32 li
498.073 310.363 li
497.766 309.746 li
497.789 309.788 li
497.454 309.189 li
497.479 309.23 li
497.117 308.649 li
497.144 308.689 li
496.757 308.128 li
496.784 308.166 li
496.372 307.626 li
496.402 307.663 li
495.966 307.143 li
495.997 307.179 li
495.538 306.682 li
495.571 306.716 li
495.089 306.242 li
495.124 306.275 li
494.62 305.825 li
494.657 305.856 li
494.132 305.432 li
494.17 305.461 li
493.626 305.062 li
493.666 305.09 li
493.103 304.718 li
493.144 304.744 li
492.563 304.399 li
492.606 304.423 li
492.008 304.107 li
492.052 304.129 li
491.437 303.842 li
491.483 303.862 li
490.853 303.606 li
490.9 303.624 li
490.255 303.399 li
490.303 303.415 li
489.645 303.222 li
489.694 303.235 li
489.023 303.075 li
489.073 303.086 li
488.39 302.96 li
488.441 302.968 li
487.746 302.877 li
487.798 302.882 li
487.093 302.827 li
487.145 302.83 li
486.431 302.811 li
486.483 302.811 li
485.768 302.83 li
485.821 302.827 li
485.116 302.882 li
485.167 302.877 li
484.473 302.968 li
484.524 302.96 li
483.84 303.086 li
483.891 303.075 li
483.219 303.235 li
483.269 303.222 li
482.61 303.415 li
482.658 303.399 li
482.013 303.624 li
482.061 303.606 li
481.43 303.862 li
481.476 303.842 li
480.861 304.129 li
480.906 304.107 li
480.307 304.423 li
480.35 304.399 li
479.769 304.744 li
479.811 304.718 li
479.247 305.09 li
479.287 305.062 li
478.743 305.461 li
478.781 305.432 li
478.257 305.856 li
478.293 305.825 li
477.79 306.275 li
477.825 306.242 li
477.343 306.716 li
477.376 306.682 li
476.916 307.179 li
476.948 307.143 li
476.511 307.663 li
476.541 307.626 li
476.129 308.166 li
476.157 308.128 li
475.77 308.689 li
475.796 308.649 li
475.435 309.23 li
475.459 309.189 li
475.125 309.788 li
475.147 309.746 li
474.84 310.363 li
474.861 310.32 li
474.583 310.954 li
474.601 310.909 li
474.352 311.559 li
474.369 311.514 li
474.15 312.179 li
474.164 312.132 li
473.977 312.811 li
473.989 312.764 li
473.834 313.457 li
473.843 313.409 li
473.721 314.114 li
473.729 314.065 li
473.64 314.782 li
473.645 314.733 li
473.591 315.46 li
473.594 315.411 li
473.576 316.147 li
0 0 0 0 cmyk
f
472.55 379.984 mo
472.576 372.044 478.791 365.636 486.457 365.636 cv
494.123 365.636 500.337 372.044 500.337 379.947 cv
500.337 387.851 494.123 394.258 486.457 394.258 cv
478.791 394.258 472.576 387.851 472.55 379.984 cv
.658076 0 .502251 0 cmyk
ef
471.594 379.186 mo
471.597 379.137 li
471.65 378.41 li
474.325 359.149 500.623 360.604 501.337 379.972 cv
501.319 380.708 li
501.317 380.757 li
499.454 400.522 472.433 399.773 471.576 379.972 cv
471.576 379.923 li
471.594 379.186 li
cp
473.576 379.972 mo
473.576 379.923 li
473.594 380.659 li
473.591 380.61 li
473.645 381.337 li
473.64 381.288 li
473.729 382.004 li
473.721 381.956 li
473.843 382.661 li
473.834 382.613 li
473.989 383.305 li
473.977 383.258 li
474.164 383.937 li
474.15 383.891 li
474.369 384.556 li
474.352 384.511 li
474.601 385.161 li
474.583 385.116 li
474.861 385.75 li
474.84 385.707 li
475.147 386.324 li
475.125 386.282 li
475.459 386.881 li
475.435 386.84 li
475.796 387.421 li
475.77 387.381 li
476.157 387.942 li
476.129 387.904 li
476.541 388.444 li
476.511 388.407 li
476.948 388.926 li
476.916 388.891 li
477.376 389.388 li
477.343 389.354 li
477.825 389.827 li
477.79 389.795 li
478.293 390.244 li
478.257 390.213 li
478.781 390.638 li
478.743 390.609 li
479.287 391.008 li
479.247 390.98 li
479.811 391.352 li
479.769 391.326 li
480.35 391.671 li
480.307 391.647 li
480.906 391.963 li
480.861 391.941 li
481.476 392.227 li
481.43 392.207 li
482.061 392.463 li
482.013 392.446 li
482.658 392.671 li
482.61 392.655 li
483.269 392.848 li
483.219 392.835 li
483.891 392.995 li
483.84 392.984 li
484.524 393.11 li
484.473 393.102 li
485.167 393.193 li
485.116 393.187 li
485.821 393.243 li
485.768 393.24 li
486.483 393.259 li
486.431 393.259 li
487.145 393.24 li
487.093 393.243 li
487.798 393.187 li
487.746 393.193 li
488.441 393.102 li
488.39 393.11 li
489.073 392.984 li
489.023 392.995 li
489.694 392.835 li
489.645 392.848 li
490.303 392.655 li
490.255 392.671 li
490.9 392.446 li
490.853 392.463 li
491.483 392.207 li
491.437 392.227 li
492.052 391.941 li
492.008 391.963 li
492.606 391.647 li
492.563 391.671 li
493.144 391.326 li
493.103 391.352 li
493.666 390.98 li
493.626 391.008 li
494.17 390.609 li
494.132 390.638 li
494.657 390.213 li
494.62 390.244 li
495.124 389.795 li
495.089 389.827 li
495.571 389.354 li
495.538 389.388 li
495.997 388.891 li
495.966 388.926 li
496.402 388.407 li
496.372 388.444 li
496.784 387.904 li
496.757 387.942 li
497.144 387.381 li
497.117 387.421 li
497.479 386.84 li
497.454 386.881 li
497.789 386.282 li
497.766 386.324 li
498.073 385.707 li
498.053 385.75 li
498.331 385.116 li
498.312 385.161 li
498.561 384.511 li
498.545 384.556 li
498.763 383.891 li
498.749 383.937 li
498.936 383.258 li
498.924 383.305 li
499.079 382.613 li
499.07 382.661 li
499.192 381.956 li
499.185 382.004 li
499.273 381.288 li
499.268 381.337 li
499.322 380.61 li
499.32 380.659 li
499.338 379.923 li
499.338 379.972 li
499.32 379.235 li
499.322 379.284 li
499.268 378.558 li
499.273 378.606 li
499.185 377.89 li
499.192 377.939 li
499.07 377.234 li
499.079 377.282 li
498.924 376.589 li
498.936 376.636 li
498.749 375.957 li
498.763 376.003 li
498.545 375.338 li
498.561 375.384 li
498.312 374.734 li
498.331 374.778 li
498.053 374.144 li
498.073 374.188 li
497.766 373.571 li
497.789 373.613 li
497.454 373.014 li
497.479 373.055 li
497.117 372.474 li
497.144 372.514 li
496.757 371.953 li
496.784 371.991 li
496.372 371.45 li
496.402 371.487 li
495.966 370.968 li
495.997 371.004 li
495.538 370.507 li
495.571 370.541 li
495.089 370.067 li
495.124 370.1 li
494.62 369.65 li
494.657 369.681 li
494.132 369.256 li
494.17 369.286 li
493.626 368.887 li
493.666 368.915 li
493.103 368.542 li
493.144 368.568 li
492.563 368.224 li
492.606 368.248 li
492.008 367.932 li
492.052 367.954 li
491.437 367.667 li
491.483 367.687 li
490.853 367.431 li
490.9 367.449 li
490.255 367.224 li
490.303 367.239 li
489.645 367.047 li
489.694 367.06 li
489.023 366.9 li
489.073 366.911 li
488.39 366.785 li
488.441 366.793 li
487.746 366.702 li
487.798 366.707 li
487.093 366.652 li
487.145 366.655 li
486.431 366.636 li
486.483 366.636 li
485.768 366.655 li
485.821 366.652 li
485.116 366.707 li
485.167 366.702 li
484.473 366.793 li
484.524 366.785 li
483.84 366.911 li
483.891 366.9 li
483.219 367.06 li
483.269 367.047 li
482.61 367.239 li
482.658 367.224 li
482.013 367.449 li
482.061 367.431 li
481.43 367.687 li
481.476 367.667 li
480.861 367.954 li
480.906 367.932 li
480.307 368.248 li
480.35 368.224 li
479.769 368.568 li
479.811 368.542 li
479.247 368.915 li
479.287 368.887 li
478.743 369.286 li
478.781 369.256 li
478.257 369.681 li
478.293 369.65 li
477.79 370.1 li
477.825 370.067 li
477.343 370.541 li
477.376 370.507 li
476.916 371.004 li
476.948 370.968 li
476.511 371.487 li
476.541 371.45 li
476.129 371.991 li
476.157 371.953 li
475.77 372.514 li
475.796 372.474 li
475.435 373.055 li
475.459 373.014 li
475.125 373.613 li
475.147 373.571 li
474.84 374.188 li
474.861 374.144 li
474.583 374.778 li
474.601 374.734 li
474.352 375.384 li
474.369 375.338 li
474.15 376.003 li
474.164 375.957 li
473.977 376.636 li
473.989 376.589 li
473.834 377.282 li
473.843 377.234 li
473.721 377.939 li
473.729 377.89 li
473.64 378.606 li
473.645 378.558 li
473.591 379.284 li
473.594 379.235 li
473.576 379.972 li
0 0 0 0 cmyk
f
473.63 443.704 mo
473.62 435.758 479.834 429.351 487.5 429.351 cv
495.166 429.351 501.381 435.758 501.381 443.662 cv
501.381 451.565 495.166 457.973 487.5 457.973 cv
479.834 457.973 473.62 451.565 473.63 443.704 cv
.658076 0 .502251 0 cmyk
ef
472.638 442.901 mo
472.64 442.852 li
472.694 442.125 li
475.367 422.864 501.668 424.318 502.38 443.686 cv
502.362 444.423 li
502.36 444.472 li
500.498 464.236 473.475 463.487 472.62 443.686 cv
472.62 443.637 li
472.638 442.901 li
cp
474.619 443.686 mo
474.619 443.637 li
474.637 444.374 li
474.635 444.325 li
474.689 445.051 li
474.684 445.003 li
474.772 445.719 li
474.765 445.67 li
474.887 446.375 li
474.877 446.327 li
475.032 447.02 li
475.021 446.973 li
475.208 447.652 li
475.194 447.606 li
475.412 448.27 li
475.396 448.225 li
475.644 448.875 li
475.626 448.831 li
475.904 449.464 li
475.884 449.421 li
476.191 450.038 li
476.168 449.996 li
476.502 450.595 li
476.478 450.554 li
476.839 451.135 li
476.813 451.095 li
477.2 451.656 li
477.173 451.618 li
477.585 452.159 li
477.555 452.122 li
477.991 452.641 li
477.96 452.605 li
478.419 453.102 li
478.386 453.068 li
478.868 453.542 li
478.833 453.509 li
479.337 453.959 li
479.3 453.928 li
479.825 454.353 li
479.786 454.323 li
480.331 454.722 li
480.291 454.694 li
480.854 455.067 li
480.813 455.041 li
481.394 455.385 li
481.351 455.361 li
481.949 455.677 li
481.905 455.655 li
482.52 455.942 li
482.474 455.922 li
483.104 456.178 li
483.057 456.16 li
483.702 456.385 li
483.654 456.37 li
484.312 456.562 li
484.263 456.549 li
484.934 456.709 li
484.884 456.698 li
485.567 456.824 li
485.516 456.816 li
486.211 456.907 li
486.159 456.902 li
486.864 456.957 li
486.812 456.954 li
487.526 456.973 li
487.474 456.973 li
488.188 456.954 li
488.136 456.957 li
488.841 456.902 li
488.79 456.907 li
489.484 456.816 li
489.433 456.824 li
490.117 456.698 li
490.066 456.709 li
490.738 456.549 li
490.688 456.562 li
491.347 456.37 li
491.298 456.385 li
491.943 456.16 li
491.896 456.178 li
492.527 455.922 li
492.481 455.942 li
493.096 455.655 li
493.051 455.677 li
493.65 455.361 li
493.607 455.385 li
494.188 455.041 li
494.146 455.067 li
494.71 454.694 li
494.67 454.722 li
495.214 454.323 li
495.176 454.353 li
495.7 453.928 li
495.663 453.959 li
496.167 453.509 li
496.132 453.542 li
496.614 453.068 li
496.581 453.102 li
497.041 452.605 li
497.009 452.641 li
497.445 452.122 li
497.416 452.159 li
497.828 451.618 li
497.8 451.656 li
498.187 451.095 li
498.161 451.135 li
498.522 450.554 li
498.498 450.595 li
498.832 449.996 li
498.81 450.038 li
499.116 449.421 li
499.096 449.464 li
499.374 448.831 li
499.356 448.875 li
499.604 448.225 li
499.588 448.27 li
499.807 447.606 li
499.793 447.652 li
499.98 446.973 li
499.968 447.02 li
500.123 446.327 li
500.113 446.375 li
500.236 445.67 li
500.228 445.719 li
500.317 445.003 li
500.312 445.051 li
500.365 444.325 li
500.363 444.374 li
500.381 443.637 li
500.381 443.686 li
500.363 442.95 li
500.365 442.999 li
500.312 442.272 li
500.317 442.321 li
500.228 441.605 li
500.236 441.653 li
500.113 440.948 li
500.123 440.996 li
499.968 440.304 li
499.98 440.351 li
499.793 439.672 li
499.807 439.718 li
499.588 439.053 li
499.604 439.098 li
499.356 438.448 li
499.374 438.493 li
499.096 437.859 li
499.116 437.902 li
498.81 437.285 li
498.832 437.327 li
498.498 436.728 li
498.522 436.769 li
498.161 436.188 li
498.187 436.228 li
497.8 435.667 li
497.828 435.705 li
497.416 435.165 li
497.445 435.202 li
497.009 434.683 li
497.041 434.718 li
496.581 434.221 li
496.614 434.255 li
496.132 433.782 li
496.167 433.814 li
495.663 433.364 li
495.7 433.396 li
495.176 432.971 li
495.214 433 li
494.67 432.601 li
494.71 432.629 li
494.146 432.257 li
494.188 432.283 li
493.607 431.938 li
493.65 431.962 li
493.051 431.646 li
493.096 431.668 li
492.481 431.382 li
492.527 431.402 li
491.896 431.145 li
491.943 431.163 li
491.298 430.938 li
491.347 430.954 li
490.688 430.761 li
490.738 430.774 li
490.066 430.614 li
490.117 430.625 li
489.433 430.499 li
489.484 430.507 li
488.79 430.416 li
488.841 430.422 li
488.136 430.366 li
488.188 430.369 li
487.474 430.35 li
487.526 430.35 li
486.812 430.369 li
486.864 430.366 li
486.159 430.422 li
486.211 430.416 li
485.516 430.507 li
485.567 430.499 li
484.884 430.625 li
484.934 430.614 li
484.263 430.774 li
484.312 430.761 li
483.654 430.954 li
483.702 430.938 li
483.057 431.163 li
483.104 431.145 li
482.474 431.402 li
482.52 431.382 li
481.905 431.668 li
481.949 431.646 li
481.351 431.962 li
481.394 431.938 li
480.813 432.283 li
480.854 432.257 li
480.291 432.629 li
480.331 432.601 li
479.786 433 li
479.825 432.971 li
479.3 433.396 li
479.337 433.364 li
478.833 433.814 li
478.868 433.782 li
478.386 434.255 li
478.419 434.221 li
477.96 434.718 li
477.991 434.683 li
477.555 435.202 li
477.585 435.165 li
477.173 435.705 li
477.2 435.667 li
476.813 436.228 li
476.839 436.188 li
476.478 436.769 li
476.502 436.728 li
476.168 437.327 li
476.191 437.285 li
475.884 437.902 li
475.904 437.859 li
475.626 438.493 li
475.644 438.448 li
475.396 439.098 li
475.412 439.053 li
475.194 439.718 li
475.208 439.672 li
475.021 440.351 li
475.032 440.304 li
474.877 440.996 li
474.887 440.948 li
474.765 441.653 li
474.772 441.605 li
474.684 442.321 li
474.689 442.272 li
474.635 442.999 li
474.637 442.95 li
474.619 443.686 li
0 0 0 0 cmyk
f
552.71 252.184 mo
552.672 244.229 558.887 237.821 566.553 237.821 cv
574.219 237.821 580.434 244.229 580.434 252.132 cv
580.434 260.036 574.219 266.443 566.553 266.443 cv
558.887 266.443 552.672 260.036 552.71 252.184 cv
.658076 0 .502251 0 cmyk
ef
551.691 251.371 mo
551.693 251.322 li
551.747 250.596 li
554.42 231.335 580.72 232.789 581.433 252.157 cv
581.415 252.893 li
581.413 252.942 li
579.551 272.707 552.528 271.958 551.673 252.157 cv
551.673 252.108 li
551.691 251.371 li
cp
553.672 252.157 mo
553.672 252.108 li
553.69 252.844 li
553.688 252.795 li
553.741 253.522 li
553.737 253.473 li
553.825 254.19 li
553.818 254.141 li
553.94 254.846 li
553.93 254.798 li
554.085 255.491 li
554.074 255.443 li
554.261 256.123 li
554.247 256.076 li
554.465 256.741 li
554.449 256.696 li
554.697 257.346 li
554.679 257.301 li
554.957 257.935 li
554.937 257.892 li
555.243 258.509 li
555.221 258.467 li
555.555 259.066 li
555.531 259.025 li
555.892 259.606 li
555.866 259.566 li
556.253 260.127 li
556.225 260.089 li
556.637 260.629 li
556.608 260.592 li
557.044 261.112 li
557.013 261.076 li
557.472 261.573 li
557.439 261.539 li
557.921 262.013 li
557.886 261.98 li
558.39 262.43 li
558.353 262.399 li
558.878 262.823 li
558.839 262.794 li
559.384 263.193 li
559.344 263.165 li
559.907 263.537 li
559.865 263.511 li
560.447 263.856 li
560.404 263.832 li
561.002 264.148 li
560.958 264.126 li
561.572 264.412 li
561.527 264.392 li
562.157 264.649 li
562.11 264.631 li
562.755 264.856 li
562.706 264.84 li
563.365 265.033 li
563.316 265.02 li
563.987 265.18 li
563.937 265.169 li
564.62 265.295 li
564.569 265.287 li
565.264 265.378 li
565.212 265.373 li
565.917 265.428 li
565.865 265.425 li
566.579 265.444 li
566.527 265.444 li
567.241 265.425 li
567.189 265.428 li
567.894 265.373 li
567.842 265.378 li
568.537 265.287 li
568.486 265.295 li
569.169 265.169 li
569.119 265.18 li
569.791 265.02 li
569.741 265.033 li
570.4 264.84 li
570.351 264.856 li
570.996 264.631 li
570.949 264.649 li
571.579 264.392 li
571.533 264.412 li
572.148 264.126 li
572.104 264.148 li
572.702 263.832 li
572.659 263.856 li
573.241 263.511 li
573.199 263.537 li
573.762 263.165 li
573.723 263.193 li
574.267 262.794 li
574.228 262.823 li
574.753 262.399 li
574.716 262.43 li
575.22 261.98 li
575.185 262.013 li
575.667 261.539 li
575.634 261.573 li
576.093 261.076 li
576.062 261.112 li
576.498 260.592 li
576.469 260.629 li
576.881 260.089 li
576.853 260.127 li
577.24 259.566 li
577.214 259.606 li
577.575 259.025 li
577.551 259.066 li
577.885 258.467 li
577.863 258.509 li
578.169 257.892 li
578.149 257.935 li
578.427 257.301 li
578.409 257.346 li
578.657 256.696 li
578.641 256.741 li
578.859 256.076 li
578.845 256.123 li
579.033 255.443 li
579.021 255.491 li
579.176 254.798 li
579.166 254.846 li
579.288 254.141 li
579.281 254.19 li
579.369 253.473 li
579.365 253.522 li
579.418 252.795 li
579.416 252.844 li
579.434 252.108 li
579.434 252.157 li
579.416 251.421 li
579.418 251.47 li
579.365 250.743 li
579.369 250.792 li
579.281 250.075 li
579.288 250.124 li
579.166 249.419 li
579.176 249.467 li
579.021 248.774 li
579.033 248.821 li
578.845 248.142 li
578.859 248.189 li
578.641 247.524 li
578.657 247.569 li
578.409 246.919 li
578.427 246.964 li
578.149 246.33 li
578.169 246.373 li
577.863 245.756 li
577.885 245.798 li
577.551 245.199 li
577.575 245.24 li
577.214 244.659 li
577.24 244.699 li
576.853 244.138 li
576.881 244.176 li
576.469 243.636 li
576.498 243.673 li
576.062 243.153 li
576.093 243.189 li
575.634 242.692 li
575.667 242.726 li
575.185 242.252 li
575.22 242.285 li
574.716 241.835 li
574.753 241.866 li
574.228 241.442 li
574.267 241.471 li
573.723 241.072 li
573.762 241.1 li
573.199 240.728 li
573.241 240.754 li
572.659 240.409 li
572.702 240.433 li
572.104 240.117 li
572.148 240.139 li
571.533 239.852 li
571.579 239.872 li
570.949 239.616 li
570.996 239.634 li
570.351 239.409 li
570.4 239.425 li
569.741 239.232 li
569.791 239.245 li
569.119 239.085 li
569.169 239.096 li
568.486 238.97 li
568.537 238.978 li
567.842 238.887 li
567.894 238.892 li
567.189 238.837 li
567.241 238.84 li
566.527 238.821 li
566.579 238.821 li
565.865 238.84 li
565.917 238.837 li
565.212 238.892 li
565.264 238.887 li
564.569 238.978 li
564.62 238.97 li
563.937 239.096 li
563.987 239.085 li
563.316 239.245 li
563.365 239.232 li
562.706 239.425 li
562.755 239.409 li
562.11 239.634 li
562.157 239.616 li
561.527 239.872 li
561.572 239.852 li
560.958 240.139 li
561.002 240.117 li
560.404 240.433 li
560.447 240.409 li
559.865 240.754 li
559.907 240.728 li
559.344 241.1 li
559.384 241.072 li
558.839 241.471 li
558.878 241.442 li
558.353 241.866 li
558.39 241.835 li
557.886 242.285 li
557.921 242.252 li
557.439 242.726 li
557.472 242.692 li
557.013 243.189 li
557.044 243.153 li
556.608 243.673 li
556.637 243.636 li
556.225 244.176 li
556.253 244.138 li
555.866 244.699 li
555.892 244.659 li
555.531 245.24 li
555.555 245.199 li
555.221 245.798 li
555.243 245.756 li
554.937 246.373 li
554.957 246.33 li
554.679 246.964 li
554.697 246.919 li
554.449 247.569 li
554.465 247.524 li
554.247 248.189 li
554.261 248.142 li
554.074 248.821 li
554.085 248.774 li
553.93 249.467 li
553.94 249.419 li
553.818 250.124 li
553.825 250.075 li
553.737 250.792 li
553.741 250.743 li
553.688 251.47 li
553.69 251.421 li
553.672 252.157 li
0 0 0 0 cmyk
f
552.71 315.904 mo
552.672 307.969 558.887 301.562 566.553 301.562 cv
574.219 301.562 580.434 307.969 580.434 315.873 cv
580.434 323.777 574.219 330.184 566.553 330.184 cv
558.887 330.184 552.672 323.777 552.71 315.904 cv
.658076 0 .502251 0 cmyk
ef
551.691 315.112 mo
551.693 315.063 li
551.747 314.336 li
554.421 295.075 580.72 296.53 581.433 315.898 cv
581.415 316.634 li
581.413 316.683 li
579.55 336.447 552.529 335.699 551.673 315.898 cv
551.673 315.849 li
551.691 315.112 li
cp
553.672 315.898 mo
553.672 315.849 li
553.69 316.585 li
553.688 316.536 li
553.741 317.263 li
553.737 317.214 li
553.825 317.93 li
553.818 317.882 li
553.94 318.587 li
553.93 318.539 li
554.085 319.231 li
554.074 319.184 li
554.261 319.863 li
554.247 319.817 li
554.465 320.482 li
554.449 320.436 li
554.697 321.086 li
554.679 321.042 li
554.957 321.676 li
554.937 321.633 li
555.243 322.25 li
555.221 322.207 li
555.555 322.807 li
555.531 322.766 li
555.892 323.346 li
555.866 323.307 li
556.253 323.868 li
556.225 323.829 li
556.637 324.37 li
556.608 324.333 li
557.044 324.852 li
557.013 324.816 li
557.472 325.313 li
557.439 325.279 li
557.921 325.753 li
557.886 325.72 li
558.39 326.17 li
558.353 326.139 li
558.878 326.564 li
558.839 326.534 li
559.384 326.933 li
559.344 326.906 li
559.907 327.278 li
559.865 327.252 li
560.447 327.597 li
560.404 327.572 li
561.002 327.889 li
560.958 327.866 li
561.572 328.153 li
561.527 328.133 li
562.157 328.389 li
562.11 328.371 li
562.755 328.596 li
562.706 328.581 li
563.365 328.774 li
563.316 328.761 li
563.987 328.92 li
563.937 328.91 li
564.62 329.036 li
564.569 329.028 li
565.264 329.119 li
565.212 329.113 li
565.917 329.168 li
565.865 329.166 li
566.579 329.184 li
566.527 329.184 li
567.241 329.166 li
567.189 329.168 li
567.894 329.113 li
567.842 329.119 li
568.537 329.028 li
568.486 329.036 li
569.169 328.91 li
569.119 328.92 li
569.791 328.761 li
569.741 328.774 li
570.4 328.581 li
570.351 328.596 li
570.996 328.371 li
570.949 328.389 li
571.579 328.133 li
571.533 328.153 li
572.148 327.866 li
572.104 327.889 li
572.702 327.572 li
572.659 327.597 li
573.241 327.252 li
573.199 327.278 li
573.762 326.906 li
573.723 326.933 li
574.267 326.534 li
574.228 326.564 li
574.753 326.139 li
574.716 326.17 li
575.22 325.72 li
575.185 325.753 li
575.667 325.279 li
575.634 325.313 li
576.093 324.816 li
576.062 324.852 li
576.498 324.333 li
576.469 324.37 li
576.881 323.829 li
576.853 323.868 li
577.24 323.307 li
577.214 323.346 li
577.575 322.766 li
577.551 322.807 li
577.885 322.207 li
577.863 322.25 li
578.169 321.633 li
578.149 321.676 li
578.427 321.042 li
578.409 321.086 li
578.657 320.436 li
578.641 320.482 li
578.859 319.817 li
578.845 319.863 li
579.033 319.184 li
579.021 319.231 li
579.176 318.539 li
579.166 318.587 li
579.288 317.882 li
579.281 317.93 li
579.369 317.214 li
579.365 317.263 li
579.418 316.536 li
579.416 316.585 li
579.434 315.849 li
579.434 315.898 li
579.416 315.161 li
579.418 315.21 li
579.365 314.483 li
579.369 314.532 li
579.281 313.816 li
579.288 313.864 li
579.166 313.16 li
579.176 313.207 li
579.021 312.515 li
579.033 312.562 li
578.845 311.883 li
578.859 311.929 li
578.641 311.264 li
578.657 311.31 li
578.409 310.66 li
578.427 310.704 li
578.149 310.07 li
578.169 310.114 li
577.863 309.496 li
577.885 309.539 li
577.551 308.939 li
577.575 308.98 li
577.214 308.4 li
577.24 308.439 li
576.853 307.878 li
576.881 307.917 li
576.469 307.376 li
576.498 307.413 li
576.062 306.894 li
576.093 306.93 li
575.634 306.433 li
575.667 306.467 li
575.185 305.993 li
575.22 306.026 li
574.716 305.576 li
574.753 305.607 li
574.228 305.182 li
574.267 305.212 li
573.723 304.813 li
573.762 304.84 li
573.199 304.468 li
573.241 304.494 li
572.659 304.149 li
572.702 304.174 li
572.104 303.858 li
572.148 303.88 li
571.533 303.593 li
571.579 303.613 li
570.949 303.357 li
570.996 303.375 li
570.351 303.15 li
570.4 303.165 li
569.741 302.972 li
569.791 302.985 li
569.119 302.826 li
569.169 302.836 li
568.486 302.71 li
568.537 302.718 li
567.842 302.627 li
567.894 302.633 li
567.189 302.578 li
567.241 302.58 li
566.527 302.562 li
566.579 302.562 li
565.865 302.58 li
565.917 302.578 li
565.212 302.633 li
565.264 302.627 li
564.569 302.718 li
564.62 302.71 li
563.937 302.836 li
563.987 302.826 li
563.316 302.985 li
563.365 302.972 li
562.706 303.165 li
562.755 303.15 li
562.11 303.375 li
562.157 303.357 li
561.527 303.613 li
561.572 303.593 li
560.958 303.88 li
561.002 303.858 li
560.404 304.174 li
560.447 304.149 li
559.865 304.494 li
559.907 304.468 li
559.344 304.84 li
559.384 304.813 li
558.839 305.212 li
558.878 305.182 li
558.353 305.607 li
558.39 305.576 li
557.886 306.026 li
557.921 305.993 li
557.439 306.467 li
557.472 306.433 li
557.013 306.93 li
557.044 306.894 li
556.608 307.413 li
556.637 307.376 li
556.225 307.917 li
556.253 307.878 li
555.866 308.439 li
555.892 308.4 li
555.531 308.98 li
555.555 308.939 li
555.221 309.539 li
555.243 309.496 li
554.937 310.114 li
554.957 310.07 li
554.679 310.704 li
554.697 310.66 li
554.449 311.31 li
554.465 311.264 li
554.247 311.929 li
554.261 311.883 li
554.074 312.562 li
554.085 312.515 li
553.93 313.207 li
553.94 313.16 li
553.818 313.864 li
553.825 313.816 li
553.737 314.532 li
553.741 314.483 li
553.688 315.21 li
553.69 315.161 li
553.672 315.898 li
0 0 0 0 cmyk
f
552.71 379.744 mo
552.672 371.794 558.887 365.387 566.553 365.387 cv
574.219 365.387 580.434 371.794 580.434 379.698 cv
580.434 387.602 574.219 394.009 566.553 394.009 cv
558.887 394.009 552.672 387.602 552.71 379.744 cv
.658076 0 .502251 0 cmyk
ef
551.691 378.937 mo
551.693 378.888 li
551.747 378.161 li
554.42 358.9 580.72 360.354 581.433 379.722 cv
581.415 380.459 li
581.413 380.508 li
579.55 400.273 552.528 399.523 551.673 379.722 cv
551.673 379.673 li
551.691 378.937 li
cp
553.672 379.722 mo
553.672 379.673 li
553.69 380.41 li
553.688 380.361 li
553.741 381.087 li
553.737 381.039 li
553.825 381.755 li
553.818 381.707 li
553.94 382.411 li
553.93 382.364 li
554.085 383.056 li
554.074 383.009 li
554.261 383.688 li
554.247 383.642 li
554.465 384.307 li
554.449 384.261 li
554.697 384.911 li
554.679 384.867 li
554.957 385.501 li
554.937 385.457 li
555.243 386.074 li
555.221 386.032 li
555.555 386.632 li
555.531 386.591 li
555.892 387.171 li
555.866 387.131 li
556.253 387.693 li
556.225 387.654 li
556.637 388.195 li
556.608 388.158 li
557.044 388.677 li
557.013 388.641 li
557.472 389.138 li
557.439 389.104 li
557.921 389.578 li
557.886 389.545 li
558.39 389.995 li
558.353 389.964 li
558.878 390.389 li
558.839 390.359 li
559.384 390.758 li
559.344 390.73 li
559.907 391.103 li
559.865 391.077 li
560.447 391.421 li
560.404 391.397 li
561.002 391.713 li
560.958 391.691 li
561.572 391.978 li
561.527 391.958 li
562.157 392.214 li
562.11 392.196 li
562.755 392.421 li
562.706 392.406 li
563.365 392.599 li
563.316 392.585 li
563.987 392.745 li
563.937 392.735 li
564.62 392.86 li
564.569 392.852 li
565.264 392.943 li
565.212 392.938 li
565.917 392.993 li
565.865 392.991 li
566.579 393.009 li
566.527 393.009 li
567.241 392.991 li
567.189 392.993 li
567.894 392.938 li
567.842 392.943 li
568.537 392.852 li
568.486 392.86 li
569.169 392.735 li
569.119 392.745 li
569.791 392.585 li
569.741 392.599 li
570.4 392.406 li
570.351 392.421 li
570.996 392.196 li
570.949 392.214 li
571.579 391.958 li
571.533 391.978 li
572.148 391.691 li
572.104 391.713 li
572.702 391.397 li
572.659 391.421 li
573.241 391.077 li
573.199 391.103 li
573.762 390.73 li
573.723 390.758 li
574.267 390.359 li
574.228 390.389 li
574.753 389.964 li
574.716 389.995 li
575.22 389.545 li
575.185 389.578 li
575.667 389.104 li
575.634 389.138 li
576.093 388.641 li
576.062 388.677 li
576.498 388.158 li
576.469 388.195 li
576.881 387.654 li
576.853 387.693 li
577.24 387.131 li
577.214 387.171 li
577.575 386.591 li
577.551 386.632 li
577.885 386.032 li
577.863 386.074 li
578.169 385.457 li
578.149 385.501 li
578.427 384.867 li
578.409 384.911 li
578.657 384.261 li
578.641 384.307 li
578.859 383.642 li
578.845 383.688 li
579.033 383.009 li
579.021 383.056 li
579.176 382.364 li
579.166 382.411 li
579.288 381.707 li
579.281 381.755 li
579.369 381.039 li
579.365 381.087 li
579.418 380.361 li
579.416 380.41 li
579.434 379.673 li
579.434 379.722 li
579.416 378.986 li
579.418 379.035 li
579.365 378.308 li
579.369 378.357 li
579.281 377.641 li
579.288 377.689 li
579.166 376.984 li
579.176 377.032 li
579.021 376.34 li
579.033 376.387 li
578.845 375.708 li
578.859 375.754 li
578.641 375.089 li
578.657 375.134 li
578.409 374.485 li
578.427 374.529 li
578.149 373.895 li
578.169 373.938 li
577.863 373.321 li
577.885 373.363 li
577.551 372.764 li
577.575 372.805 li
577.214 372.224 li
577.24 372.264 li
576.853 371.703 li
576.881 371.742 li
576.469 371.201 li
576.498 371.238 li
576.062 370.719 li
576.093 370.754 li
575.634 370.257 li
575.667 370.292 li
575.185 369.818 li
575.22 369.85 li
574.716 369.401 li
574.753 369.432 li
574.228 369.007 li
574.267 369.036 li
573.723 368.637 li
573.762 368.665 li
573.199 368.293 li
573.241 368.319 li
572.659 367.974 li
572.702 367.998 li
572.104 367.682 li
572.148 367.704 li
571.533 367.418 li
571.579 367.438 li
570.949 367.182 li
570.996 367.199 li
570.351 366.974 li
570.4 366.99 li
569.741 366.797 li
569.791 366.81 li
569.119 366.65 li
569.169 366.661 li
568.486 366.535 li
568.537 366.543 li
567.842 366.452 li
567.894 366.458 li
567.189 366.402 li
567.241 366.405 li
566.527 366.386 li
566.579 366.386 li
565.865 366.405 li
565.917 366.402 li
565.212 366.458 li
565.264 366.452 li
564.569 366.543 li
564.62 366.535 li
563.937 366.661 li
563.987 366.65 li
563.316 366.81 li
563.365 366.797 li
562.706 366.99 li
562.755 366.974 li
562.11 367.199 li
562.157 367.182 li
561.527 367.438 li
561.572 367.418 li
560.958 367.704 li
561.002 367.682 li
560.404 367.998 li
560.447 367.974 li
559.865 368.319 li
559.907 368.293 li
559.344 368.665 li
559.384 368.637 li
558.839 369.036 li
558.878 369.007 li
558.353 369.432 li
558.39 369.401 li
557.886 369.85 li
557.921 369.818 li
557.439 370.292 li
557.472 370.257 li
557.013 370.754 li
557.044 370.719 li
556.608 371.238 li
556.637 371.201 li
556.225 371.742 li
556.253 371.703 li
555.866 372.264 li
555.892 372.224 li
555.531 372.805 li
555.555 372.764 li
555.221 373.363 li
555.243 373.321 li
554.937 373.938 li
554.957 373.895 li
554.679 374.529 li
554.697 374.485 li
554.449 375.134 li
554.465 375.089 li
554.247 375.754 li
554.261 375.708 li
554.074 376.387 li
554.085 376.34 li
553.93 377.032 li
553.94 376.984 li
553.818 377.689 li
553.825 377.641 li
553.737 378.357 li
553.741 378.308 li
553.688 379.035 li
553.69 378.986 li
553.672 379.722 li
0 0 0 0 cmyk
f
553.67 443.464 mo
553.716 435.508 559.93 429.101 567.596 429.101 cv
575.262 429.101 581.477 435.508 581.477 443.412 cv
581.477 451.316 575.262 457.723 567.596 457.723 cv
559.93 457.723 553.716 451.316 553.67 443.464 cv
.658076 0 .502251 0 cmyk
ef
552.734 442.651 mo
552.737 442.602 li
552.79 441.875 li
555.465 422.614 581.763 424.069 582.477 443.437 cv
582.459 444.173 li
582.456 444.222 li
580.595 463.986 553.572 463.238 552.716 443.437 cv
552.716 443.388 li
552.734 442.651 li
cp
554.715 443.437 mo
554.715 443.388 li
554.734 444.124 li
554.731 444.075 li
554.785 444.802 li
554.78 444.753 li
554.868 445.469 li
554.861 445.421 li
554.983 446.126 li
554.974 446.078 li
555.129 446.77 li
555.117 446.723 li
555.304 447.402 li
555.29 447.356 li
555.508 448.021 li
555.492 447.976 li
555.741 448.625 li
555.722 448.581 li
556 449.215 li
555.98 449.172 li
556.287 449.789 li
556.264 449.747 li
556.599 450.346 li
556.575 450.305 li
556.936 450.886 li
556.91 450.846 li
557.297 451.407 li
557.269 451.368 li
557.681 451.909 li
557.651 451.872 li
558.087 452.391 li
558.056 452.356 li
558.516 452.853 li
558.482 452.818 li
558.964 453.292 li
558.929 453.26 li
559.433 453.709 li
559.397 453.678 li
559.921 454.103 li
559.883 454.074 li
560.427 454.473 li
560.387 454.445 li
560.95 454.817 li
560.909 454.791 li
561.49 455.136 li
561.447 455.112 li
562.046 455.428 li
562.001 455.406 li
562.616 455.692 li
562.57 455.672 li
563.2 455.928 li
563.153 455.911 li
563.798 456.136 li
563.75 456.12 li
564.408 456.313 li
564.359 456.3 li
565.03 456.46 li
564.98 456.449 li
565.664 456.575 li
565.612 456.567 li
566.307 456.658 li
566.255 456.652 li
566.96 456.708 li
566.908 456.705 li
567.622 456.724 li
567.57 456.724 li
568.285 456.705 li
568.233 456.708 li
568.937 456.652 li
568.886 456.658 li
569.58 456.567 li
569.529 456.575 li
570.213 456.449 li
570.162 456.46 li
570.834 456.3 li
570.784 456.313 li
571.443 456.12 li
571.395 456.136 li
572.04 455.911 li
571.992 455.928 li
572.623 455.672 li
572.577 455.692 li
573.192 455.406 li
573.147 455.428 li
573.746 455.112 li
573.703 455.136 li
574.284 454.791 li
574.243 454.817 li
574.806 454.445 li
574.766 454.473 li
575.31 454.074 li
575.272 454.103 li
575.796 453.678 li
575.76 453.709 li
576.263 453.26 li
576.228 453.292 li
576.71 452.818 li
576.677 452.853 li
577.137 452.356 li
577.105 452.391 li
577.542 451.872 li
577.512 451.909 li
577.924 451.368 li
577.896 451.407 li
578.283 450.846 li
578.257 450.886 li
578.618 450.305 li
578.594 450.346 li
578.928 449.747 li
578.906 449.789 li
579.213 449.172 li
579.192 449.215 li
579.47 448.581 li
579.452 448.625 li
579.701 447.976 li
579.685 448.021 li
579.903 447.356 li
579.889 447.402 li
580.076 446.723 li
580.064 446.77 li
580.219 446.078 li
580.21 446.126 li
580.332 445.421 li
580.325 445.469 li
580.413 444.753 li
580.408 444.802 li
580.462 444.075 li
580.459 444.124 li
580.477 443.388 li
580.477 443.437 li
580.459 442.7 li
580.462 442.749 li
580.408 442.023 li
580.413 442.071 li
580.325 441.355 li
580.332 441.403 li
580.21 440.699 li
580.219 440.746 li
580.064 440.054 li
580.076 440.101 li
579.889 439.422 li
579.903 439.468 li
579.685 438.803 li
579.701 438.849 li
579.452 438.199 li
579.47 438.243 li
579.192 437.609 li
579.213 437.653 li
578.906 437.036 li
578.928 437.078 li
578.594 436.479 li
578.618 436.519 li
578.257 435.939 li
578.283 435.979 li
577.896 435.417 li
577.924 435.456 li
577.512 434.915 li
577.542 434.952 li
577.105 434.433 li
577.137 434.469 li
576.677 433.972 li
576.71 434.006 li
576.228 433.532 li
576.263 433.565 li
575.76 433.115 li
575.796 433.146 li
575.272 432.721 li
575.31 432.751 li
574.766 432.352 li
574.806 432.38 li
574.243 432.007 li
574.284 432.033 li
573.703 431.689 li
573.746 431.713 li
573.147 431.397 li
573.192 431.419 li
572.577 431.132 li
572.623 431.152 li
571.992 430.896 li
572.04 430.914 li
571.395 430.689 li
571.443 430.704 li
570.784 430.511 li
570.834 430.525 li
570.162 430.365 li
570.213 430.375 li
569.529 430.25 li
569.58 430.258 li
568.886 430.167 li
568.937 430.172 li
568.233 430.117 li
568.285 430.119 li
567.57 430.101 li
567.622 430.101 li
566.908 430.119 li
566.96 430.117 li
566.255 430.172 li
566.307 430.167 li
565.612 430.258 li
565.664 430.25 li
564.98 430.375 li
565.03 430.365 li
564.359 430.525 li
564.408 430.511 li
563.75 430.704 li
563.798 430.689 li
563.153 430.914 li
563.2 430.896 li
562.57 431.152 li
562.616 431.132 li
562.001 431.419 li
562.046 431.397 li
561.447 431.713 li
561.49 431.689 li
560.909 432.033 li
560.95 432.007 li
560.387 432.38 li
560.427 432.352 li
559.883 432.751 li
559.921 432.721 li
559.397 433.146 li
559.433 433.115 li
558.929 433.565 li
558.964 433.532 li
558.482 434.006 li
558.516 433.972 li
558.056 434.469 li
558.087 434.433 li
557.651 434.952 li
557.681 434.915 li
557.269 435.456 li
557.297 435.417 li
556.91 435.979 li
556.936 435.939 li
556.575 436.519 li
556.599 436.479 li
556.264 437.078 li
556.287 437.036 li
555.98 437.653 li
556 437.609 li
555.722 438.243 li
555.741 438.199 li
555.492 438.849 li
555.508 438.803 li
555.29 439.468 li
555.304 439.422 li
555.117 440.101 li
555.129 440.054 li
554.974 440.746 li
554.983 440.699 li
554.861 441.403 li
554.868 441.355 li
554.78 442.071 li
554.785 442.023 li
554.731 442.749 li
554.734 442.7 li
554.715 443.437 li
0 0 0 0 cmyk
f
.903044 .872343 .884215 .782895 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+Calibri-Bold 1 GetGlyphDirectory
286 <001C60D8A8C9B7A4C86C545A4AC8A7D7F6C345E834CA1213E882E926387
794826A205EEEE689D37E8FC5A261291E47A8EB37515D6AFF3E8D4C2927EEA10
BDEE7B9C51B7C7E29EC21F969487478C80B6DD492C8CB06797735DBFAA076783
5E16CF60557FF99669574049AC02AF815FE3A71EC95AE08115F25C3E55D5B1FD
10CA1E741534F0E60416081D7FA16D9DFEF57FF91FD82FC7BA4FB9689D718D9A
71DED1EF9DCA51AF0BBC79B40093EF91CBC3D8C48A3FDFEA41B5047A65EAFDD5
AF1021F9C948AAB35D583226126C585E079DEB6D479075845CECA8ED7ED10944
C11C924501DD381B71E2F7690C30AF54ADDDF92DD4099EA219A54E3CF84E276F
A7871C8A6ED23473DBBAA6EDA7BEF929816C1760D14417F454980C243ACB7FEE
E422DBAD62FF97870FD2250B1790169B64F76> |
!
end
end end
%ADOEndSubsetFont
LIRVKV+Calibri-Bold [18 0 0 -18 0 0 ]msf
272.114 254.758 mo
(\003~\001\036\003\177)
[5.60522 9.0434 0 ]xsh
383.2 200.574 mo
548.621 200.574 li
548.621 198.324 li
383.2 198.324 li
cp
f
383.2 113.682 mo
548.621 113.682 li
548.621 111.432 li
383.2 111.432 li
cp
f
383.2 38.575 mo
548.621 38.575 li
548.621 36.325 li
383.2 36.325 li
cp
f
.962 lw
556.85 23.726 mo
556.85 49.601 li
@
571.052 23.726 mo
576.426 36.664 li
571.052 49.601 li
@
LIRVKY+TimesNewRomanPSMT [21.504 0 0 -21.504 0 0 ]msf
559.409 42.38 mo
(\000I)sh
gsave
551.15 93.539 mo
589.9 93.539 li
589.9 129.539 li
551.15 129.539 li
cp
eclp
gsave
.06 0 mo
592.441 0 li
592.441 466.239 li
.06 466.239 li
cp
clp
.96 lw
555.739 98.601 mo
555.739 124.476 li
@
572.947 98.601 mo
578.301 111.539 li
572.947 124.476 li
@
LIRVKZ+TimesNewRomanPSMT [21.504 0 0 -21.504 0 0 ]msf
560.583 116.995 mo
(\000H)sh
grestore
grestore
.96 lw
555.74 182.601 mo
555.74 208.476 li
@
574.1 182.601 mo
579.455 195.539 li
574.1 208.476 li
@
LIRVKY+TimesNewRomanPSMT [21.504 0 0 -21.504 0 0 ]msf
560.585 201.255 mo
(\000J)sh
414.081 164.293 mo
406.206 150.793 li
410.093 150.793 li
402.218 164.293 li
400.59 166.804 396.948 164.68 398.331 162.026 cv
408.15 145.194 li
417.968 162.026 li
419.284 164.49 416.081 166.68 414.263 164.558 cv
414.081 164.293 li
cp
402.218 179.259 mo
410.093 192.759 li
406.206 192.759 li
414.081 179.259 li
415.713 176.749 419.351 178.873 417.968 181.527 cv
408.15 198.358 li
398.331 181.527 li
397.019 179.06 400.216 176.874 402.037 178.994 cv
402.218 179.259 li
cp
410.4 149.66 mo
410.4 193.893 li
405.9 193.893 li
405.9 149.66 li
410.4 149.66 li
.047425 .685054 .892058 0 cmyk
f
gsave
431.15 114.669 mo
492.1 114.669 li
492.1 140.469 li
431.15 140.469 li
cp
eclp
.903044 .872343 .884215 .782895 cmyk
%ADOBeginSubsetFont: HIBBAA+SymbolMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HIBBAA+SymbolMT 3 GetGlyphDirectory
68 <001C60D8A8C9B66A6BA5FD431D86440FC5B17884920F72EF9985747FE48E
27D52B0A7328353282C2309CE0DAF5EDAE07A2F03F8B9B9AB66522FB6EAC947B
85F34B7699BBD2ABA7FA8935A5244D4597129134C591EEA22FFEF1079B95BC27
A2FBD7EDAE15DA79FA1678E7632858EFA7A6C752277BA1EA74BD33AE605DD0C8
E3AB194AA3A2FCDDEA7901B74FE55D675AEADC330A14CF35AC3D70CF0BABD57C
C6CAD6E7F5B99DF4A5DD912792A5DE6D73450168FA5163D865687D29832D77B9
0F6C62350B5F52E7016827145B9FCFDEF37982D054F7AA3F416639F51E> |
14 <001C60D8A8C9B79676F49CA92495B9C89EF45645173F57B5EA1C07489DAC
B42046160AA459BCB80BF7CCC099F8> |
39 <001C60D8A8C9B7D7E8D37714888B3A9969C9B649A6AE211DE5892AE2A871
F281F62C724D805D2A> |
!
end
end end
%ADOEndSubsetFont
LIRVKW+SymbolMT [22.272 0 7.296 -22.272 0 0 ]msf
470.26 134.998 mo
(\000D)sh
LIRVKW+SymbolMT [22.272 0 0 -22.272 0 0 ]msf
454.26 134.998 mo
(\000\016\000')
[-19.4279 0 ]xsh
grestore
402.218 55.457 mo
410.093 41.957 li
406.206 41.957 li
414.081 55.457 li
415.708 57.969 419.354 55.841 417.968 53.19 cv
408.15 36.358 li
398.331 53.19 li
397.018 55.656 400.217 57.843 402.037 55.723 cv
402.218 55.457 li
cp
414.081 126.288 mo
406.206 139.788 li
410.093 139.788 li
402.218 126.288 li
400.59 123.777 396.948 125.901 398.331 128.555 cv
408.15 145.387 li
417.968 128.555 li
419.284 126.091 416.081 123.901 414.263 126.023 cv
414.081 126.288 li
cp
405.9 40.824 mo
405.9 140.921 li
410.4 140.921 li
410.4 40.824 li
405.9 40.824 li
.858885 .643397 .00323491 0 cmyk
f
429.116 121.038 mo
425.178 114.288 li
427.122 114.288 li
423.184 121.038 li
422.373 122.294 420.547 121.23 421.241 119.905 cv
426.15 111.489 li
431.059 119.905 li
431.701 121.095 430.198 122.197 429.255 121.228 cv
429.116 121.038 li
cp
423.184 131.939 mo
427.122 138.689 li
425.178 138.689 li
429.116 131.939 li
429.929 130.683 431.753 131.748 431.059 133.073 cv
426.15 141.489 li
421.241 133.073 li
420.599 131.883 422.103 130.78 423.045 131.75 cv
423.184 131.939 li
cp
427.275 113.721 mo
427.275 139.256 li
425.025 139.256 li
425.025 113.721 li
427.275 113.721 li
.621241 .349157 0 0 cmyk
f
395.15 143.494 mo
404.15 143.494 li
404.15 145.744 li
395.15 145.744 li
cp
410.9 143.494 mo
419.9 143.494 li
419.9 145.744 li
410.9 145.744 li
cp
426.65 143.494 mo
435.65 143.494 li
435.65 145.744 li
426.65 145.744 li
cp
442.4 143.494 mo
451.4 143.494 li
451.4 145.744 li
442.4 145.744 li
cp
458.15 143.494 mo
467.15 143.494 li
467.15 145.744 li
458.15 145.744 li
cp
473.9 143.494 mo
479.15 143.494 li
479.15 145.744 li
473.9 145.744 li
473.9 143.494 li
.903044 .872343 .884215 .782895 cmyk
f
522.411 56.549 mo
514.536 43.049 li
518.423 43.049 li
510.548 56.549 li
508.92 59.06 505.275 56.932 506.661 54.281 cv
516.479 37.45 li
526.298 54.281 li
527.61 56.748 524.414 58.933 522.592 56.814 cv
522.411 56.549 li
cp
510.548 71.515 mo
518.423 85.015 li
514.536 85.015 li
522.411 71.515 li
524.039 69.004 527.681 71.128 526.298 73.782 cv
516.479 90.614 li
506.661 73.782 li
505.345 71.318 508.548 69.128 510.366 71.25 cv
510.548 71.515 li
cp
518.729 41.915 mo
518.729 86.148 li
514.229 86.148 li
514.229 41.915 li
518.729 41.915 li
.047425 .685054 .892058 0 cmyk
f
gsave
515.15 49.739 mo
570.35 49.739 li
570.35 83.339 li
515.15 83.339 li
cp
eclp
.902 lw
519.29 69.412 mo
522.108 67.865 li
.903044 .872343 .884215 .782895 cmyk
@
1.804 lw
522.108 68.307 mo
526.19 75.381 li
@
.902 lw
526.65 75.381 mo
532.055 54.27 li
545.28 54.27 li
@
%ADOBeginSubsetFont: HJCBAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HJCBAA+TimesNewRomanPSMT 1 GetGlyphDirectory
76 <001C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F
4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78
F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE3
65B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A6400850
90E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCB
CB8CA3E9F85837FAC6> |
!
end
end end
%ADOEndSubsetFont
LIRVKZ+TimesNewRomanPSMT [12.32 0 0 -12.32 0 0 ]msf
562.3 79.8573 mo
(\000L)sh
LIRVKZ+TimesNewRomanPSMT [21.12 0 0 -21.12 0 0 ]msf
533.435 74.5523 mo
(\000\025)sh
LIRVKW+SymbolMT [21.12 0 0 -21.12 0 0 ]msf
544.586 74.5523 mo
(\000:)sh
grestore
gsave
467.15 87.539 mo
489.6 87.539 li
489.6 111.539 li
467.15 111.539 li
cp
eclp
.903044 .872343 .884215 .782895 cmyk
LIRVKW+SymbolMT [21.888 0 0 -22.272 0 0 ]msf
470.849 107.904 mo
(\000')sh
grestore
.903044 .872343 .884215 .782895 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri-Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/PBAAAA+Calibri-Bold 2 GetGlyphDirectory
336 <001C60D8A8C9B741FC33483764299A12FECF5B424B921F1638B418D49AD
8CC9963C63B3AA219A5D4BE1E61602E0A46D9B7EFE172316C6D5B892D6ADDE5D
2528F58404262014692776607ED9FEF376902580B8C02BD731773D6FB7F2B7E8
EB85C23FCC5E1AF9DFBBC90E2E61912ECD90630A69F23FF0B8C4EE724E614878
24F0AD0E39D6070F4E4045884E75A2063D1947EBCB0E10D1BE681823C4CDB758
BE763EF892DC6733924007429A4A2787F28FEA57B2FFB5ABDDFA7D9E9074D9F3
756D6F34C0CF43B19360B382394D183AF45B0B3B98FC3F1D24257EBFF530F2F2
77B17FA1E0C87E667FD5F85997B524610195116A8FE72672B292B06D63E095A2
E86A919F48751EA4D1B00566804965EA47D6EEDA872F76C4297F60EB4DB86C21
5A3ABBA39D53700A0373989904046CD6FF12E13667085134B6D432AC6DF8D6B8
D4A1E48A3CB9A9B89F04E1FA7F186F4239393424E4D2D80048B3B74D449F9056
EFDA684BFA5A5756929753C434B4ECBD6DA1C66BD87629F33C7FB19CC2BFD390
6732A4B9F90C757E2A2AD993D4CCBB93191D5606033A5FB35BDD63214D3B0478
ED8768EC2FD124C41DB78452CEBD65904535C9E7E425B9032F384103F708FC89
C6168EB599D175B46EF0FF68E2E1C705DCAA4668D7FE56C29AE86E26C1109490
736A57C4139D482B4A559434FC9EA8FE3D7CF06BDE7DB76036EF6D4AD6F172AE
C1AB158F9> |
349 <001C60D8A8C9B874A685BEE7073E3D9BEB2350BB486AC62AB5FFB3F3055
796FFA7201F6E4CDF32059564C619C9CC449E2E13D3438C6F3A00A8C33DF67EE
D72B4A703E19615397FBD65B8F41AB93A2D076C7948B4D6A7E1920548D052C7A
B1831CD8F1E6F01CDE398A3464141E18D2DB8A524CC3BE1885811A2FA4464E9B
FA44F3B137A209AC07BC2D4DC8265BE2C3CDB96FC76B4E494C7989F89FD865B5
63D37857FCA1A5FB165B3A362BB87A93EC69254C2AAA91985E82347B6547083A
306CE> |
!
end
end end
%ADOEndSubsetFont
LIRVKV+Calibri-Bold [20.05 0 0 -20.05 0 0 ]msf
440.393 77.9023 mo
(\001P)sh
LIRVKV+Calibri-Bold [12.95 0 0 -12.95 0 0 ]msf
449.893 81.9023 mo
(\001])sh
511.597 110.741 mo
519.472 97.241 li
515.585 97.241 li
523.46 110.741 li
525.085 113.253 528.733 111.125 527.347 108.474 cv
517.528 91.642 li
507.71 108.474 li
506.395 110.938 509.595 113.127 511.416 111.007 cv
511.597 110.741 li
cp
523.46 181.572 mo
515.585 195.072 li
519.472 195.072 li
511.597 181.572 li
509.969 179.061 506.326 181.186 507.71 183.839 cv
517.528 200.671 li
527.347 183.839 li
528.662 181.374 525.459 179.186 523.641 181.307 cv
523.46 181.572 li
cp
515.278 96.108 mo
515.278 196.205 li
519.778 196.205 li
519.778 96.108 li
515.278 96.108 li
.858885 .643397 .00323491 0 cmyk
f
500.116 97.038 mo
496.178 90.288 li
498.122 90.288 li
494.184 97.038 li
493.373 98.295 491.547 97.23 492.241 95.905 cv
497.15 87.489 li
502.059 95.905 li
502.701 97.095 501.198 98.1971 500.255 97.228 cv
500.116 97.038 li
cp
494.184 101.939 mo
498.122 108.689 li
496.178 108.689 li
500.116 101.939 li
500.929 100.683 502.753 101.748 502.059 103.073 cv
497.15 111.489 li
492.241 103.073 li
491.598 101.883 493.104 100.779 494.045 101.75 cv
494.184 101.939 li
cp
498.275 89.721 mo
498.275 109.256 li
496.025 109.256 li
496.025 89.721 li
498.275 89.721 li
.621241 .349157 0 0 cmyk
f
gsave
414.1 159.539 mo
441.8 159.539 li
441.8 189.539 li
414.1 189.539 li
cp
eclp
.903044 .872343 .884215 .782895 cmyk
LIRVKZ+TimesNewRomanPSMT [12.32 0 0 -12.32 0 0 ]msf
434.875 186.064 mo
(\000L)sh
LIRVKW+SymbolMT [21.12 0 0 -21.12 0 0 ]msf
417.101 180.77 mo
(\000:)sh
grestore
473.2 89.494 mo
482.2 89.494 li
482.2 91.744 li
473.2 91.744 li
cp
488.95 89.494 mo
497.95 89.494 li
497.95 91.744 li
488.95 91.744 li
cp
504.7 89.494 mo
513.7 89.494 li
513.7 91.744 li
504.7 91.744 li
cp
520.45 89.494 mo
529.45 89.494 li
529.45 91.744 li
520.45 91.744 li
cp
536.2 89.494 mo
545.2 89.494 li
545.2 91.744 li
536.2 91.744 li
cp
551.95 89.494 mo
557.2 89.494 li
557.2 91.744 li
551.95 91.744 li
551.95 89.494 li
.903044 .872343 .884215 .782895 cmyk
f
gsave
409.2 59.239 mo
444.25 59.239 li
444.25 89.339 li
409.2 89.339 li
cp
eclp
.904 lw
413.351 78.937 mo
416.175 77.387 li
@
1.808 lw
416.175 77.83 mo
420.268 84.912 li
@
.904 lw
420.73 84.912 mo
426.149 63.776 li
439.408 63.776 li
@
LIRVKZ+TimesNewRomanPSMT [21.12 0 0 -21.12 0 0 ]msf
427.532 84.0823 mo
(\000\025)sh
grestore
LIRVKV+Calibri-Bold [20.05 0 0 -20.05 0 0 ]msf
534.35 151.989 mo
(\001P)sh
LIRVKV+Calibri-Bold [12.95 0 0 -12.95 0 0 ]msf
543.85 155.989 mo
(\001])sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/LIRVKZ+TimesNewRomanPSMT-Identity-H uf
/LIRVKZ+TimesNewRomanPSMT /CIDFont ur
/LIRVKW+SymbolMT-Identity-H uf
/LIRVKW+SymbolMT /CIDFont ur
/LIRVLA+TimesNewRomanPS-ItalicMT-Identity-H uf
/LIRVLA+TimesNewRomanPS-ItalicMT /CIDFont ur
/LIRVKV+Calibri-Bold-Identity-H uf
/LIRVKV+Calibri-Bold /CIDFont ur
/LIRVKY+TimesNewRomanPSMT-Identity-H uf
/LIRVKY+TimesNewRomanPSMT /CIDFont ur
/LIRVKX+TimesNewRomanPS-BoldMT-Identity-H uf
/LIRVKX+TimesNewRomanPS-BoldMT /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
