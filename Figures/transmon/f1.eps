%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: f12.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: xue
%%CreationDate: 2018/2/13, 20:26:01
%%BoundingBox: 0 0 595 502
%%HiResBoundingBox: 0 0 595 501.8430
%%CropBox: 0 0 595 501.8430
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1201 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="Acrobat Distiller 11.0 (Windows)"
   xmp:ModifyDate="2018-02-06T23:53:12+08:00"
   xmp:CreateDate="2018-02-06T23:52:26+08:00"
   xmp:CreatorTool="MATLAB, The MathWorks, Inc. Version 7.11.0.584 (R2010b). Operating System: Microsoft Windows 7."
   xmp:MetadataDate="2018-02-06T23:53:12+08:00"
   xmpMM:DocumentID="ecd8795c-aef5-11e7-0000-7bcedf1abe1a"
   xmpMM:InstanceID="uuid:092ffd54-caea-480f-a7d4-d77334639ff8"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">C:\Users\Wiggs\AppData\Local\Temp\tp9e4fb345_091c_4671_a56e_99052c2b0c04.ps</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Wiggs</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -501.843 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 501.843 li
595 501.843 li
595 0 li
cp
clp
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
330.001 451.421 mo
330.001 263.92 li
564.752 263.92 li
564.752 451.421 li
330.001 451.421 li
false sop
1 /0 /CSD get_res sepcs
0 sep
@
330.001 263.92 mo
564.752 263.92 li
1 /0 /CSD get_res sepcs
1 sep
@
330.001 451.421 mo
564.752 451.421 li
564.752 263.92 li
@
330.001 451.421 mo
330.001 263.92 li
@
330.001 451.421 mo
564.752 451.421 li
@
330.001 451.421 mo
330.001 263.92 li
@
330.001 451.421 mo
330.001 449.171 li
@
330.001 263.92 mo
330.001 266.92 li
@
%ADOBeginSubsetFont: PBAAAA+Arial-BoldMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PBAAAA+Arial-BoldMT)
%%Title: (PBAAAA+Arial-BoldMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PBAAAA+Arial-BoldMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-628 -376 2000 1018} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 3416 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A93
6AA182F5809A9> |
237 <001C60D8A8C9B7F374868AC675C3E2B025FD710B03111FA773> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PBAAAA+Arial-BoldMT-Identity-H /Identity-H 0 [/PBAAAA+Arial-BoldMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LEPHWM+Arial-BoldMT /PBAAAA+Arial-BoldMT-Identity-H findfont ct_VMDictPut
LEPHWM+Arial-BoldMT [16 0 0 -16 0 0 ]msf
314.251 470.171 mo
(\000\355)sh
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT Initial
ct_T42Dict begin
-0.625 -0.375 2 1.016
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Arial-BoldMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32115d5e9f000000cc000000606376
7420fb3ea3da0000012c0000075a6670676d08e8ba2800000888000005d7
676c7966603686fe00008ef4000018c068656164dda05a3700000e600000
003668686561127e162100000e9800000024686d74783e46beec00000ebc
000035606c6f6361014612da0000441c000035646d617870154104760000
7980000000206e616d659fd74099000079a00000037d70726570f14ae516
00007d20000011d267646972000000000000000000000000000303d402bc
00050008059a05330000011b059a0533000003d1006602120805020b0704
020202020204e0002affc00078430000000900000000544d432000200020
fffc05d3fe510133073e01b2400001ffffff0000042605ba000000200004
05ba001c05ba001c05a7001c0426001c0000ffe40000ffe40000ffe4fe69
ffe405ba001cfe69ffe402ea0000011d0000011d000000000000000000b2
00ac00d70128012000b301fa001700f8011901310049000400f7000300af
00fd00950014005400960112002400160055004901040119012b008c019b
ff76ffe9003d009200a2ffb70182ffaa0016008f00c600f8001c00de0401
0037004e00550055006500e903e50059ff9a00080087000b003b00520116
006100d600d600f500000093009400be017cfff80004001400820092003c
00410041ffc1fffc002a008c049005d809b5009100bb0106ff63ff69001e
0022008a022bffd6ffdf0026005900a300ac0104012b01c004480021006b
00850098011903c6006b009500a400fe010c025d034305bf000000490056
006e0077008a00aa00ca0112015005d805f0ff7bffe70006001300280061
006900e90135014d02a5040cff3effda005b00b900c801190119011901c0
045b04a7055bfe3fff9dffc2001500b7010a01bc01c10532058efd81ffa1
ffae000c00260031003d004e00560062008300c100c900f100f2027fff7f
00480053007700c5011d01200126012801d60219027e027e03d3002e0041
005d006b0075009f00b000b200ba00bb00bd00d600db00e000e50114011b
014a0162019101f2020c026402cf039b03b403d4040104a9001600230025
002a007400a500b600cc00cd00cf0105012001300150016a016f0197019d
01e002b002ec02f70408048304fb04fd0526fee0fefbff4efff50018001a
004c007a007f009100a300b300b400ce00d500f200f300f6011001380168
01a101b001e001ec02090222024f0270029602a502ad034e039103c10435
0442046b04cd04da0586058b076107fefca6fe93feadfed1ffb7ffd10003
000e00180026004600690081008f00a500bf00d300d500d900dd00e20119
012b0138013b015a015e016801730188019401ad01c501d101ea01f20200
020002000222023b0244024f026f0272027e02820293029402a502cf02cf
02d002da02dd02eb02f5030503220336037103a103b003b803d003e60410
0426042e0431044f045a04ff053205320547055305a805ab05c205f0063c
0664067006e80782078408ccfd2afddefe00fe68feb0feb3ffaa00080059
007a0091009e00a200af00b400bb00ca00cc00ce00d900e000f40114011a
01210127012b01390146014b014d0157015c01650182018701920198019b
01a201ae01c501c501d102070222022b024102530261026502840287028d
02b402b402ba02c902d602d802ed02f503170323032b03310349035a035b
036e03710374037e03840391039103aa03cf03d303e703e803ed04080417
041e0475047a049904a704b404d1054c056d056d05a205bf05c005d105fc
05fc0602061a061c062f066a06a806e2070607360750078907d407f30870
011c012a011a01200000000000000000000000000219000b001e02aa0214
047f01ed0000001d0104000f0091002b01880153011201f3003f03fe0168
010e047f01ed036e03150219041300000000064004b00000027401bb0035
01c5007f06020301000004e000b201dc02e004c3023d00d50160011904a7
036e05ca022100ab0426009002bc02bb014200b4023c0256029c030001e5
01a800e5006b00780094016b017300ab01ed013a017d0137017f00d40216
03530184003cffa202040109014901f0006e031500810464005e00000000
0000000000000000000000000000000000000000000000000000013900dc
00e9fe9e040d047c012b00b80096005900ac00df01a900fa0105ffec0017
0003005500610004008c00a3008500280120005d00d6007f012601190104
016c06cf00b4010600000737063e047a00f000f900e905ba042604420000
ffe7fe69049e04e3ff37ff2d01200105012000a800740068004700f200e5
00d900bd00a800680047005c0048000a0028003200410050005a0064007d
00870091ffb0ff9cff83ff79ff6f00cb012000fa012c01fa01a000d500b8
005c003c00c800c8008f00d9018b00b30047000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000fe6400c000ea01180125013203b003ed0576
059005aa05b405be05cd063100780084009b00cc00e200f4010a01200163
00d100ea00f7010801420019002c00340041003800480058006c025903bd
0043011a007000d30028003700420050005a0064007300780082008c009c
00a500bd00ce00f00110015c00be00d801020117012c016300ea01080041
004b0055005f007300a60109018301b300410064001e002a00eb00fa010e
01380274002c00400082009600b600c000cc00dc00e600f000ff010a0120
012c013b01440156016300f70057006401100136005001b10000ffb60039
004e004403cc00e5002401100042012201a400f0006000e0000e001d0039
05e30102002cfe4eff38026903bd011600ff000e00a00054001b003d0171
0041000f005000fd0015014f0035fe52002c00d3010304b001d200b600c0
00990265ff870377fe6c00cb00a9005c0040047607440000404154403f3e
3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221201f
1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b09051582320b00d44235921212d2c20204518
684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00
b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab102
00080d2d2c45b01a234445b01923442d2c2045b00325456164b050515845
441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0004360442d
2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062
602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d2c
45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b038a
45186920b01723448a8a8720b0c05158b0112bb0172344b0177ae41b21b0
177ae45959182d2c2d2cb0022546608a46b040618c482d2c4b53205c58b0
02855958b00185592d2c20b0032545b019234445b01a23444565234520b0
0325606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ff
e0001a45208a54582321b03f1b235961441cb114008a5279b31940201945
208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f432343
0b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b
2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349
b04060b0206320b000525823b002253823b002256538008a63381b212121
212159012d2c4bb06451584569b00943608a103a1b212121592d2c01b005
251023208af500b0016023edec2d2c01b005251023208af500b0016123ed
ec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b00161
0110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a
2d2c352d2c76b8023623701020b802364520b0005058b00161593a2f182d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb2
00402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b
59b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826
b00826b00826b008260f10161345683ab001162d2cb4000100000015b008
26b00826b00826b008260f1016134568653ab001162d2c4b53234b515a58
20458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b51
5a58381b2121592d2c4b5458381b2121592d2cb0134358031b02592d2cb0
134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580c
b00425b00425060c6423646164b0035158b00425b00425012046b0106048
2046b0106048590a21211b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b8fff060482046b8fff060
48590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b5323
4b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b212159
2d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c
462346608a8a462320468a608a61b8ff8062232010238ab902a702a78a70
456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb10200
42b123018851b1400188535a58b910000020885458b202010243604259b1
2401885158b920000040885458b202020243604259b12401885458b20220
02436042004b014b5258b2020802436042591bb940000080885458b20204
0243604259b94000008063b80100885458b202080243604259b940000100
63b80200885458b2021002436042595959592d000001000000050f5c1b34
4ec55f0f3cf50819080000000000a2e33c1d00000000c891c49efafafcfd
1000082400000009000100010000000000010000073efe4e00431000fafa
fa7a1000000100000000000000000000000000000d580600010000000000
023900000239000002aa00b803cb00700473001204730046071d005905c7
005a01e7005c02aa006b02aa0043031d001c04ac00550239007502aa0073
023900930239fffd04730056047300a2047300330473004d047300260473
005b0473005704730057047300530473004102aa00c902aa00aa04ac005f
04ac005504ac005f04e3006a07cd003d05c7000005c7009605c7006105c7
00940556009504e300970639006205c700960239008c0473002305c70099
04e3009d06aa009105c7009806390059055600950639005905c700960556
004a04e3002c05c700930556ffff078d0007055600000556fffd04e30016
02aa00920239fffd02aa002604ac00730473ffed02aa002a0473004904e3
00870473005504e300540473004102aa001804e3005404e3009202390093
0239ffa20473008902390093071d007e04e3009104e3005204e3008b04e3
005b031d00870473003002aa001f04e3008d0473000b063900090473000c
0473000e04000022031d003c023d00b0031d002d04ac004305c7000005c7
000005c700610556009505c700980639005905c700930473004904730049
047300490473004904730049047300490473005504730041047300410473
004104730041023900920239ffe90239ffcd0239ffd004e3009104e30052
04e3005204e3005204e3005204e3005204e3008d04e3008d04e3008d04e3
008d0473004403330056047300540473000d0473003b02cd00420473fffe
04e3008b05e5fff705e5fff7080000d802aa00bb02aa0005046400310800
ffaa0639003f05b40098046400320464003c0464003c04730001049c006f
03f4002c05b4007a069600a1046400000231000002f6002502ec001a0625
0037071d005804e3005704e3006502aa00c304ac0055046400540473ffec
0464001f04e5001a047300600473006a080000c905c7000005c700000639
005908000048078d00580473fffc08000000040000840400006902390098
023900720464003103f4002f0473000e0556fff70156fea90473ffe002aa
004b02aa004b04e3001f04e3001f04730044023900930239007504000071
0800000105c700000556009505c7000005560095055600950239006a0239
ffae0239ffbf0239ffc106390059063900590639005905c7009305c70093
05c700930239009302aa000302aafff302aa001302aa001a02aa00cd02aa
009102aa002602aa006002aa003902aa000304e3000a0239000a0556004a
0473003004e3001604000022023d00b005c7fffd04e300530556fff70473
000e0556009504e3008b04ac005504ac006d02aa005b02aa001902aa0028
06ac005c06ac005c06ac0028047300000639006204e300540239008c0556
004a0473003005c700610473005505c700610473005504e30054046bffed
02aa00c805c700000473004905c700000473004905c7009405c0005105c7
fffd0556009504730041055600950473004104e3009d0239007904e3009d
0315009504e3009a03d5009305c7009804e3009105c7009804e300910639
005904e3005205c70096031d008705c70096031d00500556004a04730030
04e3002c02aa001f04e3002c03d5001e05c7009304e3008d05c7009304e3
008d04e300160400002204e300160400002204cf009a0639005606910056
04eb004e04da004e03cc004e0579004e0392003005b9004e046bffed04d5
00b8032b004f08c000290800004f040000990800004f040000990800004f
040000980400009807d5016a05c7008f04ab005504d5009d04ac005504d5
022204d5010505abffe9050001c905ab027e05abffe905ab027e05abffe9
05ab027e05abffe905abffe905abffe905abffe905abffe905ab01c005ab
027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab01c0
05ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c005ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905ab02d605ab006605abffea05d5ffff04d500920800000007eb0130
07eb012007eb013007eb012004d500b204d5008004d5002a082b0198086b
01b807550010060000f40600006f0440003a0540003704c0003f04150040
04000025060000550647008c0473009005abffc701eb008d03d500860715
002303e9001804d5009202d6005c02d6005c04d500b202d6004d05c70000
0473004905c700610473005505c700610473005505560095047300410556
00950473004105560095047300410639006204e300540639006204e30054
0639006204e3005405c7009604e3009205c7000504e300190239ffba0239
ffbb0239ffda0239ffda0239ffe10239ffe2023900480239004704730023
0239ffa205c70099047300890473008d04e3009d0239ffed05c7009804e3
009105c9009c04e3008e0639005904e300520639005904e3005205c70096
031d002a0556004a0473003004e3002c02aa000705c7009304e3008d05c7
009304e3008d05c7009304e3008d05c7009304e3008d078d000706390009
0556fffd0473000e0239008d05c70000047300490800ffaa071d00580639
003f04e3005702aa00c9078d000706390009078d000706390009078d0007
063900090556fffd0473000e0239009502aaffd70473000d04cd005a06ac
005c06ac002906ac003006ac002f02aa00bc02aa002602aa00bb03b8fff4
05c7ffe806d3ffbb073fffbb03caffbb0699ffa6076bffc806b4ff9c0239
ff2905c7000005c7009605c000000556009504e3001605c700960239008c
05c700990556000006aa009105c70098052600660639005905c7009a0556
009504cd005a04e3002c0556fffd0556000006790056066a00620239ffcc
0556ffff04eb004e039c004e04e3008e0239008204a8006c04e200900473
000f03af004e04e3008e0453004e023900930476008e0473000f04e50090
0473000b0390004e04e3005204f300760429004e04a80076049b00110607
007606c2004e0239ffcd04a8007604e3004e04a8007606c2004e055a0097
0715002f048900a405b100580556004a0239008c0235ffca0473002308c0
001a0880009d0700003704e2009a04fa000005c0009905c7000005c0009b
05c70096048900a405b3fffa05560095073b00170503002c05c0009905c0
009904e2009a059d002006aa009105c700960639005905c0009905560095
05c7006104e3002c04fa000006d400590556000005d8009a059f007d080a
009a0827009a06f5001a07d5009d05c0009b05b100570840009605c00004
0473004904f1005c04eb0096035500880514fff90473004105acffff03fa
001804eb008c04eb008c040100880515001905eb009b04d5008804e30052
04d5008804e3008b0473005503eb00150473000e070000540473000c04eb
008904a5007206ab008c06c0008d05d5002806d5009504eb0099046b0038
06d5009104abfffb0473004504e3000003550088046b0051047300300239
00930240ffd00239ffa207c000180740008c04e300000401008804730012
04d5008803e50096039300880800004108eb00a306200030000001010000
001e0000003100000031000001010000007f0000007e0000008c0000008c
000001010000001000000101000001210393007d0000008c026500c80000
03020000ff0102aa00c904a90059049b004103a7000a0466003204ea0082
022f0087034e005a04ed00870503007d022f0087042c002803ed004b03f8
004104e30087050a0037022f00870316004b04e800500459000a04c00064
04b2006403ff000a0418000a04950082042c002805b8005a0563002d045e
0087045e0087045e00870236005004090050068b0087022fffac042c0028
042c002803f8ff1603f8ff160479003205b8005a05b8005a05b8005a05b8
005a04a9005904a9005904a90059049b004103a2000a0466003204ea0082
02950000038100000503007d02950000042c002803ed004b03f80041050a
00370316004b04e8005004c0006404b200640418000a04950082042c0028
05b8005a0563002d022f0087049b004103ed004b04b2006404db00410000
ffdc0000ff250000ffdc0000fe51028d00ab028d00a002da004303c0007e
0196ffba0000004600000046000000460000004600000048000000460000
004600000046047e0188047e0150047e0104047e009e047e012d047e00ea
047e00d5047e009c047e00bc047e00ee04350085028d00c1043500b30600
01000600010002be005806000100047e00a5047e00bd047e00de06000100
060001000600010006000100060001000000004606000100060001000600
0100060001000600010006000100060001000600010004e6ffba06000100
06000100060001000532003905320039022cffba022cffba060001000600
01000600010006000100049e0034047800300430ffba0430ffba0376000a
0376000a060e00290708002902e2ffba0456ffba060e00290708002902e2
ffba0456ffba05280097046f000a03520003060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100000000300000004600000046
000000400000004606000100060001000000ffdc0000fe510000ff160000
ff160000ff160000ff160000ff160000ff160000ff160000ff160000ff16
0000ffdc0000ff160000ffdc0000ff200000ffdc0473002d080000000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000600010006000100028d007f028d00670600
010005a0002e03c0007e01e800000207ffc301bc005e01e0fffa039c0006
039c000601bc005e01e0001a05280097049e0011022cffba022cffba01bc
008801e0001a0532003905320039022cffba022cffba02be003603520003
0532003905320039022cffba022cffba0532003c0532003c022cffba022c
ffba049e0034047800300430ffba0430ffba049e0034047800300430ffba
0430ffba049e0034047800300430ffba0430ffba02be006902be006902be
006902be00690376000a0376000a0376000a0376000a0732004007320040
04deffba04deffba073200400732004004deffba04deffba088000400880
0040062cffba062cffba0880004008800040062cffba062cffba0430ffba
0430ffba0430ffba0430ffba0430ffba0430ffba0430ffba0430ffba0454
003403c000460454ffba02e2ffba0454003403c000460454ffba02e2ffba
0610002f0610002f0270ffba0298ffba04e6002704e600270270ffba0298
ffba045400290454002902e2ffba02e2ffba039c0023039c002301e0ffba
01e0ffba02e2002102e200210352ffba0352ffba0454003e0454003e022c
ffba022cffba02be00580352000303c0ffba039cffba039c0006039c0006
05280097046f000a05280097049e0011022cffba022cffba0454000004c4
000003e400220454001a03e400220454001a03e400220454001a06000100
060001000000004600000046060001000600010006000100000000460000
004606000100060001000000004800000046060001000600010006000100
000000460000004600000046000000460000004000000030060001000000
004600000046060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100028d00ca028d00c7028d00c6060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010002be0069
0100ffba0800ffba1000ffbb06d3005905b0005206a3009305cb008d0000
fd880000fbc10000fc5f0000fe310000fcad0000fd550000fe260000fdf1
0000fd180000fc690000fd950000fbe00000fc700000fed40000fecd0000
fea0041b007806ac005c06ac00190000fe450000fd550000fda60000fc5f
0000fe250000fd180000fbe00000fafa0000fb360000fc700000fb870000
fb9b0000fcce0000fc540000fbc30000fc940000fbf50000fdb00000fe59
0000fd7e0000fc820000fd340000fe500000fe460000fcd10000fd3e0000
fd020000fc3a0000fce90000fc260000fc070000fc2f0000fb9e0000fb76
0239009305c700000473004905c700000473004905c700000473004905c7
00000473004905c700000473004905c700000473004905c7000004730049
05c700000473004905c700000473004905c700000473004905c700000473
004905c70000047300490556009504730041055600950473004105560095
047300410556009504730041055600950473004105560095047300410556
00950473004105560095047300410239006a0239005d0239008c02390093
0639005904e300520639005904e300520639005904e300520639005904e3
00520639005904e300520639005904e300520639005904e3005206d30059
05b0005206d3005905b0005206d3005905b0005206d3005905b0005206d3
005905b0005205c7009304e3008d05c7009304e3008d06a3009305cb008d
06a3009305cb008d06a3009305cb008d06a3009305cb008d06a3009305cb
008d0556fffd0473000e0556fffd0473000e0556fffd0473000e05c70000
047300490239ffca0239ffca0639005904e3005205c7009304e3008d05c7
009304e3008d05c7009304e3008d05c7009304e3008d05c7009304e3008d
0000fef90000fef90000fef40000feef0489fffd03550007073b001705ac
ffff04e2009a0401008804e2009a0401008805c7009604d5008804730001
047300120473000104730012055600000473000c059f007d04a50072059f
009c04e3009205cf00590473004c0639005604e3005205320039022cffba
0270ffba0298ffba04e60027022c0065022c0016022c0016022c0011022c
0043022cffd20000fef00000000f0000fff502aa009002aa009000000000
0000005e0000005e0000ffcb01bc000f01e0ffbf01bcfff501e0ffcd01bc
001d01e0000901bc008801e0001a039c0006039c0006039c0006039c0006
05280097046f000a0532003905320039022cffba022cffba053200390532
0039022cffba022cffba0532003905320039022cffba022cffba05320039
05320039022cffba022cffba0532003905320039022cffba022cffba0532
003905320039022cffba022cffba0532003905320039022cffba022cffba
049e0034047800300430ffba0430ffba049e0034047800300430ffba0430
ffba049e0034047800300430ffba0430ffba049e0034047800300430ffba
0430ffba049e0034047800300430ffba0430ffba049e0034047800300430
ffba0430ffba02be004f02be004f02be006902be006902be006902be0069
02be004f02be004f02be006602be006602be006902be006902be006902be
006902be002f02be002f02be002202be00220376000a0376000a0376000a
0376000a0376000a0376000a0376000a0376000a0376000a0376000a0376
000a0376000a0376000a0376000a0376000a0376000a0732004007320040
04deffba04deffba073200400732004004deffba04deffba073200400732
004004deffba04deffba0880004008800040062cffba062cffba08800040
08800040062cffba062cffba0430ffba0430ffba0454003403c000460454
ffba02e2ffba0610002f0610002f0610002f0270ffba0298ffba0610002f
0610002f0270ffba0298ffba0610002f0610002f0270ffba0298ffba0610
002f0610002f0270ffba0298ffba0610002f0610002f0270ffba0298ffba
04e6002704e6002704e6002704e60027093e0032093e00320740ffba0740
ffba060e00290708002902e2ffba0456ffba045400290454002902e2ffba
02e2ffba045400290454002902e2ffba02e2ffba045400290454002902e2
ffba02e2ffba060e00290708002902e2ffba0456ffba060e002907080029
02e2ffba0456ffba060e00290708002902e2ffba0456ffba060e00290708
002902e2ffba0456ffba060e00290708002902e2ffba0456ffba039c0023
039c002301e0ffba01e0ffba039c0023039c002301e0ffb101e0ffb1039c
0023039c002301e0ffba01e0ffba039c0023039c002301e0ffba01e0ffba
0454003e0454003e022cffba022cffba0454003e0454003e0454003e0454
003e0454003e0454003e022cffba022cffba0454003e0454003e049e0034
047800300430ffba0430ffba02be005803520003031a001a031a001a031a
001a039c0006039c0006039c0006039c0006039c0006039c0006039c0006
039c0006039c0006039c0006039c0006039c0006039c0006039c0006039c
0006039c000605280042046fffd905280097046f000a022cffba022cffba
039c0006039c000605280097046f000a022cffba022cffba05280097046f
000a067f0044067f0045067f0044067f004501a800280000fe290000fe8c
0000ff250000ff230000fefa0000ff7a0000fe5908fc003208ad00320000
ffb50000ffb60000fef00000ff590000fe590000ff8c01b4000002f70000
0000fe850000ff0704cd00320000ff580000ff580000ff59073200400732
004004deffba04deffba0880004008800040062cffba062cffba04540034
03c000460454ffba02e2ffba03c0007e02e2002102be0058022cffba0290
ffba01f4002f01f4003b01f4001201f400b101f4006d060e002907080029
022f00870000fec803500000045e008703e4fff50454fff503e400220454
001a03e400220454001a03e400220454001a03e400220454001a03e40022
0454001a03e400220454001a047e0072047e00bd03e4000f0454000f04e3
001b06b1001e05c0009b04e3008705c0000a04e3000a05c7006905c70061
0473005505c7fffd06b3001e05c0005c04e3005404da004e055600660503
006f04e3ffac063900620518000207720092023900930239000705c70099
047300890239001b0473000f07ef009605c7ffad04e3008e063900560718
005905f300550641001e04e3008b05560095055600640473006304cd005a
02e1001e02aa001f04e3001802aa001f04e3002d066a006205c700930629
00000473000e04e300160400002204e3003a04e300590436002a04360039
047300330473005b03fa001e04a2001f04e3008b023d00b003fb00b004ad
005602aa00b80aaa009409c7009408e300540956009d071c009d04720093
0a3a009808000098071c00910473004c05c70000047300490000fefe05c7
0000047300490800ffaa071d00580639006204e300240639006204e30054
05c70099047300890639005904e300520639005904e3005204e3003a0436
00220239ffa20aaa009409c7009408e300540639006204e3005408430096
0552009505c7009804e3009105c700000473004905c70000047300490556
00950473004105560095047300410239ff370239ff2d0239fff40239ffe6
0639005904e300520639005904e3005205c70096031dffcd05c70096031d
008005c7009304e3006705c7009304e3008d0556004a0473003004e3002c
02aa001f049e002e0429004905c7009604e30092059f009c050c0052050c
005204e300160400002205c7000004730049055600950473004106390059
04e300520000fefd0639005904e300520639005904e300520639005904e3
00520556fffd0473000e0473004504e3005404e3008204e3008704730034
0473001404e3005404e300540473004c0641004c03fa004f03fa00180587
0018048a005202aaffc404e3005404e3005404b000520473000f04ce000f
04e3008a04e3009204e300920239001b0239006b033e004402a8000002d9
00140239009304d40093071d0085071d0085071d007e04e3ffa604e30091
04eb008c04e3005206ab005206c2004e05ff0052031dffe6031dffe6031d
ffe6031d0087031d0087031d0087031dffe604ab008a04ab008a04730030
02aaffc402aaffc402aaff9b0451001e02aa001902aa001f04e3001b04f8
004b04a8009104730012063900090473000f0491000f0400002205700022
0436002204360022047300420473005504730042047300550639005904eb
0096048a004f04b0005204d5008803ab001e04730014039e008804e3005b
0473004204730055083f00540789005409af00540682001f0446001f0698
001f06f4001806350093058a00930445001e0482008802f1003202f10032
018effe202040032020400000204000003000032042f000002e2000001e7
005c03cb007002390098023900750239009402aa00f302aa00f303000032
0300003204ac005f04ac005f04ac002a04ac002a02aa012102aa00bb02aa
002a02aa012102aa001302aa002a02aa00bb02aa00ca02aa00ca02aa00f3
02aa00f302aa00a602aa00a602aa00a602aa001302aaffe102aafffb02ed
0000012100320302003202ee000003000032031000960310009603100096
031000960310009602aa006202aa006202aa000302aa001d040000690457
009604570096045700960457009604570043045700430457004304570043
04570043031000430457002f0457002f0457002f0457002f0457002f0310
002f04570025045700250457002504570025045700250310002f0457001a
0457001a0457001a0457001a0457001a0310001a04570042045700420457
004204570042045700420310004204570096045700960457009604570096
0457004204570042045700420457004204570042031000420457002f0457
002f0457002f0457002f0457002f0310002f0457002f0457002f0457002f
0457002f0457002f0310002f045700260457002604570026045700260457
002603100026045700420457004204570042045700420457004203100042
045700960457009604570096045700960457004204570042045700420457
004204570042031000420457002604570026045700260457002604570026
031000260457002304570023045700230457002304570023031000230457
002f0457002f0457002f0457002f0457002f0310002f0457004b0457004b
0457004b0457004b0457004b0310004b0457009604570096045700960457
00960457004204570042045700420457004204570042031000420457001a
0457001a0457001a0457001a0457001a0310001a04570024045700240457
00240457002404570024031000240457002f0457002f0457002f0457002f
0457002f0310002f0457004e0457004e0457004e0457004e0457004e0310
004e045700960457009604570096045700960000feaf0000febf0000fdb5
0000fec80000ff780000feb10000ff3d0000fe6f0000feae0000ffce0000
ff660000fe6f0000fec80000fec80000ff680000ff680000ff6800000000
0000ff1f0000ff1f0000ff440000ff5f0000fe870000ffec0000ff9c0000
ff510000ff510000ff510000febf0000ff15000000000000feb10000ff3d
0000ff6b0000fef20000ff470000ffce0000fe870000febb0000feae0000
feae0000fec80000fec80000fea60000febf0000fdb70000febe0000fea6
0000febf0000fdb50000fe1f0000fee20000ff9c0000fe870000ff440000
feba0000ff230000ff9a0000fdb90000fe3b000000000000fea70000ff68
0000fe170000ff740000fe870000fe000000ff660000ff440000fea70000
fea70000fea70000ff030000ff520000fd1f0000ff530000ff530000ff53
0000feb10000feb00000ffa10000fe8c0000feb80000feaf0000fea20000
feba0000fdf40000ff190000ff2d0000fe8c0000fe8802aa00bb02aa002a
02aa00c804e2006704a8000a06290000080200000629000005ff005206c2
004e056900140639005904e3005205c700770473005504e30097039e0088
06030000043c001d066f000a04e2000a07ef0096071d0085059f007d04e3
008a059f009c04d7000a05560064055600640524001404d4000a05e10055
04a0004b040e0014038400280569001404f1005c047300550239ffa20639
005603d4005103d400510556009505c000990473004104eb008c0a3d0059
063a001406f4001a059f001b07ce008c065e0093055600000473000b0768
008c066700930679005606070076089e008c07d800930503004603fa0043
06790056060700760639005604e300520685ffff052c000b0685ffff052c
000b08f6005907cb005206840023051a00230a3d0059073500550000fe37
0a3d0059063a001405c700610473005504ac000f0000fea60000feb10000
ff8d0000ff8d0000fc2b0000fc4c05c0009904eb008c05c0001104eb001b
0556009504e3008b059f009c04c900880503002c03fa001804e200110401
000d0617001a04fc00280709009605b6008809020099075f008805c7003b
049f003405c700610473005504e3002d03eb001506d2002c05830015059f
007d04a5007206da000a056d000a06da000a056d000a0239008c073b0017
05acffff059d009a04c80088059d00200515001905c7009604d5008805c7
009604d50088059f007d04a5007206aa009105eb009b02aa001a05c70000
0473004905c70000047300490800ffaa071d0058055600950473004105cf
00590473004c073b001705acffff0503002c03fa00180503002c04360022
05c0009904eb008c05c0009904eb008c0639005904e300520639005604e3
005205b10057046b003804fa00000473000e04fa00000473000e04fa0000
0473000e059f007d04a5007207d5009d06d5009505c0005e04e30054083e
005e077a005407ad004606c4004305430046044a0043081a002007a50019
08430096076600880639006204b000520620002d059b00150000ff430000
fec90000ff770000ffb00000ff470000ff560000ff740000fed70000feac
000000000000ff520000ff56000000000000feac0000fd9a000000000000
ff6a0000ff7c0000ff690000ff560000feac0000ff7f0000ff560000fdef
0000ff430000ff690000ff7c000000000000fdae0000ff8c000001020000
feef0000feef0000fefd0000fef90000ff530000fef80000fef905c70000
0473004905c7009604e3008705c7009604e3008705c7009604e3008705c7
00610473005505c7009404e3005405c7009404e3005405c7009404e30054
05c7009404e3005405c7009404e300540556009504730041055600950473
004105560095047300410556009504730041055600950473004104e30097
02aa00180639006204e3005405c7009604e3009205c7009604e3009205c7
009604e3009205c7004e04e3003b05c7009604e300920239ffd20239ffd2
0239001b0239ffce05c700990473008905c700990473008905c700990473
008904e3009d0239009304e3009d0239ffeb04e3009d0239ffdd04e3009d
0239ffcb06aa0091071d007e06aa0091071d007e06aa0091071d007e05c7
009804e3009105c7009804e3009105c7009804e3009105c7009804e30091
0639005904e300520639005904e300520639005904e300520639005904e3
00520556009504e3008b0556009504e3008b05c70096031d008705c70096
031d008705c70096031d008705c70096031d00590556004a047300300556
004a047300300556004a047300300556004a047300300556004a04730030
04e3002c02aa001f04e3002c02aa001f04e3002c02aa001f04e3002c02aa
001f05c7009304e3008d05c7009304e3008d05c7009304e3008d05c70093
04e3008d05c7009304e3008d0556ffff0473000b0556ffff0473000b078d
000706390009078d000706390009055600000473000c055600000473000c
0556fffd0473000e04e300160400002204e300160400002204e300160400
002204e3009202aaffde063900090473000e047300490239008d04eb004e
04eb004e04eb004e04eb004e04eb004e04eb004e04eb004e04eb004e05c7
000005c7000006f3fff206f3000006f3fff206f3000006f3004306f30043
03cc004e03cc004e03cc004e03cc004e03cc004e03cc004e061efff2061e
000007aefff207ae000007aefff207ae000004e3008e04e3008e04e3008e
04e3008e04e3008e04e3008e04e3008e04e3008e068ffff2068f0000081f
fff2081f0000081ffff2081f0000081f0014081f00140239009002390090
0239ffb60239ffc40239ffde0239ffec0239ffb30239ffc00301fff20301
00000491fff2049100000491fff204910000049100140491001404e30052
04e3005204e3005204e3005204e3005204e30052069dfff2069d00000855
fff20855000007c9fff207c9000004a8007604a8007604a8007604a80076
04a8007604a8007604a8007604a800760682000007fe00000862000007ae
fff306c2004e06c2004e06c2004e06c2004e06c2004e06c2004e06c2004e
06c2004e06cefff206ce00000886fff20886000007fafff207fa000007fa
fff307fafff304eb004e04eb004e03cc004e03cc004e04e3008e04e3008e
0239ffe70239008d04e3005204e3005204a8007604a8007606c2004e06c2
004e04eb004e04eb004e04eb004e04eb004e04eb004e04eb004e04eb004e
04eb004e05c7000005c7000006f3fff206f3000006f3fff206f3000006f3
004306f3004304e3008c04e3008c04e3008c04e3008c04e3008c04e3008c
04e3008c04e3008c068ffff2068f0000081ffff2081f0000081ffff2081f
0000081ffff3081ffff306c2004e06c2004e06c2004e06c2004e06c2004e
06c2004e06c2004e06c2004e06cefff206ce00000886fff20886000007fa
fff207fa000007fafff307fafff304eb004e04eb004e04eb004e04eb004e
04eb004e04eb004e04eb004e05c7000005c7000005c7ffd105c7ffdd05c7
000002aa00dc02aa00ca02aa00dc02aafff302aafff304e3008c04e3008c
04e3008c04e3008e04e3008c06e6000006e60000075700000757000005c7
009602aafff202aafff202aafff30239ffe50239ffdb0239ffce0239ffce
0239ffc20239ffbb0239ffe80239ffde03c9000003c9000002aa000002aa
000002aafff304a8007604a8007604a8007604a8007604f3007604f30076
04a8007604a800760556fffd0556fffd06e6ffd8074affdd061e000003b8
fff403b8fff402aa002a06c2004e06c2004e06c2004e06c2004e06c2004e
0765ffd1069dffdd0796ffd106ceffdd066a006202aa00bb02aa00dc0473
000a05c7006105c70061071d007e05c7002109cd0096078d000705c70020
04e3002d08b000140400003004c100660000ff530000ff530000ff530000
ff530239001b0239ffa2047300000556001206b3005403fe005706ab0091
040c001f05d6ffe605d6ffe602aa008402aa008402aa00c902aa00c902aa
009102aa002a02aaffc502aaffc302aafff302aa00c902aa00a902aa00a9
02aa00a902aa00a9032e001e032e001e02aa003a0000ff730000ff9d0000
fec80000ff230000ff720000ff720000fee70000ff9d0000ff530000ff53
0000ff530556009504e3008b04b5000006350000071d006104eb000f0473
0055049900910499001b0401008c03fa001802390093040f00490476008e
039e000e05eb009b04eb008c04e300520473003404f1005204f1005204f1
0021078d00540492004b04e3005304e3005304e9008c04abfffb04abfffb
03eb001504a8007604e300510624005104e000510473000b063900090400
002203df002203f2004b04ec0014035500880473001204d5008804e9008c
060700760515001903e300000591000003a2003203a2000003a300320355
00320355003204030032037c00320172005502de003203b00032031e0032
04220032037700320378003204260032037a0032035b003203ac00320377
0032037b00320514000003050032030500320321003204b6003203210032
03210032030200320302003202cf003202cf0032032000320121003202ca
00320484003402f2003203480032030a0032034900320349003203200032
01bc000a02f20032034200320484003202e90000034c000a031b003202e9
00000343003203da003203080000012100320204003202f2003202e90000
031b003202e900000342003203da00320308000005ed00460a9800460613
00460689ffba0541ffba01e9001e045400100000ff0d0000ff350000fece
0000feb70000fec90000ffc70000ff4f0000ff9e0000fef002be006902be
00690376000a0376000a03c0ffba039cffba03c0ffba039cffba05c80039
05920032061600820519004b05240041060f008705580028068f002d04ac
00550000fe3b0000fe660000fe680473fffc0400008403d5ffba01e0ffba
01e0ffb101e0ffba01e0ffba06d0002e0984002304000000080000000400
00000800000002ab000002000000015500000473000002390000019a0000
00ab00000000000005e5fff705c7006106aa009105eb009b0760008d07a1
005407a1005b05c7000005c700610473001404e3001104e3002c04730039
0400002205290042000001010000ff420000fead0000ff3a0000ff5304f3
000a05c7006905c7006105c70069048900a4035500880000ff430000ff01
0000ffac0316007d0000ff370298ffba033d001e0000ff3a0000ff480000
ff490000ff7e0000ff4f0000ff4a0000fe9e0532003905320039022cffb6
022cffb60532003c0532003c022cffba022cffba0532003905320039022c
ffba022cffba0532003905320039022cffba022cffba0532003905320039
022cffba022cffba0532003905320039022cffba022cffba053200390532
0039022cffba022cffba049e0034047800300430ffba0430ffba049e0034
047800300430ffba0430ffba02be004f02be004f02be006902be00690376
000a0376000a073200400732004004deffba04deffba0454003403c00046
0454ffba02e2ffba0454003403c000460454ffba02e2ffba0454003403c0
00460454ffba02e2ffba0610002f0610002f0270ffba0298ffba0610002f
0610002f0270ffba0298ffba060e00290708002902e2ffba0456ffba060e
00290708002902e2ffba0456ffba060e00290708002902e2ffba0456ffba
02e2002102e200210352ffba0352ffba02e2002102e200210352ffba0352
ffba0454003e0454003e022cffba022cffba0454003e0454003e022cffba
022cffba0454003e0454003e022cffba022cffba039c0023039c002301e0
ffba01e0ffba0376000a0376000a0376000a0376000a0732004007320040
04deffba04deffba04e3ffc104e3005402aafff3071dffc104e3ffd504e3
ffc5031dffc1031dffc10473ffff02aaffda0400002104e3008302f00032
04dc004e06fb001f0239001b0239001b04e3001404a8001404f8001404e3
008704e3005402aa0018062500540473008902390070071d007e04e30091
04e3008b031d00660473003003baffc40473000b0473000c040000220473
004904e3005404e300540473004103fa004f03fa0018053e005102390093
0473003402aaffc404e3008d0436002203210032030a0032030a00060348
003202cf003201f0000a01f000000320003202f100320174000a01210032
012100320174000a02760000018e00320150003202490032048400340484
0032035f0000035f003202fa003203480032040300320302003202390000
01bc000a0340000a035e003202ea003202ea003202e9000002e4003202e4
003203be0032030a003202e800320000fe920000fe920000ff730000fe9f
02aa00c903050032030200320348003202ee0000030200320639006205c7
00000556001e05c7006102aa004104eb004e04eb004e04eb004e04eb004e
04eb004e04eb004e04eb004e04eb004e0239ffb60239ffb60239ffc40239
ffc40239ffb60239ffb60239ffc40239ffc404a8007604a8007604a80076
04a8007604a8007604a8007604a8007604a800760239ffc90239ffc90239
ffc90239ffc904a8007604a8007604a8007604a8007603e400220454001a
03df003005c7fffd05c70016055600000556009504730041047300230239
ffa20633005904e3005b05c70000031d001b0556fffd0473000e04730034
047300550473003402390093048900110355001b055600000473000c0556
00000473000c0503006f03fa004f059d0020051500190000fec60000fed4
0000fec60000fed40000fe5f0000fe5f0000ff720000ff730000fee70800
00000401005d0473003404e300110239001b04e300060556fffd05c70096
0473004902aaffcd05c7009604e3009205c700990473008904e300160400
00220473002804540096037c008805b9004e0000ff530000ffbc0000fefe
0000fefe0000fea40000fea40239009305c9009c05c7009805c9009c0000
fee00000ff300000fed40000fed50000fec00000fed00000fed80000fed8
0000fed80000fed80000fdc60639005904e3005b078d00070639000905b9
00910000fe9b061b005904d90006085b000706de000602aa00c9031c0055
01e7005c01e7005c040000990400009902aa00b802aa00b802aa00b802aa
000304e3002c000000000000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c000000f60000
018000000180000001800000018000000180000001be0000021400000318
0000039a00000540000005400000065a000007cc00000900000009bc0000
0b5a00000ca000000ca000000ca000000ca000000ca000000ca000000ca0
00000ca000000ca000000ca000000ca000000ca000000d5e00000dfa0000
0dfa00000dfa00000dfa00000dfa00000dfa00000dfa00000dfa00000ff8
00000ff800000ff800000ff800000ff800000ff800000ff800000ff80000
0ff800000ff800000ff800000ff800000ff800000ff800000ff800000ff8
00000ff800000ff800000ff800001206000013020000143e0000152e0000
173a0000173a0000173a0000173a0000173a0000173a0000173a0000173a
0000173a0000173a0000173a0000173a0000173a0000173a0000173a0000
185a0000185a0000185a0000185a0000185a0000185a0000185a0000185a
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000018c00000
18c0000018c0000018c0000018c0000018c0000018c0000018c0000018c0
000018c0000018c0000018c0000018c0000018c0000018c0000100000d58
00f2003c008f000600020010002f00550000073c02c20005000200>
<0000000e00ae0000000300000000006a000000000003000000070062006a
0001000000000000003500cc000100000000000300130101000100000000
00040013011400010000000000060013012700010000000000070031013a
0003000104090000006a016b0003000104090001001801d5000300010409
0002000e01ed0003000104090003002601fb000300010409000400260221
00030001040900060026024700030001040900070062026d00a900200032
00300031003000200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002e0020
0041006c006c002000520069006700680074007300200052006500730065
0072007600650064002e0041007200690061006c00200069007300200061
002000740072006100640065006d00610072006b0020006f006600200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e002ea9203230313020546865204d
6f6e6f7479706520436f72706f726174696f6e2e20416c6c205269676874
732052657365727665642e4a454549434e2b417269616c2d426f6c644d54
4a454549434e2b417269616c2d426f6c644d544a454549434e2b41726961
6c2d426f6c644d54417269616c20697320612074726164656d61726b206f
6620546865204d6f6e6f7479706520436f72706f726174696f6e2e00a900
20003200300031003000200054006800650020004d006f006e006f007400
790070006500200043006f00720070006f0072006100740069006f006e00
2e00200041006c006c002000520069006700680074007300200052006500
7300650072007600650064002e004a0045004500490043004e002b004100
7200690061006c0052006500670075006c00610072004a00450045004900
43004e002b0041007200690061006c002d0042006f006c0064004d005400
4a0045004500490043004e002b0041007200690061006c002d0042006f00
6c0064004d0054004a0045004500490043004e002b004100720069006100
6c002d0042006f006c0064004d00540041007200690061006c0020006900
7300200061002000740072006100640065006d00610072006b0020006f00
6600200054006800650020004d006f006e006f0074007900700065002000
43006f00720070006f0072006100740069006f006e002e000000b1548041
0d03ac00af03ac0002001003ac002003ac00a003ac0003004003acb3070d
3240b803acb312143240b803acb2162b32b9ffc003acb23a3340b803acb3
2d943280bc03ab005f0033ffc003abb2553340b803abb340443240b803ab
b3333b3240b803abb32f313240b803abb2083340b803abb30714321f411a
03ab002f03ab0002000f03ab002f03ab004f03ab008f03ab009f03ab00bf
03ab0006001003ab00df03ab00ff03ab000303a803a2b2461f40b803a5b2
08330f411403a50001004003a500cf03a500ff03a50003002003a500af03
a500ef03a500ff03a50004ffc003a3b3090c3240b803a3b208330f411b03
a30001000f03a3001003a3008003a300af03a300cf03a30005006f03a300
9f03a300ff03a30003009f03a200af03a2000203a203a1b2101f10410a03
9e007f039e0002039a000f0101001fffc00398b310143240b80399b30f13
32404110039500500395000200b0034d00c0034d0002006f0391007f0391
0002ffc0034bb22d3132b9ffc0034bb30a0e32104110038b0020038b0080
038b000300a0038b00010020038b0040038b0002ffc0038bb313163240b8
0383b20f1132b9ffc0037bb2303432b9ffc0037bb3101832504114037800
010365036e0023001f037e036e001e001f0363036e001d001f0362036400
0d001fffc00340b30f1032804110033f0001033f03150029001f03410316
0032001f0344031a001b001fffc00375b20e1132b9ffc00375b2282a3241
0a034303180032001f030f030d0034001f03080307b2321f20bb03400001
00400388b3090b3240b80388b2101532bd038503070014001f03800307b2
171f0fbd030a002f030a0002ffc00354b3090d3290410c035400a0035400
02001f036e0001009f036e00010040036eb2090b3241110345031c001600
1f036b031d0015001f0346031e0015001f03a703a10046001f039db3261c
1fc0bb0393000100400392b3090d3240b8033eb2083340b8033eb30d0e32
c04109033e000100b0038e00c0038e0002ffc00390b32638320041260328
0030032800020020037f0030037f00020010038a0030038a0050038a006f
038a007f038a009f038a000600000389003003890002002f037a00700377
00900377009f037a0004ffc00315b20f1032b9ffc00315b2242832b90319
0318b2321f10bb031a0001ffc0031ab3090e3240b80318b2121332b9ffc0
0318b30c0e323fbd0373004f0373000200400374b31718326fbb032a0001
0040032cb3181b3240b80370b2090c32bd031703160032001fffc00316b2
0e1132bd031c031e0016001f031d031eb2151fb0411f031e0001000f031f
000102ca02d00015001f02d302d5000d001f02cf02d0000d001f02cb02d0
000d001f02cd02d0000d001f02ce02d0000d001fffc002d0b3090c3240b8
02d2b3090c32e0411c02e50001005f02dd009f02e5000202bb02c3003000
1f02da02b80032001f02d902b9003f001f02d802b80064001f02b902b800
33001f02bab221c81fb802b8b321c81f40b8039bb20d1632b9ffc002c3b2
2b2f32b9ffc002c3b21f2532b9ffc002c3b2171b32b9ffc002c3b2121632
412502c202c1001c001f02d702c10024001f02c102c00022001f02bf02c0
0018001f02c0027400c8001f02b50235003b001f02b40235003b001f02c4
02bc001e001f02b702b60038001f02b3b20ec81fb802b0b207c81fb802af
b206c81fb802aeb200c81fb802afb2502f1fbc02ae02ab001a001f02adb2
261a1fb802a8b326241f0fbb0235000102a50274b21d1f12410a02a10158
01f4001f02a000d801f4001f001202a2b237c81fb80290b2bc201fb90290
02904018374025402d40a6033025302d30a6032025202d203720a6204110
028e0005009f028b0001028b028b00370020028900300289004002890090
0289b20437b041fd027400c0027400020080027400a00274000200600274
007002740002000002740010027400020080027400f002740002003f0285
004f028500020090027e0090027f009002800090028100040090027a0090
027b0090027c0090027d000400900274009002750090027700030070027e
0070027f007002800070028100040070027a0070027b0070027c0070027d
000400700274007002750070027700030060027e0060027f006002800060
028100040060027a0060027b0060027c0060027d00040060027400600275
0060027700030050027e0050027f005002800050028100040050027a0050
027b0050027c0050027d000400500274005002750050027700030040027e
0040027f004002800040028100040040027a0040027b0040027c0040027d
000400400274004002750040027700030030027e0030027f003002800030
028100040030027a0030027b0030027c0030027d00040030027400300275
0030027700030020027e0020027f002002800020028100040020027a0020
027b0020027c0020027d000400200274002002750020027700030010027e
0010027f001002800010028100040010027a0010027b0010027c0010027d
0004001002740010027500100277000300e0027e00e0027f00e0028000e0
0281000400e0027a00e0027b00e0027c00e0027d000400e0027400e00275
00e00277b103d041c5027e00d0027f00d0028000d00281000400d0027a00
d0027b00d0027c00d0027d000400d0027400d0027500d002770003003002
7400400274000200c0027e00c0027f00c0028000c00281000400c0027a00
c0027b00c0027c00c0027d000400c0027400c0027500c00277000300b002
7e00b0027f00b0028000b00281000400b0027a00b0027b00b0027c00b002
7d000400b0027400b0027500b00277000300a0027e00a0027f00a0028000
a00281000400a0027a00a0027b00a0027c00a0027d000400a0027400a002
7500a0027700030090027e0090027f009002800090028100040090027a00
90027b0090027c0090027d00040090027400900275009002770003002002
7e0020027f002002800020028100040020027a0020027b0020027c002002
7d00040020027400200275002002770003028101580801001f0280012908
01001f027f00ec0801001f027e00d80801001f027d00b10801001f027c00
a60801001f027b00820801001f027a00370801001f027700260801001f02
7500200801001f0274001f0801b21f370f41160235004f0235005f023500
6f0235009f023500af023500bf0235000700af023500cf023500df023500
ff02354022040f074f079f07af07bf0705af07e007020f064f069f06af06
bf0605af06e0060220411b020d0001005f02350001008f02350001007f02
3500ef02350002002f0235003f02350002003f0234004f02340002023502
35023402344011ed20ef2a01cf2a01bf2a01af2a018f2a01410902470104
001e001f022000370201001f0158400c263e1fd8263e1f3726273e1fb802
8eb6ec171fb226361fb801bcb226361fb80129402b26361fec26361fb126
361fa626361f8226361f3726361f3226361f2d26361f2526361f1f26361f
37262a1fb801584022263e1fd8263e1fbc263e1f27263e1f21263e1f2026
3e1f3700161600000012110840b9020d01a6b3c50d0009b801bcb227281f
b801bbb227301fb801b8b2274f1fb801b7b227621f410901b60027010100
1f01b5002002ab001f01afb21fe41fb801adb21fe41fb801acb21fbb1fb8
01a8b21f341fb8015db2272e1fb8015bb227cd1f410d0155001f0401001f
0154001f0401001f0153001f0201001f0152b21f561fb80151b21f291fb8
012bb227261f410d012a00270125001f0129015800e4001f0125001f0401
001f0124b21fe41fb80123b21f3b1fb80122b21f391f410d010800270801
001f0106002d0101001f0105001f0101001f0103b31fbb1fefb901580401
400b1fed1f931fec1fe41feb1fb80201b21fd920b80401b21fcf25b80156
400a1fbc2d9e1fbb1f411fb2410a01580401001f00b101580401001f00b0
01580401b51fa625891f9bb901580125b61f991f2e1f8e2db80801b51f8d
1f291f89b901580401b21f8220b802ab40131f801f301f742de41f731f4a
1f611f521f5d25b802abb21f5c1fbc0801001f0059015802abb61f502589
1f491fb80125b21f4725b80401400b1f461f791f401f271f3920bc02ab00
1f003801580401b21f372dbc0125001f003201580125b61f2c1f341f2a25
b80801b21f5537b80111402a07f00790075b0742073b07230722071e071d
071408120810080e080c080a080808060804080208000814b8ffe0402b00
000100140610000001000604000001000410000001001002000001000200
000001000002010802004a00b013034b024b5342014bb0c063004b6220b0
f65323b8010a515ab005234201b0124b004b5442b0382b4bb807ff52b037
2b4bb007505b58b101018e59b0382bb00288b801005458b801ffb101018e
851bb0124358b10100858d1bb900010119858d5959001816763f183f123e
113946443e113946443e113946443e113946443e11394660443e11394660
442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b182b1db0964b53
58b0aa1d59b0324b5358b0ff1d594bb08153205c58b9020f020d4544b902
0e020d45445958b90470020f455258b9020f04704459594bb0e453205c58
b90020020e4544b90027020e45445958b908420020455258b90020084244
59594bb8012553205c58b90026020f4544b90021020f45445958b90a0d00
26455258b900260a0d4459594bb8040153205c58b1d8204544b120204544
5958b9250000d8455258b900d825004459594bb8040153205c58b9015800
264544b1262645445958b923200158455258b9015823204459594bb02953
205c58b11f1f4544b12d1f45445958b9010d001f455258b9001f010d4459
594bb02f53205c58b11f1f4544b1251f45445958b90135001f455258b900
1f01354459594bb8030153205c58b11f1f4544b11f1f45445958b9142800
1f455258b9001f14284459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b01b331757ec34565234560
23456560234560b08b766818b080622020b17e754565234520b003266062
636820b003266165b075236544b07e234420b131c34565234520b0032660
62636820b003266165b0c3236544b0312344b100c3455458b1c3406544b2
3140314523614459b33f3c5841456523456023456560234560b089766818
b080622020b1583c4565234520b003266062636820b003266165b03c2365
44b058234420b13f414565234520b003266062636820b003266165b04123
6544b03f2344b10041455458b141406544b23f403f452361445945695342
014b5058b108004259435c58b108004259b3020b0a124358601b21594216
10703eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d2342
b0124358b92d412d411bba04000400000b2b59b00e2342b00f2342b01243
58b9187e3b211bba01a80400000b2b59b0102342b0112342002b2b2b2b2b
2b2b2b00b01243584bb035514bb021535a58b1262645b040614459592b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b737373737345b0406144180045
69444569447373737473737374737473742b2b2b2b2b2b2b2b2b2b2b2b00
737373737373737373737373737373737373737373737474747474747474
747474747474747474747474747575757374757575752b7300004bb02a53
4bb036515a58b1070745b040604459004bb02e534bb036515a58b1030345
b0406044b1090945b8ffc06044592b4569440174007373732b4569442b01
2b435c58400a0006000702a006a00702b9ffc00274b31a1d326fbd027700
7f02770002ffc00277b22f3132b9ffc00277b322253240b80274b32f3532
40b80274b3282a3240b80274b21a2132b8ffc0b3371a1d32b8ffc0b3251a
1d32b8ffc040112d1a1d329025902d9037a025a02da03706b8ffc0b6a61a
1d321fa61fb8028eb22fa60300742b732b2b2b2b2b2b2b2b742b73745900
2b2b435c58b9ffc002a1b21c1d32b9ffc002a0b21c1d322b2b592b73012b
2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b
73742b2b2b2b2b2b2b2b73732b2b2b2b2b2b732b732b2b2b742b2b2b7373
7373732b73732b2b2b732b2b002b2b2b2b7374732b732b2b2b2b752b2b2b
2b2b2b2b2b752b2b2b2b2b732b2b2b2b7374752b2b7373732b2b2b732b73
7374752b2b7374752b2b7374752b2b2b2b2b2b2b2b2b2b2b2b74752b0000
00>
[6337 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 384 17 <00010093000001ac01190003002440150238000a02260f001f0020003000
040019046776182b4e10f45d4dfd003f4ded3130331121119301190119fe
e700>HIBBAA+Arial-BoldMT AddT42Char 
2 532 19 <00020056ffe7040e05c0000e00200093404b780a880aa701aa07aa09a70e
b709c8090856115916591a561f67116816681a671f08390239063609360d
490249064509460da709cb02c906c409c40dd902db06d409d40d11101820
180218b8ffc0402512163418a6080d1f0f2f0f020f401216340fa600051d
d84f0401041a2214d80b1921d3c2182b4e10f44ded4e10f6714ded003fed
2b713fed2b713130015d005d5d0132171611100706232200111037361722
060706111016163332363736111026260232d5788f9077d5d6fefa9077d5
3350161d344f333350161d344f05c098b4fe5ffe60b696014901a6019eb6
96e941546dfefefefec14041546c01020102c141>HIBBAA+Arial-BoldMT AddT42Char 
2 922 21 <000100330000040c05c0001d013f405fb518b61ab91bca04c718d018d019
d01a08431b431c431d56199b049518aa04a61c08061a20002806371a4804
43184319431a0824182419241a03162604560488189c1b9c1c9c1daa1caa
1d0812001d101d201d311d761d841d901dd61d081db8ffc040161415341d
02100c0f1d10002000022000300040000300b8ffc0b312163400b802a1b3
02010c0fb8015640231f0c2f0c020c401216340ca6130509d81616014f00
01001a1f0fd8107702191ed3c2182b4e10f44df4ed4e10f6713c3c4d10ed
003ffd2b71e43f3cfd2b5d713c1112390111332b5d435c58b9001dffc0b2
11391db8ffc0b20f391db8ffc0400e10390408103905081139040811392b
2b2b2b2b2b59b10602435458400b091b191b021b13010413000011123911
12395d593130015d4b5158bd001bffe0001cffe0001dffe0383838590171
5d5d5d011121361237363736353426232206072536243332161514060706
040607040cfc2710a0ecbe2b3a6559586808fee8190108c6d9f8474d33fe
f647160105fefb940109dbb13f57555e656a7b1ce8caeaae63b36241f450
2600>HIBBAA+Arial-BoldMT AddT42Char 
2 0 0 <00020100000005000500000300070042b40201fe0607b8023f4013000504
fe03000a0704fe010019080605fe0203bc0126000901b0011800182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/period 17 def
/zero 19 def
/two 21 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 46 /period put
dup 48 /zero put
dup 50 /two put
pop
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT /HIBBAA+Arial-BoldMT findfont ct_VMDictPut
/LEPHWN+Arial-BoldMT*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two 205{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
323.595 470.171 mo
(0.2)
[8.896 4.448 0 ]xsh
388.501 451.421 mo
388.501 449.171 li
@
388.501 263.92 mo
388.501 266.92 li
@
LEPHWM+Arial-BoldMT [16 0 0 -16 0 0 ]msf
372.751 470.171 mo
(\000\355)sh
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 792 20 <000100a20000032605c00009005640096b027b028b02030204b80129b35f
050105b8025eb708090501000c0900bb015800020001025d400d0500041f
042004b0040404190aba01a701a000182b4e10f45d3c4df63cfd3c003f3c
3f3cf45ded393130005d212111060735362437330326fee79ad16e010230
e404239045ff24c98600>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/one 20 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two 205{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
382.095 470.171 mo
(0.1)
[8.896 4.448 0 ]xsh
447.001 451.421 mo
447.001 449.171 li
@
447.001 263.92 mo
447.001 266.92 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
442.501 470.171 mo
(0)sh
505.501 451.421 mo
505.501 449.171 li
@
505.501 263.92 mo
505.501 266.92 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
494.251 470.171 mo
(0.1)
[8.896 4.448 0 ]xsh
564.752 451.421 mo
564.752 449.171 li
@
564.752 263.92 mo
564.752 266.92 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
553.502 470.171 mo
(0.2)
[8.896 4.448 0 ]xsh
330.001 451.421 mo
332.251 451.421 li
@
564.752 451.421 mo
561.752 451.421 li
@
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 1344 23 <000200260000044405c0000a000d00df40390c200d39090c190c2b0c530c
6b0ce20c06ed0d01060416042504280d480d5b0da70db70dc60d09010208
000c060d07050a0b0d07000c0c0d0db801ae401a03041403030403020c04
0d030d02040a0007400dc00dd00d030dbb01280008000201b4b600040400
0c0c00b80158b4058f0a010ab80102401210079f07bf0703071a0f3f027f
020202190eba014c014800182b4e10e47110f65d4df45d3cfd3c003f3f10
f43cfd5d3c0111123912393900111239123987052e2b047d10c40f0f0fb1
0602435458400b2d0c3d0c4d0ccd0cdd0c05005d593130015d5d005d2b21
11213501331133152311011101027efda8027cecb6b6fef0feaf0127f603
a3fc5ef7fed9021e01f5fe0b>HIBBAA+Arial-BoldMT AddT42Char 
2 2906 28 <00020041ffe6041405c00017002300d040583b114b11650b7a088908a905
a908a60ea613b500b903b50eb811b413c500ca11c013113413560b590d5f
115213601306190577169917dd10df14056813010004010718121f1b2f1b
021b401216341ba60f05102120210221b8ffc0401012163421a63009014f
09df09f0090309b8014fb3a0010101b80121b5100420040204b8ffc0401b
12163404a6150d18d84f1201121a2501d800771ed80c1924d3c2182b4e10
f44dedf4ed4e10f6714ded003ffd2b71f45df65d71ed2b713fed2b710111
123900111239313001715d00715d13251616333236370623220235340033
32001110002322260134262322061514163332365d01100a5445577a116a
9fadfb0109cddf011efed6efacd4025e7d524e677054516f01531e5350a0
fc7b010bd6df0111fea7fe75fe6efe9cb7031c88967b8c8e8580>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/four 23 def
/nine 28 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 52 /four put
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
4{/.notdef}rp /nine 198{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
277.501 457.421 mo
(0.9994)
[8.89441 4.44638 8.89441 8.89438 8.89441 0 ]xsh
330.001 389.17 mo
332.251 389.17 li
@
564.752 389.17 mo
561.752 389.17 li
@
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 1626 24 <0001005bffe7043505a6001d01104029080e200c371245124919990d9e0e
9712da0e0912111312211123128512050004010d0a0c0c0d121111b802a0
40160e0d140e0e0d120a1420013001400103500190010201b80156b51004
20040204b8ffc0b712163404a61b0d0cb8025a400d1f0a2f0a020a401216
340aa614b8ffc0400b1416342014301440140314b801ab401411111f102f
10022f103f104f1003104012163410b802a040130f0f0e040f10e007d8d0
1701401701171a1f0eb8012140120d7701bcd0000140009f00af00030019
1ed3b9014700182b4e10f45d714dedf4e44e10f65d714dedf43c003f3c10
fd2b5d713c10f65d2bfd2b71e43ffd2b71e45d7111123987052e2b0e7d10
c401113900111239111239313001715d1325161633323635342623220727
132111210736333200151407062322245b01180c764d587a79617960e490
02e7fdee2c5e62bb0104698ffecbff0001791d5f6f8f9087876b2102fbfe
f9f92ffef0d9b58ec2da>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/five 24 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/five 3{/.notdef}rp /nine 198{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
277.501 395.171 mo
(0.9995)
[8.89441 4.44638 8.89441 8.89438 8.89441 0 ]xsh
330.001 326.92 mo
332.251 326.92 li
@
564.752 326.92 mo
561.752 326.92 li
@
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 1996 25 <00020057ffe7042a05c00017002300bd403b6a0b750887089719a705a708
a90eaa13b90eb611bd13c011cf130d1505361144107a16b502d210d01407
bb00cf0002000401071812101b201b021bb8ffc0401e1216341ba60f0d1f
212f2102214012163421a63f09014009d009ff090309b8014fb3af010101
b8012140221f042f0402044012163404a6150501d800771ed84f0c010c1a
2518d8121924d3c2182b4e10f44ded4e10f6714dedf4ed003ffd2b71f45d
f65d71ed2b713fed2b7101111239001112395d3130015d005d0105262623
220607363332121514002322001110003332160114163332363534262322
06040ffef00a5443597b10699cb0fbfef8cfdefee2012aeea7dbfda17e51
4e687054517004531e5450a0fd7cfef4d4e1fef00159018901930164bbfc
e989957a8b8f857f>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/six 25 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/five /six 2{/.notdef}rp /nine 198{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
277.501 332.92 mo
(0.9996)
[8.89441 4.44638 8.89441 8.89438 8.89441 0 ]xsh
330.001 264.67 mo
332.251 264.67 li
@
564.752 264.67 mo
561.752 264.67 li
@
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 2304 26 <000100570000041805a6000b0086b90004ffe040310f11340a0b1a0b3a04
380a4805560baa0bbe0bcd0bd90b0a210b010b0307001f0b2f0b022f0b3f
0b4f0b030b401216340bba02a0000301acb70202010407080c08b80158b3
2f070107b80260400e024f0301031a0d0100190cd3c2182b4e10f43c10f6
713c4df45dfd003f3c3f3c10edfd2b5d713c011112395d3130015d2b1311
211506020217211212375703c177f68101fef107edc604a10105cc75fe4a
fe13c201300278f9>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/seven 26 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/five /six /seven /.notdef /nine 198{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
277.501 270.67 mo
(0.9997)
[8.89441 4.44638 8.89441 8.89438 8.89441 0 ]xsh
330.001 263.92 mo
332.251 263.92 li
@
564.752 263.92 mo
561.752 263.92 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
277.501 269.92 mo
(0.9997)
[8.89441 4.44638 8.89441 8.89438 8.89441 0 ]xsh
330.001 263.92 mo
564.752 263.92 li
@
330.001 451.421 mo
564.752 451.421 li
564.752 263.92 li
@
330.001 451.421 mo
330.001 263.92 li
@
1 /0 /CSD get_res sepcs
.85 sep
%ADOBeginSubsetFont: QJJAAA+Symbol Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+Symbol def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Symbol) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /epsilon put
def
/FontBBox {-180 -293 1090 1010} def
end
systemdict begin
dup /Private
9 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 673 688 487 500] def
/StdHW [92] def
/StdVW [85] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/epsilon <1C60D8A8C9B764275FD1AF415106C2A151940F96329899416FFD40
F1546A9AC38C52540A08B4468D4490F0116004D3DE275599758B4B486585C443
CAD9B947E17A4199A9661FB7071ED80848AC72E5686FE00A87B31791B7C078A0
65009AAF2021ADD47AA999151B07D40ACF56180444BFC9893FE9CDFD452BEA3D
0EF2CFCC0C7F4159A5984DEE50BA8A51ADBB85149D4CBAF98EC25934CCC1B7C4
512D8A041FF512C3AA0153200D7548487C31F47D1AB3776BE2965A4E75A4B185
D782EFDC84C76788B71CFC> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LEPHWO+Symbol /QJJAAA+Symbol findfont ct_VMDictPut
/LEPHWO+Symbol*1 
[101{/.notdef}rp /epsilon 154{/.notdef}rp]
LEPHWO+Symbol nf
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
442.501 491.171 mo
(e)sh
1.5 lw
448.501 320.92 mo
453.751 320.92 li
456.751 322.42 li
457.501 321.67 li
459.001 320.92 li
459.751 322.42 li
462.001 322.42 li
463.501 320.92 li
464.251 324.67 li
465.751 326.92 li
467.251 321.67 li
468.001 324.67 li
469.501 323.17 li
470.251 327.67 li
471.751 326.17 li
472.501 324.67 li
474.001 326.92 li
475.501 328.42 li
477.751 326.17 li
478.501 329.17 li
480.001 328.42 li
480.751 332.92 li
482.251 326.17 li
483.751 329.17 li
484.501 329.17 li
486.001 335.92 li
486.751 329.17 li
488.251 331.42 li
489.001 332.17 li
490.501 336.67 li
491.251 333.67 li
492.751 338.92 li
494.251 338.92 li
495.001 337.42 li
496.501 338.92 li
497.251 347.17 li
498.751 347.17 li
499.501 348.67 li
501.001 336.67 li
502.501 337.42 li
503.251 350.17 li
504.751 348.67 li
505.501 356.92 li
507.001 356.17 li
507.751 353.92 li
509.251 351.67 li
510.751 345.67 li
511.501 361.42 li
513.001 353.17 li
513.751 353.92 li
515.251 347.92 li
516.001 354.67 li
517.501 354.67 li
518.252 353.17 li
519.752 377.92 li
521.252 355.42 li
522.002 367.42 li
523.502 372.67 li
524.252 362.92 li
525.752 371.17 li
526.502 365.17 li
528.002 350.92 li
529.502 382.42 li
530.252 374.17 li
531.752 376.42 li
532.502 377.17 li
534.002 377.17 li
534.752 383.92 li
536.252 378.67 li
537.752 398.171 li
538.502 375.67 li
540.002 375.67 li
540.752 387.67 li
542.252 380.17 li
543.002 388.42 li
544.502 397.421 li
545.252 392.17 li
546.752 393.671 li
548.252 411.671 li
549.002 401.921 li
550.502 409.421 li
551.252 399.671 li
552.752 383.92 li
553.502 416.171 li
555.002 409.421 li
556.502 406.421 li
557.252 422.171 li
558.752 413.921 li
559.502 401.921 li
561.002 429.671 li
561.752 424.421 li
563.252 395.921 li
564.752 398.921 li
0 .945647 .852842 0 cmyk
@
332.251 448.421 mo
333.001 446.921 li
334.501 411.671 li
335.251 398.171 li
336.751 410.921 li
337.501 422.171 li
339.001 404.921 li
340.501 394.421 li
341.251 401.921 li
342.751 409.421 li
343.501 400.421 li
345.001 375.67 li
345.751 380.92 li
347.251 378.67 li
348.751 388.42 li
349.501 387.67 li
351.001 391.42 li
351.751 376.42 li
353.251 388.42 li
354.001 371.17 li
355.501 374.17 li
357.751 385.42 li
359.251 382.42 li
360.001 377.17 li
361.501 356.17 li
362.251 378.67 li
363.751 370.42 li
364.501 365.17 li
366.001 360.67 li
367.501 356.92 li
368.251 368.92 li
369.751 376.42 li
370.501 353.17 li
372.001 368.17 li
372.751 361.42 li
374.251 356.92 li
375.751 358.42 li
376.501 355.42 li
378.001 361.42 li
378.751 362.17 li
380.251 354.67 li
381.001 356.92 li
382.501 335.17 li
383.251 336.67 li
384.751 350.92 li
386.251 338.17 li
387.001 345.67 li
388.501 335.92 li
389.251 340.42 li
390.751 329.17 li
391.501 349.42 li
393.001 351.67 li
394.501 340.42 li
395.251 347.17 li
396.751 338.17 li
397.501 338.92 li
399.001 334.42 li
399.751 339.67 li
401.251 336.67 li
402.751 340.42 li
403.501 338.92 li
405.001 330.67 li
405.751 338.17 li
407.251 334.42 li
408.001 336.67 li
409.501 326.92 li
410.251 330.67 li
411.751 331.42 li
413.251 331.42 li
414.001 329.17 li
415.501 327.67 li
416.251 328.42 li
417.751 328.42 li
418.501 329.92 li
420.001 326.17 li
421.501 327.67 li
423.751 323.17 li
424.501 323.92 li
426.001 321.67 li
426.751 326.17 li
428.251 323.92 li
429.751 323.92 li
430.501 324.67 li
432.001 319.42 li
432.751 323.17 li
435.001 320.92 li
436.501 322.42 li
437.251 321.67 li
440.251 321.67 li
441.001 320.92 li
442.501 320.92 li
443.251 320.17 li
444.751 320.92 li
445.501 320.17 li
447.001 320.92 li
448.501 320.92 li
@
gsave
565.502 263.92 mo
330.001 263.92 li
330.001 452.171 li
565.502 452.171 li
cp
clp
330.001 409.421 mo
330.751 419.921 li
332.251 448.421 li
@
grestore
331.501 205.42 mo
566.252 205.42 li
566.252 20.17 li
331.501 20.17 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
.5 lw
331.501 205.42 mo
331.501 20.169 li
566.252 20.169 li
566.252 205.42 li
331.501 205.42 li
@
331.501 20.169 mo
566.252 20.169 li
1 /0 /CSD get_res sepcs
1 sep
@
331.501 205.42 mo
566.252 205.42 li
566.252 20.169 li
@
331.501 205.42 mo
331.501 20.169 li
@
331.501 205.42 mo
566.252 205.42 li
@
331.501 205.42 mo
331.501 20.169 li
@
331.501 205.42 mo
331.501 202.42 li
@
331.501 20.169 mo
331.501 22.419 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
327.001 223.42 mo
(0)sh
390.001 205.42 mo
390.001 202.42 li
@
390.001 20.169 mo
390.001 22.419 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
378.751 223.42 mo
(0.5)
[8.896 4.448 0 ]xsh
448.501 205.42 mo
448.501 202.42 li
@
448.501 20.169 mo
448.501 22.419 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
444.001 223.42 mo
(1)sh
507.001 205.42 mo
507.001 202.42 li
@
507.001 20.169 mo
507.001 22.419 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
495.751 223.42 mo
(1.5)
[8.896 4.448 0 ]xsh
566.252 205.42 mo
566.252 202.42 li
@
566.252 20.169 mo
566.252 22.419 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
561.752 223.42 mo
(2)sh
331.501 205.42 mo
333.751 205.42 li
@
566.252 205.42 mo
563.252 205.42 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
319.501 211.42 mo
(0)sh
331.501 167.92 mo
333.751 167.92 li
@
566.252 167.92 mo
563.252 167.92 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
306.001 173.92 mo
(0.2)
[8.896 4.448 0 ]xsh
331.501 131.17 mo
333.751 131.17 li
@
566.252 131.17 mo
563.252 131.17 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
306.001 137.17 mo
(0.4)
[8.896 4.448 0 ]xsh
331.501 93.67 mo
333.751 93.67 li
@
566.252 93.67 mo
563.252 93.67 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
306.001 99.6703 mo
(0.6)
[8.896 4.448 0 ]xsh
331.501 56.919 mo
333.751 56.919 li
@
566.252 56.919 mo
563.252 56.919 li
@
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 2492 27 <00030053ffe6041705c0001800240030010db530081d1f3426b8fff8406c
1d1f34c711c713d705d707047510761484100326002a0c36003b0c46004c
0c6e0463086711681577278727970d9818a40da918a91aa61ea727a62ca9
30b91ab71e17771386138614872704970c010c970001001c2e980c010c2b
099700010025032e401216343f2e4f2e022eba028e001cffc04010161834
701c801c02a01c011c1c061228b8ffc04009121634302840280228b8028e
400d120d3f224f2202224012163422b8028e401a06051fd809772bd84f0f
010f1a3219d8037725d8161931d3c2182b4e10f44dedf4ed4e10f6714ded
f4ed003fed2b5d3ffd5d2b1011392f5d712bed5d2b011112395d1112395d
001112395d395d313001715d00715d2b2b01262635343633321615140607
161615140423222726353436131416333236353426232206031416333236
35342623220601486d63e5d3d1e76a607a7ffefdd7c8859d76b95f4f5060
5f4e51601a775957727459676503172ea160a4d6d6a4669f2a31bc7bcbfe
697cd877c70151545e5f544f5f60fd3d74827d76677d8e00>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/eight 27 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/five /six /seven /eight /nine 198{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
306.001 62.9193 mo
(0.8)
[8.896 4.448 0 ]xsh
331.501 20.169 mo
333.751 20.169 li
@
566.252 20.169 mo
563.252 20.169 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
319.501 26.1693 mo
(1)sh
331.501 20.169 mo
566.252 20.169 li
@
331.501 205.42 mo
566.252 205.42 li
566.252 20.169 li
@
331.501 205.42 mo
331.501 20.169 li
@
2.5 lw
511.501 144.67 mo
511.501 142.42 li
513.001 140.92 li
513.001 140.17 li
514.501 140.17 li
516.751 137.92 li
516.751 135.67 li
517.501 134.92 li
517.501 132.67 li
518.252 131.92 li
518.252 128.17 li
519.002 127.42 li
519.002 123.67 li
519.752 122.92 li
519.752 119.17 li
520.502 118.42 li
520.502 116.17 li
521.252 115.42 li
521.252 113.17 li
522.752 111.67 li
524.252 111.67 li
525.752 110.17 li
525.752 108.67 li
526.502 107.92 li
526.502 105.67 li
527.252 104.92 li
527.252 101.17 li
528.002 100.42 li
528.002 96.67 li
528.752 95.92 li
528.752 92.17 li
529.502 91.42 li
529.502 87.67 li
530.252 86.92 li
530.252 84.67 li
531.752 83.17 li
531.752 82.42 li
533.252 82.42 li
535.502 80.17 li
535.502 77.92 li
536.252 77.169 li
536.252 74.169 li
537.002 73.419 li
537.002 70.419 li
537.752 69.669 li
537.752 65.919 li
538.502 65.169 li
538.502 62.169 li
539.252 61.419 li
539.252 58.419 li
540.752 56.919 li
540.752 55.419 li
542.252 55.419 li
545.252 52.419 li
545.252 50.169 li
546.002 49.419 li
546.002 47.169 li
546.752 46.419 li
546.752 43.419 li
547.502 42.669 li
547.502 40.419 li
548.252 39.669 li
548.252 38.169 li
549.002 37.419 li
549.002 35.919 li
550.502 34.419 li
552.002 34.419 li
555.002 31.419 li
555.002 29.919 li
556.502 28.419 li
556.502 26.169 li
558.002 24.669 li
558.002 23.919 li
558.752 23.169 li
559.502 23.169 li
560.252 22.419 li
563.252 22.419 li
564.002 21.669 li
566.252 21.669 li
.848478 .691768 .00411994 0 cmyk
@
452.251 116.17 mo
454.501 118.42 li
458.251 118.42 li
462.001 122.17 li
462.001 123.67 li
463.501 125.17 li
463.501 126.67 li
468.001 126.67 li
469.501 128.17 li
469.501 129.67 li
470.251 130.42 li
470.251 131.92 li
471.001 132.67 li
471.001 134.17 li
472.501 135.67 li
472.501 137.17 li
474.001 138.67 li
475.501 137.17 li
477.001 137.17 li
478.501 138.67 li
478.501 140.17 li
479.251 140.92 li
479.251 142.42 li
480.001 143.17 li
480.001 144.67 li
480.751 145.42 li
480.751 147.67 li
482.251 149.17 li
482.251 149.92 li
483.001 149.92 li
485.251 147.67 li
486.001 147.67 li
488.251 149.92 li
488.251 152.17 li
489.001 152.92 li
489.001 154.42 li
489.751 155.17 li
489.751 157.42 li
491.251 158.92 li
491.251 159.67 li
492.001 159.67 li
493.501 158.17 li
493.501 157.42 li
495.001 155.92 li
494.251 155.92 li
495.751 155.92 li
497.251 157.42 li
497.251 158.92 li
498.001 159.67 li
498.001 161.17 li
498.751 161.92 li
498.751 163.42 li
500.251 164.92 li
499.501 164.92 li
500.251 164.92 li
502.501 162.67 li
502.501 161.92 li
503.251 161.17 li
503.251 160.42 li
504.751 158.92 li
504.001 158.92 li
504.751 158.92 li
507.001 161.17 li
507.001 162.67 li
507.001 161.92 li
507.751 161.17 li
507.751 159.67 li
508.501 158.92 li
508.501 155.92 li
509.251 155.17 li
509.251 152.17 li
510.001 151.42 li
510.001 148.42 li
510.751 147.67 li
510.751 145.42 li
511.501 144.67 li
@
389.251 159.67 mo
389.251 161.92 li
390.751 163.42 li
390.751 164.92 li
391.501 165.67 li
392.251 165.67 li
393.751 164.17 li
393.751 162.67 li
395.251 161.17 li
395.251 159.67 li
396.751 158.17 li
396.751 157.42 li
397.501 157.42 li
400.501 160.42 li
400.501 161.17 li
401.251 161.92 li
403.501 159.67 li
403.501 158.17 li
404.251 157.42 li
404.251 155.92 li
405.001 155.17 li
405.001 153.67 li
405.751 152.92 li
405.751 151.42 li
407.251 149.92 li
410.251 152.92 li
411.001 152.92 li
412.501 151.42 li
412.501 149.92 li
413.251 149.17 li
413.251 147.67 li
414.001 146.92 li
414.001 145.42 li
414.751 144.67 li
414.751 143.17 li
415.501 142.42 li
415.501 140.92 li
417.001 139.42 li
417.751 139.42 li
419.251 140.92 li
420.751 140.92 li
422.251 139.42 li
422.251 137.92 li
423.001 137.17 li
423.001 135.67 li
423.751 134.92 li
423.751 133.42 li
424.501 132.67 li
424.501 131.17 li
426.001 129.67 li
426.001 128.92 li
426.751 128.17 li
427.501 128.17 li
428.251 128.92 li
429.751 128.92 li
432.751 125.92 li
432.751 124.42 li
433.501 123.67 li
433.501 122.17 li
435.751 119.92 li
435.001 119.92 li
435.751 119.92 li
436.501 119.17 li
437.251 119.92 li
439.501 119.92 li
444.001 115.42 li
449.251 115.42 li
450.001 114.67 li
450.751 115.42 li
451.501 115.42 li
452.251 116.17 li
@
340.501 24.669 mo
340.501 26.169 li
341.251 26.919 li
341.251 28.419 li
342.751 29.919 li
342.751 31.419 li
344.251 32.919 li
343.501 32.919 li
345.751 32.919 li
348.751 35.919 li
348.751 38.919 li
349.501 39.669 li
349.501 41.919 li
350.251 42.669 li
350.251 44.919 li
351.001 45.669 li
351.001 48.669 li
351.751 49.419 li
351.751 50.919 li
353.251 52.419 li
353.251 53.919 li
355.501 53.919 li
357.001 55.419 li
357.001 56.919 li
357.751 57.669 li
357.751 59.919 li
358.501 60.669 li
358.501 64.419 li
359.251 65.169 li
359.251 68.169 li
360.001 68.919 li
360.001 72.669 li
360.751 73.419 li
360.751 76.419 li
361.501 77.169 li
361.501 78.67 li
363.001 80.17 li
363.001 80.92 li
364.501 80.92 li
366.001 82.42 li
366.001 83.92 li
366.751 84.67 li
366.751 86.92 li
367.501 87.67 li
367.501 90.67 li
368.251 91.42 li
368.251 95.17 li
369.001 95.92 li
369.001 99.67 li
369.751 100.42 li
369.751 104.17 li
370.501 104.92 li
370.501 107.92 li
372.001 109.42 li
372.001 110.92 li
373.501 110.92 li
375.751 113.17 li
375.751 114.67 li
376.501 115.42 li
376.501 118.42 li
377.251 119.17 li
377.251 122.92 li
378.001 123.67 li
378.001 127.42 li
378.751 128.17 li
378.751 131.92 li
379.501 132.67 li
379.501 134.92 li
380.251 135.67 li
380.251 137.92 li
381.751 139.42 li
381.001 139.42 li
382.501 139.42 li
383.251 140.17 li
384.001 140.17 li
384.751 140.92 li
384.751 142.42 li
385.501 143.17 li
385.501 144.67 li
386.251 145.42 li
386.251 148.42 li
387.001 149.17 li
387.001 152.17 li
387.751 152.92 li
387.751 155.92 li
388.501 156.67 li
388.501 158.92 li
389.251 159.67 li
@
gsave
567.002 20.169 mo
331.501 20.169 li
331.501 206.17 li
567.002 206.17 li
cp
clp
331.501 20.169 mo
332.251 20.169 li
333.751 21.669 li
337.501 21.669 li
340.501 24.669 li
@
grestore
[6 6 ] 0 dsh
507.001 114.67 mo
509.251 114.67 li
510.001 115.42 li
510.751 116.17 li
511.501 116.92 li
514.501 116.92 li
515.251 117.67 li
516.001 117.67 li
517.501 119.17 li
517.501 119.92 li
518.252 120.67 li
518.252 122.17 li
519.752 123.67 li
519.752 125.92 li
520.502 126.67 li
520.502 128.17 li
521.252 128.92 li
522.002 129.67 li
523.502 129.67 li
524.252 130.42 li
525.002 130.42 li
526.502 131.92 li
526.502 134.17 li
527.252 134.92 li
527.252 137.17 li
528.002 137.92 li
528.002 140.17 li
528.752 140.92 li
528.752 143.17 li
529.502 143.92 li
529.502 146.17 li
530.252 146.92 li
530.252 148.42 li
531.002 149.17 li
531.752 149.92 li
533.252 149.92 li
534.002 150.67 li
534.752 151.42 li
535.502 152.17 li
535.502 153.67 li
536.252 154.42 li
536.252 156.67 li
537.002 157.42 li
537.002 159.67 li
537.752 160.42 li
537.752 163.42 li
538.502 164.17 li
538.502 167.17 li
539.252 167.92 li
539.252 169.42 li
540.002 170.17 li
540.002 170.92 li
541.502 172.42 li
540.752 172.42 li
543.002 172.42 li
543.752 173.17 li
545.252 174.67 li
545.252 176.92 li
546.002 177.67 li
546.002 179.92 li
546.752 180.67 li
546.752 182.92 li
547.502 183.67 li
547.502 185.92 li
548.252 186.67 li
548.252 188.17 li
549.002 188.92 li
549.002 190.42 li
549.752 191.17 li
550.502 191.92 li
552.752 191.92 li
553.502 192.67 li
555.002 194.17 li
555.002 195.67 li
556.502 197.17 li
556.502 199.42 li
558.002 200.92 li
558.002 201.67 li
558.752 202.42 li
559.502 203.17 li
563.252 203.17 li
564.002 203.92 li
564.752 203.92 li
565.502 204.67 li
566.252 204.67 li
456.751 200.17 mo
458.251 200.17 li
459.001 199.42 li
460.501 197.92 li
460.501 195.67 li
461.251 194.92 li
461.251 192.67 li
462.001 191.92 li
462.001 189.67 li
462.751 188.92 li
462.751 186.67 li
464.251 185.17 li
464.251 184.42 li
465.001 185.17 li
465.751 185.92 li
468.001 185.92 li
468.001 185.17 li
468.751 184.42 li
468.751 182.92 li
469.501 182.17 li
469.501 179.92 li
470.251 179.17 li
470.251 175.42 li
471.001 174.67 li
471.001 170.92 li
471.751 170.17 li
471.751 167.17 li
472.501 166.42 li
472.501 164.17 li
473.251 163.42 li
474.001 163.42 li
474.751 164.17 li
476.251 165.67 li
476.251 166.42 li
477.001 165.67 li
477.751 164.92 li
477.751 163.42 li
478.501 162.67 li
478.501 160.42 li
479.251 159.67 li
479.251 155.17 li
480.001 154.42 li
480.001 149.92 li
480.751 149.17 li
480.751 145.42 li
481.501 144.67 li
481.501 142.42 li
482.251 141.67 li
482.251 140.17 li
483.001 140.92 li
484.501 142.42 li
484.501 143.92 li
486.001 145.42 li
485.251 145.42 li
486.001 145.42 li
487.501 143.92 li
487.501 140.92 li
488.251 140.17 li
488.251 136.42 li
489.001 135.67 li
489.001 131.17 li
489.751 130.42 li
489.751 126.67 li
490.501 125.92 li
490.501 122.92 li
492.001 121.42 li
491.251 121.42 li
492.001 122.17 li
493.501 123.67 li
493.501 126.67 li
495.001 128.17 li
495.001 129.67 li
495.751 128.92 li
496.501 128.17 li
496.501 126.67 li
497.251 125.92 li
497.251 122.17 li
498.001 121.42 li
498.001 117.67 li
498.751 116.92 li
498.751 113.92 li
499.501 113.17 li
499.501 110.92 li
501.001 109.42 li
500.251 109.42 li
501.001 110.92 li
501.751 111.67 li
501.751 113.17 li
502.501 113.92 li
502.501 116.92 li
503.251 117.67 li
503.251 119.92 li
504.751 121.42 li
504.751 122.17 li
506.251 120.67 li
506.251 117.67 li
507.001 116.92 li
507.001 114.67 li
399.751 118.42 mo
399.751 116.17 li
400.501 115.42 li
400.501 113.92 li
401.251 113.92 li
402.001 114.67 li
402.751 115.42 li
402.751 117.67 li
403.501 118.42 li
403.501 121.42 li
404.251 122.17 li
404.251 126.67 li
405.001 127.42 li
405.001 131.17 li
405.751 131.92 li
405.751 134.92 li
407.251 136.42 li
407.251 137.17 li
408.001 136.42 li
409.501 134.92 li
409.501 132.67 li
410.251 131.92 li
411.001 131.92 li
412.501 133.42 li
412.501 137.17 li
413.251 137.92 li
413.251 141.67 li
414.001 142.42 li
414.001 146.92 li
414.751 147.67 li
414.751 152.17 li
415.501 152.92 li
415.501 155.17 li
416.251 155.92 li
416.251 157.42 li
417.001 158.17 li
417.751 158.17 li
419.251 156.67 li
419.251 155.92 li
420.001 155.17 li
420.751 155.92 li
421.501 156.67 li
421.501 158.17 li
422.251 158.92 li
422.251 161.92 li
423.001 162.67 li
423.001 166.42 li
423.751 167.17 li
423.751 170.92 li
424.501 171.67 li
424.501 175.42 li
425.251 176.17 li
425.251 178.42 li
426.751 179.92 li
426.751 180.67 li
427.501 179.92 li
428.251 179.17 li
429.001 178.42 li
429.751 178.42 li
431.251 179.92 li
431.251 182.17 li
432.001 182.92 li
432.001 185.17 li
432.751 185.92 li
432.751 188.92 li
433.501 189.67 li
433.501 191.92 li
434.251 192.67 li
434.251 194.92 li
435.751 196.42 li
435.751 197.17 li
437.251 197.17 li
438.001 196.42 li
439.501 196.42 li
441.001 197.92 li
441.001 199.42 li
442.501 200.92 li
442.501 202.42 li
444.001 203.92 li
443.251 203.92 li
444.001 203.92 li
444.751 204.67 li
450.751 204.67 li
451.501 203.92 li
453.001 202.42 li
453.001 201.67 li
454.501 200.17 li
454.501 199.42 li
456.001 199.42 li
456.751 200.17 li
346.501 191.92 mo
348.001 190.42 li
348.001 188.92 li
348.751 188.17 li
348.751 186.67 li
349.501 185.92 li
349.501 183.67 li
350.251 182.92 li
350.251 180.67 li
351.001 179.92 li
351.001 177.67 li
351.751 176.92 li
351.751 175.42 li
353.251 173.92 li
353.251 173.17 li
354.001 172.42 li
355.501 172.42 li
356.251 171.67 li
357.751 170.17 li
357.751 167.17 li
358.501 166.42 li
358.501 163.42 li
359.251 162.67 li
359.251 160.42 li
360.001 159.67 li
360.001 156.67 li
360.751 155.92 li
360.751 153.67 li
361.501 152.92 li
361.501 151.42 li
362.251 150.67 li
363.001 149.92 li
364.501 149.92 li
365.251 149.17 li
366.751 147.67 li
366.751 145.42 li
367.501 144.67 li
367.501 142.42 li
368.251 141.67 li
368.251 139.42 li
369.001 138.67 li
369.001 136.42 li
369.751 135.67 li
369.751 133.42 li
370.501 132.67 li
370.501 131.17 li
372.001 129.67 li
371.251 129.67 li
372.001 129.67 li
372.751 128.92 li
374.251 128.92 li
375.001 128.17 li
376.501 126.67 li
376.501 125.17 li
377.251 124.42 li
377.251 122.92 li
378.001 122.17 li
378.001 120.67 li
378.751 119.92 li
378.751 118.42 li
380.251 116.92 li
380.251 116.17 li
381.001 116.17 li
381.751 115.42 li
384.001 115.42 li
384.751 114.67 li
385.501 113.92 li
386.251 113.17 li
387.001 113.17 li
387.751 112.42 li
389.251 112.42 li
390.001 111.67 li
390.001 110.17 li
390.751 109.42 li
390.751 107.17 li
392.251 105.67 li
391.501 105.67 li
392.251 105.67 li
393.001 106.42 li
393.001 107.92 li
393.751 108.67 li
393.751 110.92 li
394.501 111.67 li
394.501 114.67 li
395.251 115.42 li
395.251 118.42 li
396.001 119.17 li
396.001 121.42 li
397.501 122.92 li
396.751 122.92 li
397.501 122.92 li
399.001 121.42 li
399.001 119.17 li
399.751 118.42 li
.605798 0 .889097 0 cmyk
@
gsave
567.002 20.169 mo
331.501 20.169 li
331.501 206.17 li
567.002 206.17 li
cp
clp
331.501 204.67 mo
332.251 204.67 li
333.001 203.92 li
333.751 203.17 li
337.501 203.17 li
338.251 202.42 li
339.001 201.67 li
340.501 200.17 li
340.501 198.67 li
341.251 197.92 li
341.251 196.42 li
342.751 194.92 li
342.751 193.42 li
343.501 192.67 li
344.251 191.92 li
346.501 191.92 li
@
grestore
[] 0 dsh
500.251 154.42 mo
500.251 155.17 li
501.001 155.17 li
502.501 153.67 li
502.501 152.17 li
503.251 151.42 li
503.251 150.67 li
504.751 149.17 li
504.001 149.17 li
504.751 149.17 li
507.001 151.42 li
507.001 153.67 li
507.751 154.42 li
507.751 155.92 li
508.501 156.67 li
508.501 159.67 li
509.251 160.42 li
509.251 162.67 li
510.001 163.42 li
510.001 166.42 li
510.751 167.17 li
510.751 169.42 li
512.251 170.92 li
512.251 172.42 li
513.001 173.17 li
515.251 173.17 li
517.501 175.42 li
517.501 177.67 li
518.252 178.42 li
518.252 179.92 li
519.002 180.67 li
519.002 182.92 li
519.752 183.67 li
519.752 185.17 li
521.252 186.67 li
521.252 187.42 li
522.002 188.17 li
524.252 188.17 li
528.002 191.92 li
528.002 194.17 li
530.252 196.42 li
530.252 197.17 li
531.002 197.92 li
534.752 197.92 li
539.252 202.42 li
544.502 202.42 li
545.252 203.17 li
546.002 203.17 li
546.752 203.92 li
550.502 203.92 li
551.252 204.67 li
552.002 203.92 li
553.502 203.92 li
554.252 204.67 li
566.252 204.67 li
1 /0 /CSD get_res sepcs
1 sep
@
435.001 113.17 mo
436.501 113.17 li
437.251 113.92 li
439.501 113.92 li
443.251 110.17 li
450.751 110.17 li
452.251 111.67 li
453.001 111.67 li
453.751 112.42 li
455.251 112.42 li
456.001 111.67 li
459.001 111.67 li
461.251 113.92 li
461.251 115.42 li
462.751 116.92 li
462.751 118.42 li
463.501 119.17 li
464.251 119.17 li
465.751 117.67 li
468.001 117.67 li
469.501 119.17 li
469.501 120.67 li
470.251 121.42 li
470.251 122.92 li
471.001 123.67 li
471.001 125.17 li
472.501 126.67 li
472.501 128.17 li
473.251 128.92 li
474.001 128.92 li
475.501 127.42 li
475.501 126.67 li
477.001 126.67 li
478.501 128.17 li
478.501 129.67 li
479.251 130.42 li
479.251 131.92 li
480.001 132.67 li
480.001 134.92 li
480.751 135.67 li
480.751 137.17 li
481.501 137.92 li
481.501 138.67 li
483.001 140.17 li
482.251 140.17 li
486.001 136.42 li
487.501 137.92 li
487.501 139.42 li
488.251 140.17 li
488.251 141.67 li
489.001 142.42 li
489.001 143.92 li
489.751 144.67 li
489.751 146.92 li
491.251 148.42 li
491.251 149.17 li
492.001 149.17 li
494.251 146.92 li
494.251 145.42 li
495.001 144.67 li
497.251 146.92 li
497.251 148.42 li
498.001 149.17 li
498.001 150.67 li
498.751 151.42 li
498.751 152.92 li
500.251 154.42 li
@
378.001 182.17 mo
378.751 181.42 li
378.751 179.92 li
379.501 179.17 li
379.501 177.67 li
380.251 176.92 li
380.251 176.17 li
381.751 174.67 li
381.001 174.67 li
383.251 174.67 li
385.501 172.42 li
385.501 170.92 li
386.251 170.17 li
386.251 167.92 li
387.001 167.17 li
387.001 164.92 li
387.751 164.17 li
387.751 161.92 li
388.501 161.17 li
388.501 158.17 li
389.251 157.42 li
389.251 155.92 li
390.001 155.17 li
390.001 156.67 li
391.501 158.17 li
391.501 158.92 li
392.251 158.92 li
393.751 157.42 li
393.751 155.92 li
395.251 154.42 li
395.251 152.17 li
396.751 150.67 li
396.751 149.92 li
398.251 149.92 li
398.251 150.67 li
400.501 152.92 li
400.501 154.42 li
401.251 154.42 li
403.501 152.17 li
403.501 150.67 li
404.251 149.92 li
404.251 148.42 li
405.001 147.67 li
405.001 145.42 li
406.501 143.92 li
406.501 142.42 li
407.251 142.42 li
410.251 145.42 li
411.001 145.42 li
412.501 143.92 li
412.501 142.42 li
413.251 141.67 li
413.251 140.17 li
414.001 139.42 li
414.001 137.92 li
414.751 137.17 li
414.751 134.92 li
416.251 133.42 li
416.251 131.92 li
417.751 131.92 li
420.001 134.17 li
422.251 131.92 li
422.251 130.42 li
423.001 129.67 li
423.001 128.17 li
423.751 127.42 li
423.751 125.92 li
424.501 125.17 li
424.501 123.67 li
426.001 122.17 li
426.001 121.42 li
427.501 121.42 li
428.251 122.17 li
430.501 122.17 li
432.001 120.67 li
432.001 119.17 li
432.751 118.42 li
432.751 116.92 li
434.251 115.42 li
434.251 113.92 li
435.001 113.17 li
@
gsave
567.002 20.169 mo
331.501 20.169 li
331.501 206.17 li
567.002 206.17 li
cp
clp
331.501 204.67 mo
349.501 204.67 li
350.251 203.92 li
351.751 203.92 li
352.501 203.17 li
357.001 203.17 li
358.501 201.67 li
359.251 201.67 li
362.251 198.67 li
366.001 198.67 li
368.251 196.42 li
368.251 194.92 li
369.751 193.42 li
369.751 192.67 li
371.251 191.17 li
371.251 190.42 li
372.001 189.67 li
374.251 189.67 li
377.251 186.67 li
377.251 184.42 li
378.001 183.67 li
378.001 182.17 li
@
grestore
[.5 4 6 4 ] 0 dsh
498.751 133.42 mo
498.751 137.92 li
499.501 138.67 li
499.501 143.17 li
500.251 143.92 li
500.251 146.92 li
501.001 147.67 li
501.001 149.92 li
502.501 151.42 li
501.751 151.42 li
502.501 150.67 li
503.251 149.92 li
504.001 149.17 li
504.751 149.17 li
506.251 150.67 li
506.251 152.92 li
507.001 153.67 li
507.001 155.17 li
509.251 155.17 li
510.001 154.42 li
510.751 154.42 li
511.501 153.67 li
513.001 153.67 li
513.751 154.42 li
514.501 153.67 li
515.251 153.67 li
516.001 152.92 li
516.751 152.17 li
517.501 151.42 li
519.002 149.92 li
519.002 149.17 li
519.752 148.42 li
520.502 147.67 li
522.002 147.67 li
521.252 147.67 li
524.252 147.67 li
525.002 146.92 li
526.502 145.42 li
526.502 143.92 li
527.252 143.17 li
527.252 141.67 li
528.752 140.17 li
528.752 138.67 li
530.252 137.17 li
529.502 137.17 li
531.002 137.17 li
531.752 137.92 li
533.252 137.92 li
534.002 137.17 li
535.502 135.67 li
535.502 133.42 li
537.002 131.92 li
537.002 129.67 li
538.502 128.17 li
538.502 126.67 li
539.252 125.92 li
540.002 125.17 li
540.752 125.92 li
541.502 125.92 li
542.252 126.67 li
543.002 125.92 li
543.752 125.17 li
545.252 123.67 li
545.252 121.42 li
546.752 119.92 li
546.752 118.42 li
548.252 116.92 li
548.252 116.17 li
549.002 115.42 li
549.752 115.42 li
550.502 116.17 li
552.002 116.17 li
552.752 115.42 li
553.502 114.67 li
554.252 113.92 li
555.752 112.42 li
555.752 111.67 li
556.502 110.92 li
557.252 110.17 li
558.002 109.42 li
559.502 109.42 li
560.252 110.17 li
561.002 110.17 li
561.752 109.42 li
566.252 109.42 li
0 .945647 .852842 0 cmyk
@
gsave
567.002 20.169 mo
331.501 20.169 li
331.501 206.17 li
567.002 206.17 li
cp
clp
444.001 20.919 mo
450.751 20.919 li
451.501 21.669 li
452.251 22.419 li
453.751 23.919 li
453.751 25.419 li
454.501 26.169 li
455.251 26.169 li
456.001 25.419 li
458.251 25.419 li
459.001 26.169 li
460.501 27.669 li
460.501 29.919 li
461.251 30.669 li
461.251 32.919 li
462.001 33.669 li
462.001 35.919 li
462.751 36.669 li
462.751 38.919 li
463.501 39.669 li
463.501 41.169 li
464.251 41.919 li
465.001 41.919 li
465.751 41.169 li
466.501 40.419 li
467.251 40.419 li
468.001 41.169 li
468.751 41.919 li
468.751 43.419 li
469.501 44.169 li
469.501 46.419 li
470.251 47.169 li
470.251 50.919 li
471.001 51.669 li
471.001 55.419 li
471.751 56.169 li
471.751 59.919 li
472.501 60.669 li
472.501 63.669 li
474.001 65.169 li
474.001 65.919 li
474.751 65.169 li
475.501 64.419 li
476.251 63.669 li
477.001 64.419 li
478.501 65.919 li
478.501 69.669 li
479.251 70.419 li
479.251 74.169 li
480.001 74.919 li
480.001 79.42 li
480.751 80.17 li
480.751 85.42 li
481.501 86.17 li
481.501 89.92 li
482.251 90.67 li
482.251 92.92 li
483.751 94.42 li
483.001 94.42 li
483.751 94.42 li
484.501 93.67 li
486.001 92.17 li
485.251 92.17 li
486.001 92.17 li
487.501 93.67 li
487.501 96.67 li
488.251 97.42 li
488.251 101.17 li
489.001 101.92 li
489.001 106.42 li
489.751 107.17 li
489.751 112.42 li
490.501 113.17 li
490.501 117.67 li
491.251 118.42 li
491.251 121.42 li
492.001 122.17 li
492.001 123.67 li
492.751 124.42 li
493.501 123.67 li
494.251 122.92 li
495.001 122.17 li
495.751 122.17 li
496.501 122.92 li
496.501 124.42 li
497.251 125.17 li
497.251 128.17 li
498.001 128.92 li
498.001 132.67 li
498.751 133.42 li
@
grestore
394.501 152.92 mo
394.501 149.92 li
395.251 149.17 li
395.251 144.67 li
396.001 143.92 li
396.001 140.17 li
396.751 139.42 li
396.751 135.67 li
397.501 134.92 li
397.501 131.92 li
399.001 130.42 li
399.001 129.67 li
399.001 130.42 li
399.751 130.42 li
401.251 131.92 li
400.501 131.92 li
401.251 131.92 li
402.001 131.17 li
402.751 130.42 li
402.751 128.92 li
403.501 128.17 li
403.501 125.17 li
404.251 124.42 li
404.251 119.92 li
405.001 119.17 li
405.001 113.92 li
405.751 113.17 li
405.751 108.67 li
406.501 107.92 li
406.501 104.17 li
407.251 103.42 li
407.251 101.92 li
408.751 100.42 li
408.001 100.42 li
408.751 101.17 li
409.501 101.92 li
410.251 102.67 li
411.001 102.67 li
412.501 101.17 li
412.501 97.42 li
413.251 96.67 li
413.251 92.92 li
414.001 92.17 li
414.001 87.67 li
414.751 86.92 li
414.751 81.67 li
415.501 80.92 li
415.501 77.169 li
416.251 76.419 li
416.251 73.419 li
417.751 71.919 li
417.751 71.169 li
418.501 71.919 li
419.251 72.669 li
420.001 73.419 li
420.751 72.669 li
421.501 71.919 li
421.501 70.419 li
422.251 69.669 li
422.251 66.669 li
423.001 65.919 li
423.001 62.169 li
423.751 61.419 li
423.751 56.919 li
424.501 56.169 li
424.501 52.419 li
425.251 51.669 li
425.251 48.669 li
426.001 47.919 li
426.001 46.419 li
426.751 45.669 li
427.501 46.419 li
428.251 46.419 li
429.001 47.169 li
429.751 47.169 li
430.501 46.419 li
431.251 45.669 li
431.251 44.169 li
432.001 43.419 li
432.001 40.419 li
432.751 39.669 li
432.751 37.419 li
433.501 36.669 li
433.501 33.669 li
434.251 32.919 li
434.251 30.669 li
435.751 29.169 li
435.751 28.419 li
437.251 28.419 li
438.001 29.169 li
438.751 29.169 li
439.501 28.419 li
440.251 27.669 li
441.751 26.169 li
441.751 24.669 li
442.501 23.919 li
442.501 22.419 li
443.251 21.669 li
444.001 20.919 li
@
gsave
567.002 20.169 mo
331.501 20.169 li
331.501 206.17 li
567.002 206.17 li
cp
clp
331.501 112.42 mo
336.751 112.42 li
337.501 113.17 li
338.251 113.17 li
339.001 113.92 li
339.751 114.67 li
340.501 115.42 li
341.251 116.17 li
342.001 116.92 li
343.501 116.92 li
344.251 116.17 li
345.001 116.17 li
345.751 116.92 li
346.501 116.92 li
348.001 118.42 li
348.001 119.92 li
349.501 121.42 li
349.501 122.92 li
351.001 124.42 li
351.001 125.17 li
355.501 125.17 li
354.751 125.17 li
355.501 125.17 li
357.001 126.67 li
357.001 128.17 li
357.751 128.92 li
357.751 130.42 li
358.501 131.17 li
358.501 132.67 li
360.001 134.17 li
360.001 135.67 li
360.751 136.42 li
362.251 136.42 li
363.001 135.67 li
364.501 135.67 li
366.001 137.17 li
366.001 138.67 li
367.501 140.17 li
367.501 142.42 li
369.001 143.92 li
369.001 145.42 li
369.751 146.17 li
370.501 146.92 li
371.251 146.92 li
372.001 146.17 li
373.501 146.17 li
374.251 146.92 li
375.001 147.67 li
376.501 149.17 li
376.501 150.67 li
378.001 152.17 li
378.001 152.92 li
378.751 153.67 li
383.251 153.67 li
384.001 154.42 li
384.751 154.42 li
385.501 155.17 li
386.251 155.92 li
387.001 155.92 li
387.751 156.67 li
388.501 156.67 li
389.251 155.92 li
390.001 156.67 li
390.751 157.42 li
391.501 158.17 li
392.251 157.42 li
393.001 156.67 li
393.751 155.92 li
393.751 153.67 li
394.501 152.92 li
@
grestore
1 /0 /CSD get_res sepcs
.85 sep
%ADOBeginSubsetFont: QJJAAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LEPHWO+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Omega <1C60D8A8C9B6F576981B3A9CC5DCF6B9E2891E21F70CDE3132530414
9327DEC459FD03EE161AE175BD54C04B684219D5E6ED8C6F9032ABC21DD42C0A
946FF0014467180F32364CE1F38E705B2BC595C56F5B55C605CF735D393D974D
04624CB2B624AADB59E50C341DDEAE337030B41C8E17EA099429C3BEEE14434C
1B54E0AC8A127D5F08BCF2793395603A272A21DFF44E734EC1D49DF21CF212B0
51D063ED41BA7FC20DA4ACF2F4795D97F4FA2134358A67FB68D1CEE2B566280A
D58B106A06F21AB61A8D4A2D28F2EE51FD908014B75EBD545A5FEA7350D1B5A6
BCFB5730E346FE11EC64991374E5A5753B6676ACDBEC9B3CF92CE5F9F5> |-
/pi <1C60D8A8C9B7967678F2ED2478535EB7B50DECCE78F28089B307456EDB9
089371383F74718798FCF22D6D686185B9074732F57B819259A4E99DD8D356BD
55E81236AB1C67A050E41981869DEEA9296AE9124988026D74E5E4B51B2F6905
7FA95946C8B081DF5096D1A21ACAE3DDF26EB12D2423765790F7377340145B5A
19A613EEE3DA5D67DE190CE253AC7061757FE656DCAC0FAC8E090EBE75E963E5
EADC51139339E48BC7859A965> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LEPHWO+Symbol /Encoding get
dup 32 /Omega put
dup 33 /pi put
pop
%ADOEndSubsetFont
/LEPHWO+Symbol*1 
[32{/.notdef}rp /Omega /pi 67{/.notdef}rp /epsilon 154{/.notdef}rp]
LEPHWO+Symbol nf
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
425.251 244.42 mo
( )sh
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 446 18 <0001fffdffe7023b05d300030038401d0001014902031402020302010003
000a01eb021a0503eb001904936c182b4e10f44ded4e10f64ded003f3c3f
3c87052e2b7d10c431300701330103016bd3fe911905ecfa1400>HIBBAA+Arial-BoldMT AddT42Char 
2 3232 40 <00010095000004f005ba000b0090403d08050407082506121f05013005af
05020505090304250201020a09250b000807064b0302480a000b010b1a20
0d300d400d030d04092001200030000200b8028bb30c3153182b4e10f45d
3c4dfd3c4e105df65d3c4df43cf43c003f3cfd3c3f3cfd3c11392f5d7143
5c58b90005ffc0b21d3905b8ff80b21a3905b8ff80b113392b2b2b593cfd
3c0305103c3c313033112115211121152111211595043ffce902e0fd2003
3305baf8febbf7fe71f7>HIBBAA+Arial-BoldMT AddT42Char 
2 5946 87 <0001001fffe80291059d001900cd402920002001230a290f3a0e4a0e590f
07191500180316150017121314011712021401180309070a070c18b80101
400f0017a017b017036017a017c0170317b80104b2150114b80274b30015
0607b80274400e0c0b092f0a2f00002f015f010201b80104402818032617
1255153f149f14af1403601480149014d014f01405001410142014301404
14191a78a0182b4e10f45d71724bb037534bb03b515a58b90014ffc03859
3c4dfc3cfd3cf45d3c10f419e400183fed3f3cfd3c10f45d71e411123911
330f0f0f0f3130015d011523111416163332371706232226262726351123
3533352511027ac00b271c274a18627c4c7a390b098181011a0426e0fe54
822b1c1bda2a335145319501cfe0d3a4fe89>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/slash 18 def
/E 40 def
/t 87 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 47 /slash put
dup 69 /E put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[46{/.notdef}rp /period /slash /zero /one /two /.notdef /four 
/five /six /seven /eight /nine 11{/.notdef}rp /E 46{/.notdef}rp 
/t 139{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [12 0 0 -12 0 0 ]msf
437.251 251.92 mo
(E)sh
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
444.751 244.42 mo
(t/2)
[5.32947 4.44962 0 ]xsh
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
462.751 244.42 mo
(!)sh
34.5 208.42 mo
270.751 208.42 li
270.751 20.92 li
34.5 20.92 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
.5 lw
[] 0 dsh
34.5 208.42 mo
34.5 20.919 li
270.751 20.919 li
270.751 208.42 li
34.5 208.42 li
@
34.5 20.919 mo
270.751 20.919 li
1 /0 /CSD get_res sepcs
1 sep
@
34.5 208.42 mo
270.751 208.42 li
270.751 20.919 li
@
34.5 208.42 mo
34.5 20.919 li
@
34.5 208.42 mo
270.751 208.42 li
@
34.5 208.42 mo
34.5 20.919 li
@
34.5 208.42 mo
34.5 205.42 li
@
34.5 20.919 mo
34.5 23.169 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
30 226.42 mo
(0)sh
93 208.42 mo
93 205.42 li
@
93 20.919 mo
93 23.169 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
81.7504 226.42 mo
(0.5)
[8.896 4.448 0 ]xsh
152.25 208.42 mo
152.25 205.42 li
@
152.25 20.919 mo
152.25 23.169 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
147.75 226.42 mo
(1)sh
211.501 208.42 mo
211.501 205.42 li
@
211.501 20.919 mo
211.501 23.169 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
200.25 226.42 mo
(1.5)
[8.896 4.448 0 ]xsh
270.751 208.42 mo
270.751 205.42 li
@
270.751 20.919 mo
270.751 23.169 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
266.251 226.42 mo
(2)sh
34.5 208.42 mo
36.75 208.42 li
@
270.751 208.42 mo
267.751 208.42 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
22.5 214.42 mo
(0)sh
34.5 170.92 mo
36.75 170.92 li
@
270.751 170.92 mo
267.751 170.92 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
9 176.92 mo
(0.2)
[8.896 4.448 0 ]xsh
34.5 133.42 mo
36.75 133.42 li
@
270.751 133.42 mo
267.751 133.42 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
9 139.42 mo
(0.4)
[8.896 4.448 0 ]xsh
34.5 95.17 mo
36.75 95.17 li
@
270.751 95.17 mo
267.751 95.17 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
9 101.17 mo
(0.6)
[8.896 4.448 0 ]xsh
34.5 58.419 mo
36.75 58.419 li
@
270.751 58.419 mo
267.751 58.419 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
9 64.4193 mo
(0.8)
[8.896 4.448 0 ]xsh
34.5 20.919 mo
36.75 20.919 li
@
270.751 20.919 mo
267.751 20.919 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
22.5 26.9193 mo
(1)sh
34.5 20.919 mo
270.751 20.919 li
@
34.5 208.42 mo
270.751 208.42 li
270.751 20.919 li
@
34.5 208.42 mo
34.5 20.919 li
@
gsave
271.501 20.919 mo
34.5 20.919 li
34.5 209.17 li
271.501 209.17 li
cp
clp
2.5 lw
216.751 143.17 mo
217.501 142.42 li
219.001 142.42 li
220.501 140.92 li
220.501 139.42 li
221.251 138.67 li
221.251 136.42 li
222.001 135.67 li
222.001 132.67 li
222.751 131.92 li
222.751 128.17 li
223.501 127.42 li
223.501 123.67 li
224.251 122.92 li
224.251 119.17 li
225.001 118.42 li
225.001 116.17 li
226.501 114.67 li
226.501 113.92 li
227.251 113.92 li
228.001 113.17 li
228.751 113.17 li
230.251 111.67 li
230.251 108.67 li
231.001 107.92 li
231.001 104.92 li
231.751 104.17 li
231.751 100.42 li
232.501 99.67 li
232.501 95.92 li
233.251 95.17 li
233.251 91.42 li
234.001 90.67 li
234.001 87.67 li
234.751 86.92 li
234.751 85.42 li
236.251 83.92 li
236.251 83.17 li
237.751 83.17 li
239.251 81.67 li
239.251 80.92 li
240.001 80.17 li
240.001 77.92 li
240.751 77.169 li
240.751 73.419 li
241.501 72.669 li
241.501 69.669 li
242.251 68.919 li
242.251 65.169 li
243.001 64.419 li
243.001 61.419 li
243.751 60.669 li
243.751 58.419 li
245.251 56.919 li
245.251 56.169 li
246.751 56.169 li
249.001 53.919 li
249.001 52.419 li
249.751 51.669 li
249.751 50.169 li
250.501 49.419 li
250.501 46.419 li
251.251 45.669 li
251.251 43.419 li
252.001 42.669 li
252.001 39.669 li
252.751 38.919 li
252.751 37.419 li
254.251 35.919 li
254.251 35.169 li
256.501 35.169 li
259.501 32.169 li
259.501 29.919 li
260.251 29.169 li
260.251 27.669 li
261.751 26.169 li
261.751 24.669 li
263.251 23.169 li
266.251 23.169 li
265.501 23.169 li
267.001 23.169 li
268.501 21.669 li
270.751 21.669 li
.848478 .691768 .00411994 0 cmyk
@
grestore
2.5 lw
151.5 207.67 mo
167.25 207.67 li
168 206.92 li
174 206.92 li
174.75 206.17 li
175.5 206.17 li
176.25 205.42 li
177 205.42 li
177.75 204.67 li
181.5 204.67 li
182.25 203.92 li
183 203.92 li
186 200.92 li
186 200.17 li
188.25 197.92 li
191.25 197.92 li
193.5 195.67 li
193.5 194.17 li
195 192.67 li
195 190.42 li
196.5 188.92 li
196.5 187.42 li
198 185.92 li
199.5 185.92 li
200.25 185.17 li
201 185.17 li
202.5 183.67 li
202.5 181.42 li
203.251 180.67 li
203.251 179.17 li
204.001 178.42 li
204.001 176.17 li
204.751 175.42 li
204.751 173.17 li
205.501 172.42 li
205.501 170.92 li
206.251 170.17 li
206.251 168.67 li
207.751 167.17 li
209.251 167.17 li
211.501 164.92 li
211.501 163.42 li
212.251 162.67 li
212.251 160.42 li
213.001 159.67 li
213.001 156.67 li
213.751 155.92 li
213.751 152.92 li
214.501 152.17 li
214.501 149.17 li
215.251 148.42 li
215.251 146.17 li
216.001 145.42 li
216.001 143.92 li
216.751 143.17 li
.848478 .691768 .00411994 0 cmyk
@
87 142.42 mo
88.5 143.92 li
88.5 145.42 li
89.25 146.17 li
89.25 148.42 li
90 149.17 li
90 152.17 li
90.75 152.92 li
90.75 156.67 li
91.5 157.42 li
91.5 160.42 li
92.25 161.17 li
92.25 163.42 li
93.75 164.92 li
93.75 166.42 li
95.25 166.42 li
96 167.17 li
96.75 167.17 li
98.25 168.67 li
98.25 170.92 li
99 171.67 li
99 173.17 li
99.75 173.92 li
99.75 176.17 li
100.5 176.92 li
100.5 179.17 li
101.25 179.92 li
101.25 181.42 li
102 182.17 li
102 183.67 li
103.5 185.17 li
105 185.17 li
105.75 185.92 li
106.5 185.92 li
108 187.42 li
108 188.92 li
108.75 189.67 li
108.75 191.17 li
110.25 192.67 li
110.25 194.92 li
112.5 197.17 li
111.75 197.17 li
112.5 197.17 li
113.25 197.92 li
115.5 197.92 li
120 202.42 li
120 203.17 li
120.75 203.92 li
121.5 203.92 li
122.25 204.67 li
126 204.67 li
126.75 205.42 li
127.5 205.42 li
129 206.92 li
135 206.92 li
135.75 207.67 li
151.5 207.67 li
@
gsave
271.501 20.919 mo
34.5 20.919 li
34.5 209.17 li
271.501 209.17 li
cp
clp
34.5 20.919 mo
35.25 20.919 li
36.75 22.419 li
40.5 22.419 li
43.5 25.419 li
43.5 26.919 li
44.25 27.669 li
44.25 29.169 li
45.75 30.669 li
45.75 32.169 li
47.25 33.669 li
46.5 33.669 li
48.75 33.669 li
51.75 36.669 li
51.75 38.919 li
52.5 39.669 li
52.5 42.669 li
53.25 43.419 li
53.25 45.669 li
54 46.419 li
54 48.669 li
54.75 49.419 li
54.75 51.669 li
55.5 52.419 li
55.5 53.919 li
57 55.419 li
58.5 55.419 li
60.75 57.669 li
60.75 60.669 li
61.5 61.419 li
61.5 64.419 li
62.25 65.169 li
62.25 68.919 li
63 69.669 li
63 73.419 li
63.75 74.169 li
63.75 77.169 li
64.5 77.92 li
64.5 80.17 li
66 81.67 li
66 82.42 li
67.5 82.42 li
69.75 84.67 li
69.75 86.92 li
70.5 87.67 li
70.5 90.67 li
71.25 91.42 li
71.25 95.17 li
72 95.92 li
72 100.42 li
72.75 101.17 li
72.75 104.92 li
73.5 105.67 li
73.5 108.67 li
74.25 109.42 li
74.25 110.92 li
75.75 112.42 li
75.75 113.17 li
77.25 113.17 li
78.75 114.67 li
78.75 116.17 li
79.5 116.92 li
79.5 119.17 li
80.25 119.92 li
80.25 122.92 li
81 123.67 li
81 127.42 li
81.75 128.17 li
81.75 131.92 li
82.5 132.67 li
82.5 135.67 li
83.25 136.42 li
83.25 138.67 li
84 139.42 li
84 140.92 li
84.75 141.67 li
86.25 141.67 li
87 142.42 li
@
grestore
[6 6 ] 0 dsh
213.751 115.42 mo
214.501 116.17 li
215.251 116.92 li
216.001 116.92 li
216.751 117.67 li
219.751 117.67 li
220.501 118.42 li
222.001 119.92 li
222.001 121.42 li
222.751 122.17 li
222.751 123.67 li
223.501 124.42 li
223.501 125.92 li
224.251 126.67 li
224.251 128.17 li
225.751 129.67 li
225.751 130.42 li
226.501 130.42 li
227.251 131.17 li
228.751 131.17 li
229.501 131.92 li
230.251 132.67 li
230.251 134.17 li
231.001 134.92 li
231.001 136.42 li
231.751 137.17 li
231.751 139.42 li
232.501 140.17 li
232.501 142.42 li
233.251 143.17 li
233.251 146.17 li
234.001 146.92 li
234.001 148.42 li
234.751 149.17 li
234.751 150.67 li
235.501 151.42 li
237.751 151.42 li
238.501 152.17 li
239.251 152.92 li
239.251 154.42 li
240.001 155.17 li
240.001 156.67 li
240.751 157.42 li
240.751 159.67 li
241.501 160.42 li
241.501 163.42 li
242.251 164.17 li
242.251 167.17 li
243.001 167.92 li
243.001 170.17 li
243.751 170.92 li
243.751 172.42 li
245.251 173.92 li
245.251 174.67 li
247.501 174.67 li
249.001 176.17 li
249.001 177.67 li
249.751 178.42 li
249.751 180.67 li
250.501 181.42 li
250.501 183.67 li
251.251 184.42 li
251.251 186.67 li
252.001 187.42 li
252.001 189.67 li
252.751 190.42 li
252.751 191.92 li
254.251 193.42 li
254.251 194.17 li
256.501 194.17 li
257.251 194.92 li
258.001 195.67 li
259.501 197.17 li
259.501 199.42 li
261.001 200.92 li
261.001 203.17 li
261.751 203.92 li
263.251 205.42 li
262.501 205.42 li
266.251 205.42 li
267.001 206.17 li
267.751 206.17 li
268.501 206.92 li
269.251 207.67 li
270.751 207.67 li
156 206.92 mo
157.5 205.42 li
157.5 204.67 li
158.25 203.92 li
159 203.17 li
159.75 202.42 li
161.25 202.42 li
162 201.67 li
162.75 201.67 li
163.5 200.92 li
164.25 200.17 li
165 199.42 li
165 197.92 li
165.75 197.17 li
165.75 195.67 li
166.5 194.92 li
166.5 193.42 li
167.25 192.67 li
167.25 191.17 li
168 190.42 li
168 188.92 li
169.5 187.42 li
169.5 186.67 li
170.25 185.92 li
171.75 185.92 li
172.5 185.17 li
173.25 184.42 li
174 183.67 li
174 182.17 li
174.75 181.42 li
174.75 179.17 li
175.5 178.42 li
175.5 175.42 li
176.25 174.67 li
176.25 172.42 li
177 171.67 li
177 168.67 li
177.75 167.92 li
177.75 166.42 li
179.25 164.92 li
179.25 164.17 li
181.5 164.17 li
183 162.67 li
183 161.17 li
183.75 160.42 li
183.75 158.17 li
184.5 157.42 li
184.5 154.42 li
185.25 153.67 li
185.25 151.42 li
186 150.67 li
186 147.67 li
186.75 146.92 li
186.75 144.67 li
188.25 143.17 li
188.25 141.67 li
189.75 141.67 li
190.5 140.92 li
191.25 140.92 li
192.75 139.42 li
192.75 137.92 li
193.5 137.17 li
193.5 134.92 li
194.25 134.17 li
194.25 131.92 li
195 131.17 li
195 129.67 li
195.75 128.92 li
195.75 127.42 li
196.5 126.67 li
196.5 125.17 li
197.25 124.42 li
198 123.67 li
199.5 123.67 li
200.25 122.92 li
201 122.92 li
201.75 122.17 li
203.251 120.67 li
203.251 119.17 li
204.751 117.67 li
204.751 116.92 li
206.251 115.42 li
205.501 115.42 li
206.251 115.42 li
207.001 114.67 li
213.001 114.67 li
213.751 115.42 li
98.25 115.42 mo
99 116.17 li
99.75 116.92 li
101.25 118.42 li
101.25 119.92 li
102.75 121.42 li
102.75 122.92 li
103.5 122.92 li
104.25 123.67 li
106.5 123.67 li
108 125.17 li
108 126.67 li
108.75 127.42 li
108.75 128.92 li
109.5 129.67 li
109.5 131.92 li
110.25 132.67 li
110.25 134.17 li
111 134.92 li
111 137.17 li
111.75 137.92 li
111.75 139.42 li
113.25 140.92 li
112.5 140.92 li
113.25 140.92 li
114 141.67 li
115.5 141.67 li
116.25 142.42 li
117 143.17 li
117 144.67 li
117.75 145.42 li
117.75 146.92 li
118.5 147.67 li
118.5 150.67 li
119.25 151.42 li
119.25 154.42 li
120 155.17 li
120 157.42 li
120.75 158.17 li
120.75 160.42 li
121.5 161.17 li
121.5 162.67 li
122.25 163.42 li
123 164.17 li
124.5 164.17 li
125.25 164.92 li
126.75 166.42 li
126.75 168.67 li
127.5 169.42 li
127.5 171.67 li
128.25 172.42 li
128.25 174.67 li
129 175.42 li
129 178.42 li
129.75 179.17 li
129.75 181.42 li
130.5 182.17 li
130.5 183.67 li
132 185.17 li
132 185.92 li
133.5 185.92 li
134.25 186.67 li
135 187.42 li
136.5 188.92 li
136.5 190.42 li
137.25 191.17 li
137.25 193.42 li
138 194.17 li
138 195.67 li
138.75 196.42 li
138.75 197.92 li
139.5 198.67 li
139.5 200.17 li
140.25 200.92 li
141 201.67 li
142.5 201.67 li
143.25 202.42 li
144 202.42 li
144.75 203.17 li
145.5 203.92 li
146.25 204.67 li
147 205.42 li
147.75 206.17 li
148.5 206.92 li
149.25 207.67 li
154.5 207.67 li
155.25 206.92 li
156 206.92 li
40.5 206.17 mo
41.25 205.42 li
42 204.67 li
43.5 203.17 li
43.5 201.67 li
44.25 200.92 li
44.25 199.42 li
45.75 197.92 li
45.75 196.42 li
46.5 195.67 li
47.25 194.92 li
49.5 194.92 li
51 193.42 li
51 191.92 li
51.75 191.17 li
51.75 189.67 li
52.5 188.92 li
52.5 186.67 li
53.25 185.92 li
53.25 183.67 li
54 182.92 li
54 180.67 li
54.75 179.92 li
54.75 178.42 li
55.5 177.67 li
55.5 176.92 li
57 175.42 li
56.25 175.42 li
58.5 175.42 li
59.25 174.67 li
60.75 173.17 li
60.75 170.17 li
61.5 169.42 li
61.5 167.17 li
62.25 166.42 li
62.25 163.42 li
63 162.67 li
63 159.67 li
63.75 158.92 li
63.75 156.67 li
64.5 155.92 li
64.5 154.42 li
66 152.92 li
66 152.17 li
67.5 152.17 li
68.25 151.42 li
69 150.67 li
69.75 149.92 li
69.75 148.42 li
70.5 147.67 li
70.5 146.17 li
71.25 145.42 li
71.25 142.42 li
72 141.67 li
72 139.42 li
72.75 138.67 li
72.75 136.42 li
73.5 135.67 li
73.5 134.17 li
75 132.67 li
75 131.92 li
75.75 131.17 li
77.25 131.17 li
78 130.42 li
78.75 129.67 li
79.5 128.92 li
79.5 127.42 li
81 125.92 li
81 123.67 li
81.75 122.92 li
81.75 121.42 li
83.25 119.92 li
83.25 118.42 li
84 117.67 li
87 117.67 li
87.75 116.92 li
88.5 116.17 li
89.25 115.42 li
90 114.67 li
93 114.67 li
92.25 114.67 li
97.5 114.67 li
98.25 115.42 li
.605798 0 .889097 0 cmyk
@
gsave
271.501 20.919 mo
34.5 20.919 li
34.5 209.17 li
271.501 209.17 li
cp
clp
34.5 207.67 mo
35.25 207.67 li
36 206.92 li
36.75 206.17 li
40.5 206.17 li
@
grestore
[] 0 dsh
205.501 149.92 mo
206.251 150.67 li
206.251 152.92 li
207.751 154.42 li
207.001 154.42 li
207.751 154.42 li
208.501 155.17 li
210.001 155.17 li
211.501 156.67 li
211.501 158.92 li
212.251 159.67 li
212.251 161.92 li
213.001 162.67 li
213.001 164.92 li
213.751 165.67 li
213.751 168.67 li
214.501 169.42 li
214.501 171.67 li
215.251 172.42 li
215.251 173.92 li
216.751 175.42 li
216.751 176.17 li
217.501 176.92 li
219.001 176.92 li
221.251 179.17 li
221.251 180.67 li
222.001 181.42 li
222.001 182.92 li
222.751 183.67 li
222.751 185.17 li
223.501 185.92 li
223.501 187.42 li
224.251 188.17 li
224.251 189.67 li
225.751 191.17 li
225.751 191.92 li
228.001 191.92 li
228.751 192.67 li
229.501 192.67 li
231.001 194.17 li
231.001 194.92 li
232.501 196.42 li
232.501 197.92 li
234.001 199.42 li
234.001 200.17 li
235.501 201.67 li
239.251 201.67 li
243.001 205.42 li
243.751 205.42 li
244.501 206.17 li
249.751 206.17 li
250.501 206.92 li
252.751 206.92 li
253.501 207.67 li
270.751 207.67 li
1 /0 /CSD get_res sepcs
1 sep
@
gsave
271.501 20.919 mo
34.5 20.919 li
34.5 209.17 li
271.501 209.17 li
cp
clp
152.25 20.919 mo
153.75 20.919 li
154.5 21.669 li
155.25 21.669 li
158.25 24.669 li
158.25 25.419 li
159 26.169 li
159.75 26.169 li
160.5 26.919 li
162.75 26.919 li
165 29.169 li
165 30.669 li
165.75 31.419 li
165.75 33.669 li
166.5 34.419 li
166.5 35.919 li
167.25 36.669 li
167.25 38.919 li
168.75 40.419 li
168.75 41.919 li
170.25 43.419 li
171.75 43.419 li
174 45.669 li
174 47.919 li
174.75 48.669 li
174.75 51.669 li
175.5 52.419 li
175.5 55.419 li
176.25 56.169 li
176.25 59.169 li
177 59.919 li
177 62.919 li
177.75 63.669 li
177.75 65.169 li
178.5 65.919 li
178.5 67.419 li
179.25 68.169 li
181.5 68.169 li
183 69.669 li
183 71.919 li
183.75 72.669 li
183.75 75.669 li
184.5 76.419 li
184.5 80.17 li
185.25 80.92 li
185.25 84.67 li
186 85.42 li
186 89.17 li
186.75 89.92 li
186.75 92.92 li
187.5 93.67 li
187.5 95.17 li
189 96.67 li
189 97.42 li
190.5 97.42 li
192 98.92 li
192 100.42 li
192.75 101.17 li
192.75 103.42 li
193.5 104.17 li
193.5 107.17 li
194.25 107.92 li
194.25 111.67 li
195 112.42 li
195 116.92 li
195.75 117.67 li
195.75 120.67 li
196.5 121.42 li
196.5 124.42 li
198 125.92 li
198 127.42 li
199.5 127.42 li
201.75 129.67 li
201.75 131.17 li
202.5 131.92 li
202.5 134.17 li
203.251 134.92 li
203.251 138.67 li
204.001 139.42 li
204.001 142.42 li
204.751 143.17 li
204.751 146.92 li
205.501 147.67 li
205.501 149.92 li
@
99 149.92 mo
99 147.67 li
99.75 146.92 li
99.75 143.17 li
100.5 142.42 li
100.5 138.67 li
101.25 137.92 li
101.25 134.92 li
102 134.17 li
102 131.92 li
102.75 131.17 li
102.75 128.92 li
104.25 127.42 li
105.75 127.42 li
107.25 125.92 li
107.25 124.42 li
108 123.67 li
108 121.42 li
108.75 120.67 li
108.75 116.92 li
109.5 116.17 li
109.5 112.42 li
110.25 111.67 li
110.25 107.92 li
111 107.17 li
111 103.42 li
111.75 102.67 li
111.75 100.42 li
113.25 98.92 li
113.25 97.42 li
115.5 97.42 li
117 95.92 li
117 92.92 li
117.75 92.17 li
117.75 89.17 li
118.5 88.42 li
118.5 85.42 li
119.25 84.67 li
119.25 80.17 li
120 79.42 li
120 76.419 li
120.75 75.669 li
120.75 72.669 li
121.5 71.919 li
121.5 69.669 li
123 68.169 li
124.5 68.169 li
126.75 65.919 li
126.75 62.919 li
127.5 62.169 li
127.5 59.919 li
128.25 59.169 li
128.25 55.419 li
129 54.669 li
129 51.669 li
129.75 50.919 li
129.75 48.669 li
130.5 47.919 li
130.5 45.669 li
132 44.169 li
132 43.419 li
134.25 43.419 li
136.5 41.169 li
136.5 38.919 li
137.25 38.169 li
137.25 35.919 li
138 35.169 li
138 33.669 li
138.75 32.919 li
138.75 31.419 li
139.5 30.669 li
139.5 29.169 li
141 27.669 li
141 26.919 li
144 26.919 li
147.75 23.169 li
147.75 22.419 li
148.5 21.669 li
149.25 21.669 li
150 20.919 li
152.25 20.919 li
@
34.5 207.67 mo
52.5 207.67 li
53.25 206.92 li
54.75 206.92 li
55.5 206.17 li
60 206.17 li
60.75 205.42 li
61.5 205.42 li
65.25 201.67 li
69 201.67 li
72 198.67 li
72 197.17 li
73.5 195.67 li
73.5 194.17 li
75 192.67 li
77.25 192.67 li
80.25 189.67 li
80.25 188.17 li
81 187.42 li
81 185.92 li
81.75 185.17 li
81.75 183.67 li
82.5 182.92 li
82.5 180.67 li
84 179.17 li
84 177.67 li
84.75 176.92 li
87 176.92 li
89.25 174.67 li
89.25 172.42 li
90 171.67 li
90 169.42 li
90.75 168.67 li
90.75 165.67 li
91.5 164.92 li
91.5 162.67 li
92.25 161.92 li
92.25 158.92 li
93 158.17 li
93 156.67 li
94.5 155.17 li
96 155.17 li
98.25 152.92 li
98.25 150.67 li
99 149.92 li
@
grestore
[.5 4 6 4 ] 0 dsh
205.501 149.92 mo
206.251 150.67 li
206.251 152.92 li
207.751 154.42 li
207.001 154.42 li
207.751 154.42 li
208.501 155.17 li
210.001 155.17 li
211.501 156.67 li
211.501 158.92 li
212.251 159.67 li
212.251 161.92 li
213.001 162.67 li
213.001 164.92 li
213.751 165.67 li
213.751 168.67 li
214.501 169.42 li
214.501 171.67 li
215.251 172.42 li
215.251 173.92 li
216.751 175.42 li
216.751 176.17 li
217.501 176.92 li
219.001 176.92 li
219.751 177.67 li
220.501 178.42 li
221.251 179.17 li
221.251 180.67 li
222.001 181.42 li
222.001 182.92 li
222.751 183.67 li
222.751 185.17 li
223.501 185.92 li
223.501 187.42 li
224.251 188.17 li
224.251 189.67 li
225.751 191.17 li
225.751 191.92 li
228.001 191.92 li
228.751 192.67 li
229.501 192.67 li
231.001 194.17 li
231.001 194.92 li
232.501 196.42 li
232.501 197.92 li
234.001 199.42 li
234.001 200.17 li
234.751 200.92 li
235.501 201.67 li
239.251 201.67 li
240.001 202.42 li
240.751 203.17 li
241.501 203.92 li
242.251 204.67 li
243.001 205.42 li
243.751 205.42 li
244.501 206.17 li
249.751 206.17 li
250.501 206.92 li
252.751 206.92 li
253.501 207.67 li
270.751 207.67 li
0 .945647 .852842 0 cmyk
@
gsave
271.501 20.919 mo
34.5 20.919 li
34.5 209.17 li
271.501 209.17 li
cp
clp
152.25 20.919 mo
153.75 20.919 li
154.5 21.669 li
155.25 21.669 li
156 22.419 li
156.75 23.169 li
158.25 24.669 li
158.25 25.419 li
159 26.169 li
159.75 26.169 li
160.5 26.919 li
162.75 26.919 li
163.5 27.669 li
165 29.169 li
165 30.669 li
165.75 31.419 li
165.75 33.669 li
166.5 34.419 li
166.5 35.919 li
167.25 36.669 li
167.25 38.919 li
168.75 40.419 li
168.75 41.919 li
169.5 42.669 li
170.25 43.419 li
171.75 43.419 li
172.5 44.169 li
174 45.669 li
174 47.919 li
174.75 48.669 li
174.75 51.669 li
175.5 52.419 li
175.5 55.419 li
176.25 56.169 li
176.25 59.169 li
177 59.919 li
177 62.919 li
177.75 63.669 li
177.75 65.169 li
178.5 65.919 li
178.5 67.419 li
179.25 68.169 li
181.5 68.169 li
183 69.669 li
183 71.919 li
183.75 72.669 li
183.75 75.669 li
184.5 76.419 li
184.5 80.17 li
185.25 80.92 li
185.25 84.67 li
186 85.42 li
186 89.17 li
186.75 89.92 li
186.75 92.92 li
187.5 93.67 li
187.5 95.17 li
189 96.67 li
189 97.42 li
190.5 97.42 li
191.25 98.17 li
192 98.92 li
192 100.42 li
192.75 101.17 li
192.75 103.42 li
193.5 104.17 li
193.5 107.17 li
194.25 107.92 li
194.25 111.67 li
195 112.42 li
195 116.92 li
195.75 117.67 li
195.75 120.67 li
196.5 121.42 li
196.5 124.42 li
198 125.92 li
198 127.42 li
199.5 127.42 li
200.25 128.17 li
201 128.92 li
201.75 129.67 li
201.75 131.17 li
202.5 131.92 li
202.5 134.17 li
203.251 134.92 li
203.251 138.67 li
204.001 139.42 li
204.001 142.42 li
204.751 143.17 li
204.751 146.92 li
205.501 147.67 li
205.501 149.92 li
99 149.92 mo
99 147.67 li
99.75 146.92 li
99.75 143.17 li
100.5 142.42 li
100.5 138.67 li
101.25 137.92 li
101.25 134.92 li
102 134.17 li
102 131.92 li
102.75 131.17 li
102.75 128.92 li
103.5 128.17 li
104.25 127.42 li
105.75 127.42 li
106.5 126.67 li
107.25 125.92 li
107.25 124.42 li
108 123.67 li
108 121.42 li
108.75 120.67 li
108.75 116.92 li
109.5 116.17 li
109.5 112.42 li
110.25 111.67 li
110.25 107.92 li
111 107.17 li
111 103.42 li
111.75 102.67 li
111.75 100.42 li
113.25 98.92 li
113.25 97.42 li
115.5 97.42 li
117 95.92 li
117 92.92 li
117.75 92.17 li
117.75 89.17 li
118.5 88.42 li
118.5 85.42 li
119.25 84.67 li
119.25 80.17 li
120 79.42 li
120 76.419 li
120.75 75.669 li
120.75 72.669 li
121.5 71.919 li
121.5 69.669 li
122.25 68.919 li
123 68.169 li
124.5 68.169 li
125.25 67.419 li
126.75 65.919 li
126.75 62.919 li
127.5 62.169 li
127.5 59.919 li
128.25 59.169 li
128.25 55.419 li
129 54.669 li
129 51.669 li
129.75 50.919 li
129.75 48.669 li
130.5 47.919 li
130.5 45.669 li
132 44.169 li
132 43.419 li
134.25 43.419 li
135 42.669 li
136.5 41.169 li
136.5 38.919 li
137.25 38.169 li
137.25 35.919 li
138 35.169 li
138 33.669 li
138.75 32.919 li
138.75 31.419 li
139.5 30.669 li
139.5 29.169 li
141 27.669 li
141 26.919 li
144 26.919 li
144.75 26.169 li
145.5 25.419 li
146.25 24.669 li
147.75 23.169 li
147.75 22.419 li
148.5 21.669 li
149.25 21.669 li
150 20.919 li
152.25 20.919 li
34.5 207.67 mo
52.5 207.67 li
53.25 206.92 li
54.75 206.92 li
55.5 206.17 li
60 206.17 li
60.75 205.42 li
61.5 205.42 li
62.25 204.67 li
63 203.92 li
63.75 203.17 li
64.5 202.42 li
65.25 201.67 li
69 201.67 li
69.75 200.92 li
70.5 200.17 li
72 198.67 li
72 197.17 li
73.5 195.67 li
73.5 194.17 li
74.25 193.42 li
75 192.67 li
77.25 192.67 li
78 191.92 li
78.75 191.17 li
80.25 189.67 li
80.25 188.17 li
81 187.42 li
81 185.92 li
81.75 185.17 li
81.75 183.67 li
82.5 182.92 li
82.5 180.67 li
84 179.17 li
84 177.67 li
84.75 176.92 li
87 176.92 li
87.75 176.17 li
89.25 174.67 li
89.25 172.42 li
90 171.67 li
90 169.42 li
90.75 168.67 li
90.75 165.67 li
91.5 164.92 li
91.5 162.67 li
92.25 161.92 li
92.25 158.92 li
93 158.17 li
93 156.67 li
93.75 155.92 li
94.5 155.17 li
96 155.17 li
96.75 154.42 li
98.25 152.92 li
98.25 150.67 li
99 149.92 li
@
grestore
1 /0 /CSD get_res sepcs
.85 sep
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
128.25 247.42 mo
( )sh
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 3578 49 <000100980000052305ba000901ce400e0903060819031708041208020303
b8ff00b3120b3f03b8ffc0b35b5d3403b8ffc0402a535434033207081407
0708030802020703090402020907080304405b5d340440535434043206cf
050105b8028b4019400b500b600b03700b800b02a00bc00b02200b300b02
0b0809b8ffc0b35b5d3409b8ffc0400e53533409320120003000c0000300
b8028bb30a3175182b4e10f45d3c4dfd2b2b3c4d105d5d7172f65d3c4dfd
2b2b3c003f3c3f3c011112393900123939872e2b2b2b2b877dc4b1060243
5458b90003ffe040090e273408200e273403b8ffc0b7090d340840090d34
002b2b2b2b5931304358b90003ff80b60b3508800b3503b8ffc0403d1a2e
3408531a2e34050316033203400304460385089008a008b208e40306c403
cf08da080320032f0834033b084f0892039f08a003af08b003bf080b07b8
ffc04009333534024033353407b8ffe0400d2f323402202f323402071435
07b8ff974009212e340254212e3407b8ffc040461e203402541e20340802
070718020317072c0227073b0233074e0240075c0256070914021b074d02
45079a07ab07cb02d902e802e707f9020b270228074a0778078807ac0206
015d7172722b2b2b2b2b2b2b2b2b005d5d71722b2b2b2b59005d33112101
11211121011198012002580113fed7fdb105bafc2d03d3fa4603bcfc4400
>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/N 49 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[46{/.notdef}rp /period /slash /zero /one /two /.notdef /four 
/five /six /seven /eight /nine 11{/.notdef}rp /E 8{/.notdef}rp 
/N 37{/.notdef}rp /t 139{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [12 0 0 -12 0 0 ]msf
140.25 254.92 mo
(N)sh
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
148.5 247.42 mo
(t/2)
[5.32948 4.4496 0 ]xsh
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
166.5 247.42 mo
(!)sh
27 452.171 mo
266.251 452.171 li
266.251 266.171 li
27 266.171 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
.5 lw
[] 0 dsh
27 452.171 mo
27 266.17 li
266.251 266.17 li
266.251 452.171 li
27 452.171 li
@
27 266.17 mo
266.251 266.17 li
1 /0 /CSD get_res sepcs
1 sep
@
27 452.171 mo
266.251 452.171 li
266.251 266.17 li
@
27 452.171 mo
27 266.17 li
@
27 452.171 mo
266.251 452.171 li
@
27 452.171 mo
27 266.17 li
@
27 452.171 mo
27 449.171 li
@
27 266.17 mo
27 268.42 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
22.5 470.171 mo
(0)sh
66.75 452.171 mo
66.75 449.171 li
@
66.75 266.17 mo
66.75 268.42 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
55.5004 470.171 mo
(0.2)
[8.89599 4.448 0 ]xsh
106.5 452.171 mo
106.5 449.171 li
@
106.5 266.17 mo
106.5 268.42 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
95.2504 470.171 mo
(0.4)
[8.896 4.448 0 ]xsh
146.25 452.171 mo
146.25 449.171 li
@
146.25 266.17 mo
146.25 268.42 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
135 470.171 mo
(0.6)
[8.896 4.448 0 ]xsh
186 452.171 mo
186 449.171 li
@
186 266.17 mo
186 268.42 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
174.75 470.171 mo
(0.8)
[8.896 4.448 0 ]xsh
225.751 452.171 mo
225.751 449.171 li
@
225.751 266.17 mo
225.751 268.42 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
221.251 470.171 mo
(1)sh
266.251 452.171 mo
266.251 449.171 li
@
266.251 266.17 mo
266.251 268.42 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
255.001 470.171 mo
(1.2)
[8.896 4.448 0 ]xsh
27 452.171 mo
29.25 452.171 li
@
266.251 452.171 mo
263.251 452.171 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
1.5 458.171 mo
(0.2)
[8.896 4.448 0 ]xsh
27 405.671 mo
29.25 405.671 li
@
266.251 405.671 mo
263.251 405.671 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
1.5 411.671 mo
(0.4)
[8.896 4.448 0 ]xsh
27 359.17 mo
29.25 359.17 li
@
266.251 359.17 mo
263.251 359.17 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
1.5 365.17 mo
(0.6)
[8.896 4.448 0 ]xsh
27 312.67 mo
29.25 312.67 li
@
266.251 312.67 mo
263.251 312.67 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
1.5 318.67 mo
(0.8)
[8.896 4.448 0 ]xsh
27 266.17 mo
29.25 266.17 li
@
266.251 266.17 mo
263.251 266.17 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
15 272.17 mo
(1)sh
27 266.17 mo
266.251 266.17 li
@
27 452.171 mo
266.251 452.171 li
266.251 266.17 li
@
27 452.171 mo
27 266.17 li
@
gsave
267.001 266.17 mo
27 266.17 li
27 452.921 li
267.001 452.921 li
cp
clp
2.5 lw
[6 6 ] 0 dsh
197.25 291.67 mo
198 290.92 li
199.5 289.42 li
199.5 287.92 li
200.25 287.17 li
200.25 285.67 li
201.75 284.17 li
201.75 281.92 li
203.251 280.42 li
203.251 278.92 li
204.751 277.42 li
204.751 275.92 li
205.501 275.17 li
206.251 274.42 li
207.001 273.67 li
211.501 273.67 li
212.251 272.92 li
213.001 272.92 li
213.751 272.17 li
214.501 271.42 li
215.251 270.67 li
216.001 269.92 li
216.751 269.17 li
217.501 268.42 li
218.251 267.67 li
219.001 266.92 li
219.751 266.92 li
220.501 266.17 li
231.001 266.17 li
231.751 266.92 li
232.501 266.92 li
233.251 267.67 li
234.001 268.42 li
234.751 269.17 li
235.501 269.92 li
236.251 270.67 li
237.001 271.42 li
237.751 272.17 li
238.501 272.92 li
239.251 272.92 li
240.001 273.67 li
244.501 273.67 li
245.251 274.42 li
246.001 275.17 li
246.751 275.92 li
248.251 277.42 li
248.251 278.92 li
249.751 280.42 li
249.751 282.67 li
250.501 283.42 li
250.501 284.17 li
251.251 284.92 li
251.251 286.42 li
252.751 287.92 li
252.751 289.42 li
254.251 290.92 li
254.251 292.42 li
255.001 293.17 li
256.501 293.17 li
257.251 293.92 li
260.251 293.92 li
261.001 294.67 li
262.501 296.17 li
262.501 297.67 li
263.251 298.42 li
263.251 299.92 li
264.001 300.67 li
264.001 302.17 li
264.751 302.92 li
264.751 304.42 li
265.501 305.17 li
265.501 307.42 li
266.251 307.42 li
0 .945647 .852842 0 cmyk
@
grestore
2.5 lw
[6 6 ] 0 dsh
143.25 386.17 mo
144 385.42 li
147 385.42 li
147.75 384.67 li
148.5 384.67 li
149.25 383.92 li
150.75 382.42 li
150.75 380.92 li
151.5 380.17 li
151.5 378.67 li
152.25 377.92 li
152.25 376.42 li
153 375.67 li
153 374.17 li
153.75 373.42 li
153.75 371.17 li
154.5 370.42 li
154.5 368.17 li
155.25 367.42 li
155.25 365.92 li
156 365.17 li
156 362.92 li
156.75 362.17 li
156.75 360.67 li
157.5 359.92 li
157.5 359.17 li
159 357.67 li
159 356.17 li
159.75 355.42 li
162.75 355.42 li
163.5 354.67 li
164.25 354.67 li
165 353.92 li
166.5 352.42 li
166.5 350.92 li
167.25 350.17 li
167.25 348.67 li
168 347.92 li
168 346.42 li
168.75 345.67 li
168.75 343.42 li
169.5 342.67 li
169.5 340.42 li
170.25 339.67 li
170.25 337.42 li
171 336.67 li
171 334.42 li
171.75 333.67 li
171.75 331.42 li
172.5 330.67 li
172.5 329.17 li
173.25 328.42 li
173.25 326.92 li
174.75 325.42 li
174.75 323.92 li
175.5 323.17 li
178.5 323.17 li
179.25 322.42 li
180 322.42 li
180.75 321.67 li
182.25 320.17 li
182.25 318.67 li
183 317.92 li
183 317.17 li
183.75 316.42 li
183.75 314.92 li
184.5 314.17 li
184.5 311.92 li
185.25 311.17 li
185.25 309.67 li
186 308.92 li
186 306.67 li
186.75 305.92 li
186.75 303.67 li
187.5 302.92 li
187.5 301.42 li
188.25 300.67 li
188.25 299.17 li
189 298.42 li
189 297.67 li
190.5 296.17 li
190.5 294.67 li
191.25 293.92 li
195 293.92 li
195.75 293.17 li
196.5 292.42 li
197.25 291.67 li
73.5 407.171 mo
73.5 407.921 li
74.25 408.671 li
75.75 410.171 li
75.75 410.921 li
76.5 411.671 li
77.25 412.421 li
78 413.171 li
78.75 413.921 li
79.5 413.921 li
80.25 414.671 li
85.5 414.671 li
86.25 415.421 li
87 415.421 li
87.75 416.171 li
88.5 416.921 li
89.25 417.671 li
90 418.421 li
90.75 419.171 li
91.5 419.921 li
92.25 419.921 li
93 420.671 li
94.5 420.671 li
95.25 421.421 li
108 421.421 li
108.75 420.671 li
109.5 420.671 li
110.25 419.921 li
116.25 419.921 li
117 419.171 li
117.75 419.171 li
118.5 418.421 li
119.25 418.421 li
120 417.671 li
120.75 416.921 li
122.25 415.421 li
122.25 414.671 li
123.75 413.171 li
123.75 412.421 li
125.25 410.921 li
125.25 410.171 li
126 409.421 li
126.75 408.671 li
127.5 407.921 li
131.25 407.921 li
132 407.171 li
132.75 407.171 li
133.5 406.421 li
134.25 405.671 li
135.75 404.171 li
135.75 402.671 li
137.25 401.171 li
137.25 399.671 li
138 398.921 li
138 397.421 li
138.75 396.671 li
138.75 395.171 li
139.5 394.421 li
139.5 392.921 li
140.25 392.17 li
140.25 391.42 li
141 390.67 li
141 389.17 li
142.5 387.67 li
142.5 386.92 li
143.25 386.17 li
0 .945647 .852842 0 cmyk
@
gsave
267.001 266.17 mo
27 266.17 li
27 452.921 li
267.001 452.921 li
cp
clp
27 384.67 mo
30 384.67 li
30.75 385.42 li
38.25 385.42 li
39 386.17 li
39.75 386.17 li
40.5 386.92 li
41.25 386.92 li
42 387.67 li
42.75 388.42 li
43.5 389.17 li
44.25 389.92 li
45 389.92 li
45.75 390.67 li
46.5 391.42 li
47.25 391.42 li
48 392.17 li
53.25 392.17 li
54 392.921 li
54.75 392.921 li
55.5 393.671 li
56.25 394.421 li
57 395.171 li
58.5 396.671 li
58.5 397.421 li
60 398.921 li
60 399.671 li
60.75 400.421 li
61.5 401.171 li
62.25 401.921 li
63 402.671 li
63.75 402.671 li
64.5 403.421 li
69 403.421 li
69.75 404.171 li
70.5 404.171 li
71.25 404.921 li
72 405.671 li
73.5 407.171 li
@
[] 0 dsh
197.25 296.17 mo
198.75 294.67 li
198.75 293.17 li
200.25 291.67 li
200.25 289.42 li
201.75 287.92 li
201.75 285.67 li
202.5 284.92 li
202.5 283.42 li
204.001 281.92 li
204.001 280.42 li
205.501 278.92 li
205.501 277.42 li
206.251 276.67 li
207.001 276.67 li
207.751 275.92 li
212.251 275.92 li
217.501 270.67 li
217.501 269.92 li
219.751 267.67 li
220.501 267.67 li
221.251 266.92 li
231.001 266.92 li
231.751 267.67 li
232.501 267.67 li
233.251 268.42 li
234.001 268.42 li
235.501 269.92 li
236.251 269.92 li
237.751 271.42 li
239.251 271.42 li
240.001 272.17 li
244.501 272.17 li
248.251 275.92 li
248.251 277.42 li
249.751 278.92 li
249.751 280.42 li
250.501 281.17 li
250.501 282.67 li
252.001 284.17 li
252.001 285.67 li
253.501 287.17 li
253.501 287.92 li
255.001 289.42 li
254.251 289.42 li
255.001 289.42 li
255.751 290.17 li
258.751 290.17 li
259.501 290.92 li
260.251 290.92 li
262.501 293.17 li
262.501 294.67 li
263.251 295.42 li
263.251 296.17 li
264.001 296.92 li
264.001 298.42 li
264.751 299.17 li
264.751 301.42 li
265.501 302.17 li
265.501 303.67 li
266.251 303.67 li
.848478 .691768 .00411994 0 cmyk
@
grestore
[] 0 dsh
141.75 391.42 mo
144 389.17 li
147.75 389.17 li
150.75 386.17 li
150.75 384.67 li
152.25 383.17 li
152.25 380.92 li
153 380.17 li
153 378.67 li
153.75 377.92 li
153.75 375.67 li
154.5 374.92 li
154.5 372.67 li
155.25 371.92 li
155.25 370.42 li
156 369.67 li
156 367.42 li
156.75 366.67 li
156.75 365.17 li
158.25 363.67 li
158.25 362.17 li
159.75 360.67 li
160.5 360.67 li
161.25 359.92 li
163.5 359.92 li
166.5 356.92 li
166.5 355.42 li
167.25 354.67 li
167.25 353.17 li
168 352.42 li
168 350.92 li
168.75 350.17 li
168.75 347.92 li
169.5 347.17 li
169.5 345.67 li
170.25 344.92 li
170.25 341.92 li
171 341.17 li
171 338.92 li
171.75 338.17 li
171.75 336.67 li
172.5 335.92 li
172.5 333.67 li
173.25 332.92 li
173.25 332.17 li
174 331.42 li
174 329.92 li
176.25 327.67 li
179.25 327.67 li
183 323.92 li
183 321.67 li
183.75 320.92 li
183.75 319.42 li
184.5 318.67 li
184.5 317.17 li
185.25 316.42 li
185.25 314.17 li
186 313.42 li
186 311.17 li
186.75 310.42 li
186.75 308.17 li
187.5 307.42 li
187.5 305.92 li
188.25 305.17 li
188.25 303.67 li
189 302.92 li
189 301.42 li
190.5 299.92 li
190.5 299.17 li
191.25 298.42 li
192 298.42 li
192.75 297.67 li
195.75 297.67 li
197.25 296.17 li
.848478 .691768 .00411994 0 cmyk
@
71.25 358.42 mo
72.75 359.92 li
72.75 362.17 li
74.25 363.67 li
74.25 365.92 li
75 366.67 li
75 368.17 li
76.5 369.67 li
76.5 371.92 li
78 373.42 li
78 374.17 li
79.5 375.67 li
78.75 375.67 li
79.5 375.67 li
80.25 376.42 li
83.25 376.42 li
84 377.17 li
84.75 377.17 li
87.75 380.17 li
87.75 380.92 li
88.5 381.67 li
88.5 383.17 li
90 384.67 li
90 386.92 li
91.5 388.42 li
91.5 389.92 li
93 391.42 li
93 392.921 li
95.25 395.171 li
94.5 395.171 li
95.25 395.171 li
96 395.921 li
99.75 395.921 li
100.5 396.671 li
101.25 396.671 li
105 400.421 li
105 401.921 li
107.25 404.171 li
107.25 404.921 li
108.75 406.421 li
108.75 407.171 li
109.5 407.171 li
110.25 407.921 li
111 407.921 li
111.75 408.671 li
117 408.671 li
117.75 409.421 li
118.5 409.421 li
119.25 410.171 li
120 410.171 li
120.75 410.921 li
121.5 410.921 li
122.25 411.671 li
126 411.671 li
127.5 410.171 li
132 410.171 li
136.5 405.671 li
136.5 404.171 li
138 402.671 li
138 400.421 li
138.75 399.671 li
138.75 398.171 li
140.25 396.671 li
140.25 394.421 li
141.75 392.921 li
141.75 391.42 li
@
gsave
267.001 266.17 mo
27 266.17 li
27 452.921 li
267.001 452.921 li
cp
clp
27 325.42 mo
29.25 325.42 li
30 326.17 li
31.5 326.17 li
32.25 326.92 li
38.25 326.92 li
39 327.67 li
39.75 327.67 li
43.5 331.42 li
43.5 332.17 li
45.75 334.42 li
45.75 335.17 li
47.25 336.67 li
48 336.67 li
48.75 337.42 li
53.25 337.42 li
57 341.17 li
57 342.67 li
58.5 344.17 li
58.5 345.67 li
59.25 346.42 li
59.25 347.92 li
60.75 349.42 li
60.75 350.92 li
62.25 352.42 li
62.25 353.17 li
64.5 355.42 li
68.25 355.42 li
69 356.17 li
69.75 356.17 li
71.25 357.67 li
71.25 358.42 li
@
grestore
1 /0 /CSD get_res sepcs
.85 sep
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
117 491.171 mo
( )sh
LEPHWN+Arial-BoldMT*1 [12 0 0 -12 0 0 ]msf
129 498.671 mo
(N/E)
[8.664 3.336 0 ]xsh
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
148.5 491.171 mo
(t/2)
[5.32948 4.4496 0 ]xsh
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
166.5 491.171 mo
(!)sh
.5 lw
351.001 293.92 mo
375.001 293.92 li
375.001 271.42 li
1 /0 /CSD get_res sepcs
0 sep
@
351.001 293.92 mo
351.001 271.42 li
375.001 271.42 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 108 11 <0001006bfe51026805d300100046400e280fa70302080901000910001208
bd012200090001012200000294400a09f30c9b200430040204b80296b311
a56b182b10f65dedfdf4ed10ed003f3f103c103c3130015d012326023510
13363733020215141217160265c199a0635684c089673d3523fe51e701f2
e901210102e0bdfed1fe57eea4fea89b6600>HIBBAA+Arial-BoldMT AddT42Char 
2 246 12 <00010043fe51024005d30010004940182702270a6702670a9702a702a80e
07090810000810001210bd012200000009012200000294b408f3059b0cb8
0296b3126a43182b10f6edfde4ed10ed003f3f103c103c3130015d133e03
3534020333161215140702034553443a1c6689bf97a7424bacfe51b2bef8
df75ee01a9012fd7fe1ef8d1effef4fefb00>HIBBAA+Arial-BoldMT AddT42Char 
2 5182 71 <00020054ffe8046105ba000f001c0090402d125906590a59125616561859
1c98079909f80909701e801e023a03340c3a1534194a03440c4a15441999
090914b80274b2050b1ab80274400e0b070e0f0001000a17290e0d2601b8
0129400f0f001a8f1e011e102108191d583c182b4e10f44ded4e1071f63c
4dedfd3ce6003f3c3f3c3fed3fed3130005d01715d4358400d6906690a69
1266166618691c065d592121350606232200111012333217112101141716
3332363534262322060461fefb41b15ab7fefbfec2b2820119fd122f447a
6188846764879c5b5901270108010e0119940210fc70aa4c6ea5a4b7a19f
>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/parenleft 11 def
/parenright 12 def
/d 71 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 100 /d put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one 
/two /.notdef /four /five /six /seven /eight /nine 
11{/.notdef}rp /E 8{/.notdef}rp /N 21{/.notdef}rp /d 15{/.notdef}rp /t 
139{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
357.001 289.42 mo
(\(d\))
[5.32947 9.7775 0 ]xsh
46.5 292.42 mo
70.5 292.42 li
70.5 269.92 li
1 /0 /CSD get_res sepcs
0 sep
@
46.5 292.42 mo
46.5 269.92 li
70.5 269.92 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 4866 70 <00010055ffe8043f043e001900e14051580f59125916680f691269167d18
79199702970cc610c618d710d618e906e908e913e915f80613381338154a
124a164618590c690c073a1237163718037705770f8705860f8919a812a7
16b912b616090eb8ffc0b3181b340eb8ffc0b51214340e330db8ffc0b319
1e340db8ffc0b30f11340dba0104000a02744012110b0040181b34004012
1434003390010101ba0101000402744020170701401214340121002f0d40
1214340d214f0e010e1a1b072114191a5841182b4e10f44ded4e10f65d4d
ed2bf4ed2b003ffdf45de42b2b3ffdf42b2be42b2b3130005d7101715d01
052626232206151416333236370506062322001110003332160431feeb0e
634f697d7f6b50661501142bf4cde9feeb0116edc2e502ec32535491aabd
9c5b6f2fbec20126010401070125a700>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/c 70 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 99 /c put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one 
/two /.notdef /four /five /six /seven /eight /nine 
11{/.notdef}rp /E 8{/.notdef}rp /N 20{/.notdef}rp /c /d 15{/.notdef}rp 
/t 139{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
52.5004 287.92 mo
(\(c\))
[5.32628 8.89439 0 ]xsh
57 44.919 mo
81 44.919 li
81 22.419 li
1 /0 /CSD get_res sepcs
0 sep
@
57 44.919 mo
57 22.419 li
81 22.419 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 4088 68 <00020049ffe8042e043e0023003201714068071a081c051d161a4a1b481c
4925db10df11093619461957266619672686269219931aa61ab91bc71ac8
1b0c06060d151606191627062915591977028602a606b506c6060cbf34d9
10021d243231112c0d24402b2e3424402228342440191d346f24fc240224
461db8ffc040300e0f343d1d01001d101db01df91d041d1d2c013300400e
0f340f001f0002005521401c113f21401b103f2140181a3421b80274b504
070c0d0a2cb8ffc0b31c113f2cb8ffc0b31b103f2cb8ffc0b3181a342cb8
02744040140b1e3126082909280d591f0c9f0c021f0c01ff0c010c400e16
340c1a4f340134600001008e300101013329215f1701df17014f175f176f
17031719336941182b4e10f45d71724dedf471ed5d4e105df62b5d71724d
edf4e4fd3c003fed2b2b2b3f3c3ffd2b2b2bf45d2be412392f5d712bb106
02435458b22f1d017159edb10602435458b90024ffc0b71b1d3454246424
025d2b595d2b2b2b111239030e103c3c3c313001715d005d710127363633
321616150314161721262726270606232226353436363736373534262322
060106060706151416333237363736350165ff2bd2cfbcb84b031b25feea
0b10070348a45da4bd569b92c54c506f4b54015e36ea243758444c453310
0b02e22e9a945989b7feb88c854c1c3719084646b2885a8d4b1c25201c51
453bfed2123218273c3b563226372465>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/a 68 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one 
/two /.notdef /four /five /six /seven /eight /nine 
11{/.notdef}rp /E 8{/.notdef}rp /N 18{/.notdef}rp /a /.notdef /c 
/d 15{/.notdef}rp /t 139{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
63.0004 40.4193 mo
(\(a\))
[5.32628 8.89439 0 ]xsh
354.751 44.169 mo
378.751 44.169 li
378.751 21.669 li
1 /0 /CSD get_res sepcs
0 sep
@
354.751 44.169 mo
354.751 21.669 li
378.751 21.669 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 4614 69 <00020087ffe8049405ba000f001c009db90012fff840310b39371b471b02
125606560a56165618591cf7070635043b0d3b13351b45044b0d4b13451b
940799090a0c0e010201001ab80274b2050714b8027440130b0b0f000a17
21081a701e011e10290203260fb80129400c01700080000200191d3f4118
2b4e10f4713c4dedfd3ce64e1071f64ded003f3c3fed3fed3f3c31300071
5d015d4358400b6606660a66166618691c055d59005d2b33112111363332
1211100023222627151314171633323635342623220687011982b2c2fefe
fdb95bb140123449795d838467658605bafdf094fee7fef9fef0feda5b59
9c022aa54f709fabb6a19d00>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/b 69 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one 
/two /.notdef /four /five /six /seven /eight /nine 
11{/.notdef}rp /E 8{/.notdef}rp /N 18{/.notdef}rp /a /b /c 
/d 15{/.notdef}rp /t 139{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
360.751 39.6693 mo
(\(b\))
[5.32947 9.7775 0 ]xsh
477.751 113.92 mo
540.001 113.92 li
540.001 23.17 li
477.751 23.17 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
477.751 113.92 mo
477.751 23.169 li
540.002 23.169 li
540.002 113.92 li
477.751 113.92 li
@
477.751 23.169 mo
540.002 23.169 li
1 /0 /CSD get_res sepcs
1 sep
@
477.751 113.92 mo
540.002 113.92 li
540.002 23.169 li
@
477.751 113.92 mo
477.751 23.169 li
@
477.751 113.92 mo
540.002 113.92 li
@
477.751 113.92 mo
477.751 23.169 li
540.002 23.169 li
@
477.751 113.92 mo
540.002 113.92 li
540.002 23.169 li
@
477.751 113.92 mo
477.751 23.169 li
@
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 6234 95 <000100b0fe51018f05d30003004c4009500501400550050205b8ffc0b31b
1d3405b8ffc0b311133403b801984011010002034900006f0101bf010101
1904e6b9011900182b4e10f45d713c4d10fd3c003f4ded3130012b2b5d71
13113311b0dffe510782f87e>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/bar 95 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 124 /bar put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one 
/two /.notdef /four /five /six /seven /eight /nine 
11{/.notdef}rp /E 8{/.notdef}rp /N 18{/.notdef}rp /a /b /c 
/d 15{/.notdef}rp /t 7{/.notdef}rp /bar 131{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
517.501 41.919 mo
(|)sh
%ADOBeginSubsetFont: GFNBAA+Arial-BoldMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (GFNBAA+Arial-BoldMT)
%%Title: (GFNBAA+Arial-BoldMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /GFNBAA+Arial-BoldMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-628 -376 2000 1056} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4453 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A93
6AA182F5809A9> |
74 <001C60D8A8C9B7D8BE2780ECF91BB8FE73517B0190DDC8DBC9897295332E
6D8EF13268DE217D7EA63F2C2488BA6624154001DFCD86A24A51CFE6922F8614
F4FD4481342B3992244B419F0D448BA14CBCD530939FD538BD00615A031E3CBF
1609B0E4C3D7F5A051C575D052C1A51F88B318CA9D0C7CFDFA53AA8FB2F2EE27
4EE2F4C85657CA9E748262BB03EF446591D320994414EE439D72B9883F38366A
41CF501DCE32006C591422CCF439307E4D3088D90FF7CD2955301C96A46D1D15
45AF9D499025D541CB2077BD42919F91257F222D868E80527F0D65> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /GFNBAA+Arial-BoldMT-Identity-H /Identity-H 0 [/GFNBAA+Arial-BoldMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LEPHWP+Arial-BoldMT /GFNBAA+Arial-BoldMT-Identity-H findfont ct_VMDictPut
LEPHWP+Arial-BoldMT [16 0 0 -16 0 0 ]msf
521.984 41.919 mo
(\000J)sh
%ADOBeginSubsetFont: QJJAAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LEPHWO+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/angleright <1C60D8A8C9B82356EE7205563CED86AEF7600B39D1D5A1A9EF6
509309CE9C98931E8A43087606930BE451CA824> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LEPHWO+Symbol /Encoding get
dup 34 /angleright put
pop
%ADOEndSubsetFont
/LEPHWO+Symbol*1 
[32{/.notdef}rp /Omega /pi /angleright 66{/.notdef}rp /epsilon 154{/.notdef}rp]
LEPHWO+Symbol nf
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
531.763 41.919 mo
(")sh
2.5 lw
483.751 35.169 mo
513.751 35.169 li
.848478 .691768 .00411994 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 5422 72 <00020041ffe80427043e0014001c01a3b90010fff840460b3999099a0d96
10a805a70abb09bb0db81a0808140148024706460a4f1ea80db606b61ac7
0ac80cd60ad80cf807f70d0d1c0f1c15401b1d3415400e11340f15bf15cf
150315b8ffc0b30f1e3f15b8ffc0b30e173f15b8028d400c0f0e12500e60
0e020e181201b8ffc0b6191b3401331200b8ffc0b31d203400b8ffc0b322
293400b8ffc0b32b2d3400b8ffc0b3181c3400b8ffc0400f0e0f34a00001
0000100002005f1212b80274b3040b1218b8027440240b070021012f1521
4f0e010e1a2f1e5f1e6f1e9f1e041e0f2108400d0f3408191d6941182b4e
10f42b4ded4e105df65d4dedf4ed003fed435c584014184028143f18401e
0f3f18401b103f18401c113f2b2b2b2b593ffd435c58b90012ffc0b32814
3f12b8ffc0b31e0f3f12b8ffc0b31b103f12b8ffc0b21c113f2b2b2b2b59
f45d712b2b2b2b2b435c58b90000ffc0b2123900b8ffc0b2173900b8ffb0
b3090a3e00b8ffc0b241213f2b002b2b2b59e42b1112395d435c5840140e
400f1e3f0e401c113f0e401b103f0e400e173f002b2b2b2b592f3cfd2b2b
722b2b3c0111333130015d71005d2b010506062320272635100033320003
211616333236132626232207061702fa011836e9affeeb85690114d3ed01
1206fd40038261425a270378565c3c3c0101522f9aa1b591dd0108012bfe
c7febd7d8b48016c7a7f43437300>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/e 72 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 101 /e put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one 
/two /.notdef /four /five /six /seven /eight /nine 
11{/.notdef}rp /E 8{/.notdef}rp /N 18{/.notdef}rp /a /b /c 
/d /e 14{/.notdef}rp /t 7{/.notdef}rp /bar 131{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
517.501 63.6693 mo
(|e)
[4.48315 0 ]xsh
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
530.253 63.6693 mo
(")sh
[6 6 ] 0 dsh
483.751 56.919 mo
513.751 56.919 li
.605798 0 .889097 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
517.501 86.17 mo
(|)sh
%ADOBeginSubsetFont: GFNBAA+Arial-BoldMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/GFNBAA+Arial-BoldMT 1 GetGlyphDirectory
73 <001C60D8A8C9B81F2C5A71D50B9B0701F5A31E22DDFBF554FF2D149AB14D
DEFC1B9ADBD8105EC88497FBC09B03794C95967111EB4354C8578F0E04207510
7F9743D9A4F26007EA81109EB5443BB577E4EC9F8677529403BA64E3F5> |
!
end
end end
%ADOEndSubsetFont
LEPHWP+Arial-BoldMT [16 0 0 -16 0 0 ]msf
521.984 86.17 mo
(\000I)sh
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
527.315 86.17 mo
(")sh
[] 0 dsh
483.751 79.42 mo
513.751 79.42 li
@
%ADOBeginSubsetFont: HIBBAA+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Arial-BoldMT gcheck setglobal} if
2 3422 41 <000100970000048405ba00090072403f0805040605250720083008bf08df
08042f08900802080800030425020102090008073f064f06020652030002
01021a200b300b020b04092001200030000200b8028bb30a3153182b4e10
f45d3c4dfd3c4e105df65d3c4df45d3c003f3c3f3cfd3c12392f5d713cfd
3c0305103c3c3130331121152111211521119703edfd3b0264fd9c05baf8
fea5f8fd9100>HIBBAA+Arial-BoldMT AddT42Char 
HIBBAA+Arial-BoldMT /CharStrings get begin
/F 41 def
end
HIBBAA+Arial-BoldMT /Encoding get
dup 70 /F put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/LEPHWN+Arial-BoldMT*1 
[40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one 
/two /.notdef /four /five /six /seven /eight /nine 
11{/.notdef}rp /E /F 7{/.notdef}rp /N 18{/.notdef}rp /a /b 
/c /d /e 14{/.notdef}rp /t 7{/.notdef}rp /bar 131{/.notdef}rp]
LEPHWN+Arial-BoldMT nf
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
517.501 107.92 mo
(F)sh
[.5 4 6 4 ] 0 dsh
483.751 101.17 mo
513.751 101.17 li
0 .945647 .852842 0 cmyk
@
185.25 113.92 mo
247.5 113.92 li
247.5 23.17 li
185.25 23.17 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
.5 lw
[] 0 dsh
185.25 113.92 mo
185.25 23.169 li
247.501 23.169 li
247.501 113.92 li
185.25 113.92 li
@
185.25 23.169 mo
247.501 23.169 li
1 /0 /CSD get_res sepcs
1 sep
@
185.25 113.92 mo
247.501 113.92 li
247.501 23.169 li
@
185.25 113.92 mo
185.25 23.169 li
@
185.25 113.92 mo
247.501 113.92 li
@
185.25 113.92 mo
185.25 23.169 li
247.501 23.169 li
@
185.25 113.92 mo
247.501 113.92 li
247.501 23.169 li
@
185.25 113.92 mo
185.25 23.169 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
225.001 41.919 mo
(|)sh
LEPHWP+Arial-BoldMT [16 0 0 -16 0 0 ]msf
229.484 41.919 mo
(\000J)sh
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
239.263 41.919 mo
(")sh
2.5 lw
191.25 35.169 mo
221.251 35.169 li
.848478 .691768 .00411994 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
225.001 63.6693 mo
(|e)
[4.48318 0 ]xsh
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
237.753 63.6693 mo
(")sh
[6 6 ] 0 dsh
191.25 56.919 mo
221.251 56.919 li
.605798 0 .889097 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
225.001 86.17 mo
(|)sh
LEPHWP+Arial-BoldMT [16 0 0 -16 0 0 ]msf
229.484 86.17 mo
(\000I)sh
LEPHWO+Symbol*1 [16 0 0 -16 0 0 ]msf
234.815 86.17 mo
(")sh
[] 0 dsh
191.25 79.42 mo
221.251 79.42 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
225.001 107.92 mo
(F)sh
[.5 4 6 4 ] 0 dsh
191.25 101.17 mo
221.251 101.17 li
0 .945647 .852842 0 cmyk
@
192 371.17 mo
254.25 371.17 li
254.25 311.17 li
192 311.17 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
.5 lw
[] 0 dsh
192 371.17 mo
192 311.17 li
254.251 311.17 li
254.251 371.17 li
192 371.17 li
@
192 311.17 mo
254.251 311.17 li
1 /0 /CSD get_res sepcs
1 sep
@
192 371.17 mo
254.251 371.17 li
254.251 311.17 li
@
192 371.17 mo
192 311.17 li
@
192 371.17 mo
254.251 371.17 li
@
192 371.17 mo
192 311.17 li
254.251 311.17 li
@
192 371.17 mo
254.251 371.17 li
254.251 311.17 li
@
192 371.17 mo
192 311.17 li
@
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
231.751 329.92 mo
(F)sh
LEPHWN+Arial-BoldMT*1 [12 0 0 -12 0 0 ]msf
241.501 337.42 mo
(N)sh
2.5 lw
[6 6 ] 0 dsh
198 326.92 mo
228.001 326.92 li
0 .945647 .852842 0 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
LEPHWN+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf
231.751 359.17 mo
(F)sh
LEPHWN+Arial-BoldMT*1 [12 0 0 -12 0 0 ]msf
241.501 366.67 mo
(E)sh
[] 0 dsh
198 354.67 mo
228.001 354.67 li
.848478 .691768 .00411994 0 cmyk
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/LEPHWP+Arial-BoldMT-Identity-H uf
/LEPHWP+Arial-BoldMT /CIDFont ur
/LEPHWO+Symbol*1 uf
/LEPHWO+Symbol uf
/QJJAAA+Symbol uf
/LEPHWN+Arial-BoldMT*1 uf
/LEPHWN+Arial-BoldMT uf
/HIBBAA+Arial-BoldMT uf
/LEPHWM+Arial-BoldMT-Identity-H uf
/LEPHWM+Arial-BoldMT /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
